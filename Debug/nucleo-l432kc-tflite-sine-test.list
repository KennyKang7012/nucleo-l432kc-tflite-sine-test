
nucleo-l432kc-tflite-sine-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f68  0800f0c0  0800f0c0  0001f0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013028  08013028  00030d98  2**0
                  CONTENTS
  4 .ARM          00000008  08013028  08013028  00023028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013030  08013030  00030d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013030  08013030  00023030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013034  08013034  00023034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d98  20000000  08013038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  20000da0  08013dd0  00030da0  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  2000182c  08013dd0  0003182c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030d98  2**0
                  CONTENTS, READONLY
 12 .debug_info   0019436b  00000000  00000000  00030dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e147  00000000  00000000  001c5133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005ba8  00000000  00000000  001d3280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00005a18  00000000  00000000  001d8e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e523  00000000  00000000  001de840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d656  00000000  00000000  0020cd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177794  00000000  00000000  0024a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003c1b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001b5ac  00000000  00000000  003c1ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000da0 	.word	0x20000da0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f0a4 	.word	0x0800f0a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000da4 	.word	0x20000da4
 80001cc:	0800f0a4 	.word	0x0800f0a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff2b 	bl	8000afc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca1 	bl	8000618 <__aeabi_dmul>
 8000cd6:	f000 f979 	bl	8000fcc <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc22 	bl	8000524 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc98 	bl	8000618 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fada 	bl	80002a8 <__aeabi_dsub>
 8000cf4:	f000 f96a 	bl	8000fcc <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8083 	bne.w	8000e1a <__udivmoddi4+0x116>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d947      	bls.n	8000daa <__udivmoddi4+0xa6>
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b142      	cbz	r2, 8000d32 <__udivmoddi4+0x2e>
 8000d20:	f1c2 0020 	rsb	r0, r2, #32
 8000d24:	fa24 f000 	lsr.w	r0, r4, r0
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	4097      	lsls	r7, r2
 8000d2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d30:	4094      	lsls	r4, r2
 8000d32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d36:	0c23      	lsrs	r3, r4, #16
 8000d38:	fbbc f6f8 	udiv	r6, ip, r8
 8000d3c:	fa1f fe87 	uxth.w	lr, r7
 8000d40:	fb08 c116 	mls	r1, r8, r6, ip
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f10e 	mul.w	r1, r6, lr
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x60>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d56:	f080 8119 	bcs.w	8000f8c <__udivmoddi4+0x288>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 8116 	bls.w	8000f8c <__udivmoddi4+0x288>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d909      	bls.n	8000d90 <__udivmoddi4+0x8c>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	f080 8105 	bcs.w	8000f90 <__udivmoddi4+0x28c>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f240 8102 	bls.w	8000f90 <__udivmoddi4+0x28c>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d94:	eba4 040e 	sub.w	r4, r4, lr
 8000d98:	2600      	movs	r6, #0
 8000d9a:	b11d      	cbz	r5, 8000da4 <__udivmoddi4+0xa0>
 8000d9c:	40d4      	lsrs	r4, r2
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e9c5 4300 	strd	r4, r3, [r5]
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xaa>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d150      	bne.n	8000e58 <__udivmoddi4+0x154>
 8000db6:	1bcb      	subs	r3, r1, r7
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dc6:	0c21      	lsrs	r1, r4, #16
 8000dc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0xe4>
 8000dd8:	1879      	adds	r1, r7, r1
 8000dda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0xe2>
 8000de0:	428b      	cmp	r3, r1
 8000de2:	f200 80e9 	bhi.w	8000fb8 <__udivmoddi4+0x2b4>
 8000de6:	4684      	mov	ip, r0
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	b2a3      	uxth	r3, r4
 8000dec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000df8:	fb08 f800 	mul.w	r8, r8, r0
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x10c>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x10a>
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	f200 80d9 	bhi.w	8000fc0 <__udivmoddi4+0x2bc>
 8000e0e:	4618      	mov	r0, r3
 8000e10:	eba4 0408 	sub.w	r4, r4, r8
 8000e14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e18:	e7bf      	b.n	8000d9a <__udivmoddi4+0x96>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d909      	bls.n	8000e32 <__udivmoddi4+0x12e>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	f000 80b1 	beq.w	8000f86 <__udivmoddi4+0x282>
 8000e24:	2600      	movs	r6, #0
 8000e26:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	fab3 f683 	clz	r6, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d14a      	bne.n	8000ed0 <__udivmoddi4+0x1cc>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0x140>
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	f200 80b8 	bhi.w	8000fb4 <__udivmoddi4+0x2b0>
 8000e44:	1a84      	subs	r4, r0, r2
 8000e46:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0a8      	beq.n	8000da4 <__udivmoddi4+0xa0>
 8000e52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e60:	4097      	lsls	r7, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6a:	40d9      	lsrs	r1, r3
 8000e6c:	4330      	orrs	r0, r6
 8000e6e:	0c03      	lsrs	r3, r0, #16
 8000e70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e74:	fa1f f887 	uxth.w	r8, r7
 8000e78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e80:	fb06 f108 	mul.w	r1, r6, r8
 8000e84:	4299      	cmp	r1, r3
 8000e86:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8a:	d909      	bls.n	8000ea0 <__udivmoddi4+0x19c>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e92:	f080 808d 	bcs.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 808a 	bls.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	443b      	add	r3, r7
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b281      	uxth	r1, r0
 8000ea4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb00 f308 	mul.w	r3, r0, r8
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x1c4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebe:	d273      	bcs.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d971      	bls.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4439      	add	r1, r7
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ece:	e778      	b.n	8000dc2 <__udivmoddi4+0xbe>
 8000ed0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ed8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000edc:	431c      	orrs	r4, r3
 8000ede:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ee6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	0c3b      	lsrs	r3, r7, #16
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fa1f f884 	uxth.w	r8, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f02:	fb09 fa08 	mul.w	sl, r9, r8
 8000f06:	458a      	cmp	sl, r1
 8000f08:	fa02 f206 	lsl.w	r2, r2, r6
 8000f0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x220>
 8000f12:	1861      	adds	r1, r4, r1
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d248      	bcs.n	8000fac <__udivmoddi4+0x2a8>
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	d946      	bls.n	8000fac <__udivmoddi4+0x2a8>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	4421      	add	r1, r4
 8000f24:	eba1 010a 	sub.w	r1, r1, sl
 8000f28:	b2bf      	uxth	r7, r7
 8000f2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x24a>
 8000f3e:	19e7      	adds	r7, r4, r7
 8000f40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f44:	d22e      	bcs.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f46:	45b8      	cmp	r8, r7
 8000f48:	d92c      	bls.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4427      	add	r7, r4
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba7 0708 	sub.w	r7, r7, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454f      	cmp	r7, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	4649      	mov	r1, r9
 8000f60:	d31a      	bcc.n	8000f98 <__udivmoddi4+0x294>
 8000f62:	d017      	beq.n	8000f94 <__udivmoddi4+0x290>
 8000f64:	b15d      	cbz	r5, 8000f7e <__udivmoddi4+0x27a>
 8000f66:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f72:	40f2      	lsrs	r2, r6
 8000f74:	ea4c 0202 	orr.w	r2, ip, r2
 8000f78:	40f7      	lsrs	r7, r6
 8000f7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f7e:	2600      	movs	r6, #0
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	462e      	mov	r6, r5
 8000f88:	4628      	mov	r0, r5
 8000f8a:	e70b      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	e6e9      	b.n	8000d64 <__udivmoddi4+0x60>
 8000f90:	4618      	mov	r0, r3
 8000f92:	e6fd      	b.n	8000d90 <__udivmoddi4+0x8c>
 8000f94:	4543      	cmp	r3, r8
 8000f96:	d2e5      	bcs.n	8000f64 <__udivmoddi4+0x260>
 8000f98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7df      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e7d2      	b.n	8000f4e <__udivmoddi4+0x24a>
 8000fa8:	4660      	mov	r0, ip
 8000faa:	e78d      	b.n	8000ec8 <__udivmoddi4+0x1c4>
 8000fac:	4681      	mov	r9, r0
 8000fae:	e7b9      	b.n	8000f24 <__udivmoddi4+0x220>
 8000fb0:	4666      	mov	r6, ip
 8000fb2:	e775      	b.n	8000ea0 <__udivmoddi4+0x19c>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e74a      	b.n	8000e4e <__udivmoddi4+0x14a>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	4439      	add	r1, r7
 8000fbe:	e713      	b.n	8000de8 <__udivmoddi4+0xe4>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	e724      	b.n	8000e10 <__udivmoddi4+0x10c>
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	080128f4 	.word	0x080128f4

0800102c <_ZN6tflite13ErrorReporterD0Ev>:
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffe9 	bl	800100c <_ZN6tflite13ErrorReporterD1Ev>
 800103a:	2104      	movs	r1, #4
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f00a ffff 	bl	800c040 <_ZdlPvj>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffd5 	bl	800100c <_ZN6tflite13ErrorReporterD1Ev>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	08012bd4 	.word	0x08012bd4

08001070 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ffe7 	bl	800104c <_ZN6tflite18MicroErrorReporterD1Ev>
 800107e:	2104      	movs	r1, #4
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f00a ffdd 	bl	800c040 <_ZdlPvj>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 80010a4:	4a05      	ldr	r2, [pc, #20]	; (80010bc <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 80010a6:	2149      	movs	r1, #73	; 0x49
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 80010aa:	f00b f8b9 	bl	800c220 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800f0c0 	.word	0x0800f0c0
 80010bc:	0800f104 	.word	0x0800f104
 80010c0:	0800f124 	.word	0x0800f124

080010c4 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80010cc:	687c      	ldr	r4, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fb7b 	bl	80017cc <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	425b      	negs	r3, r3
 80010da:	4423      	add	r3, r4
  }
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ffe7 	bl	80010c4 <_ZNK11flatbuffers5Table9GetVTableEv>
 80010f6:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 fb4b 	bl	8001794 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010fe:	4603      	mov	r3, r0
 8001100:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	897b      	ldrh	r3, [r7, #10]
 8001106:	429a      	cmp	r2, r3
 8001108:	d207      	bcs.n	800111a <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fb3f 	bl	8001794 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001116:	4603      	mov	r3, r0
 8001118:	e000      	b.n	800111c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800111a:	2300      	movs	r3, #0
  }
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZNK6tflite5Model7versionEv>:
    VT_DESCRIPTION = 10,
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16
  };
  uint32_t version() const {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	2104      	movs	r1, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fb58 	bl	80017e8 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8001138:	4603      	mov	r3, r0
  }
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 fb6a 	bl	8001824 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <_ZN6tflite10OpResolverD1Ev>:
  virtual const TfLiteRegistration* FindOp(tflite::BuiltinOperator op,
                                           int version) const = 0;
  /// Finds the op registration of a custom operator by op name.
  virtual const TfLiteRegistration* FindOp(const char* op,
                                           int version) const = 0;
  virtual ~OpResolver() {}
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	080128dc 	.word	0x080128dc

0800117c <_ZN6tflite10OpResolverD0Ev>:
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffe9 	bl	800115c <_ZN6tflite10OpResolverD1Ev>
 800118a:	2104      	movs	r1, #4
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f00a ff57 	bl	800c040 <_ZdlPvj>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	460b      	mov	r3, r1
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3310      	adds	r3, #16
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	7afa      	ldrb	r2, [r7, #11]
 80011b4:	4611      	mov	r1, r2
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	4798      	blx	r3
 80011ba:	4603      	mov	r3, r0
  }
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3314      	adds	r3, #20
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	4798      	blx	r3
 80011de:	4603      	mov	r3, r0
  }
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ffaf 	bl	800115c <_ZN6tflite10OpResolverD1Ev>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	080128b8 	.word	0x080128b8

0800120c <_ZN6tflite15MicroOpResolverD0Ev>:
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffe7 	bl	80011e8 <_ZN6tflite15MicroOpResolverD1Ev>
 800121a:	2104      	movs	r1, #4
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f00a ff0f 	bl	800c040 <_ZdlPvj>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <__tcf_0>:

  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);

  // Set up logging (modify tensorflow/lite/micro/debug_log.cc)
  static tflite::MicroErrorReporter micro_error_reporter;
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
 8001230:	4801      	ldr	r0, [pc, #4]	; (8001238 <__tcf_0+0xc>)
 8001232:	f7ff ff0b 	bl	800104c <_ZN6tflite18MicroErrorReporterD1Ev>
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000bb0 	.word	0x20000bb0

0800123c <__tcf_1>:
  }

  // Pull in only needed operations (should match NN layers). Template parameter
  // <n> is number of ops to be added. Available ops:
  // tensorflow/lite/micro/kernels/micro_ops.h
  static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
 8001240:	4801      	ldr	r0, [pc, #4]	; (8001248 <__tcf_1+0xc>)
 8001242:	f000 fc25 	bl	8001a90 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200016a4 	.word	0x200016a4

0800124c <__tcf_2>:
    while(1);
  }

  // Build an interpreter to run the model with.
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
 8001250:	4801      	ldr	r0, [pc, #4]	; (8001258 <__tcf_2+0xc>)
 8001252:	f007 fad0 	bl	80087f6 <_ZN6tflite16MicroInterpreterD1Ev>
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200016e0 	.word	0x200016e0

0800125c <main>:
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b098      	sub	sp, #96	; 0x60
 8001260:	af04      	add	r7, sp, #16
  int buf_len = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_Init();
 8001266:	f000 fe84 	bl	8001f72 <HAL_Init>
  SystemClock_Config();
 800126a:	f000 f965 	bl	8001538 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800126e:	f000 fa23 	bl	80016b8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001272:	f000 f9ed 	bl	8001650 <_ZL19MX_USART2_UART_Initv>
  MX_TIM16_Init();
 8001276:	f000 f9bf 	bl	80015f8 <_ZL13MX_TIM16_Initv>
  HAL_TIM_Base_Start(&htim16);
 800127a:	4896      	ldr	r0, [pc, #600]	; (80014d4 <main+0x278>)
 800127c:	f002 fb42 	bl	8003904 <HAL_TIM_Base_Start>
  static tflite::MicroErrorReporter micro_error_reporter;
 8001280:	4b95      	ldr	r3, [pc, #596]	; (80014d8 <main+0x27c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f3bf 8f5b 	dmb	ish
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf0c      	ite	eq
 8001292:	2301      	moveq	r3, #1
 8001294:	2300      	movne	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d010      	beq.n	80012be <main+0x62>
 800129c:	488e      	ldr	r0, [pc, #568]	; (80014d8 <main+0x27c>)
 800129e:	f00a fed3 	bl	800c048 <__cxa_guard_acquire>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf14      	ite	ne
 80012a8:	2301      	movne	r3, #1
 80012aa:	2300      	moveq	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <main+0x62>
 80012b2:	4889      	ldr	r0, [pc, #548]	; (80014d8 <main+0x27c>)
 80012b4:	f00a fed4 	bl	800c060 <__cxa_guard_release>
 80012b8:	4888      	ldr	r0, [pc, #544]	; (80014dc <main+0x280>)
 80012ba:	f00a ffcf 	bl	800c25c <atexit>
  error_reporter = &micro_error_reporter;
 80012be:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <main+0x284>)
 80012c0:	4a88      	ldr	r2, [pc, #544]	; (80014e4 <main+0x288>)
 80012c2:	601a      	str	r2, [r3, #0]
  error_reporter->Report("STM32 TensorFlow Lite test");
 80012c4:	4b86      	ldr	r3, [pc, #536]	; (80014e0 <main+0x284>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4987      	ldr	r1, [pc, #540]	; (80014e8 <main+0x28c>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 f890 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  model = tflite::GetModel(sine_model);
 80012d0:	4886      	ldr	r0, [pc, #536]	; (80014ec <main+0x290>)
 80012d2:	f7ff ff36 	bl	8001142 <_ZN6tflite8GetModelEPKv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a85      	ldr	r2, [pc, #532]	; (80014f0 <main+0x294>)
 80012da:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION)
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <main+0x294>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff1f 	bl	8001124 <_ZNK6tflite5Model7versionEv>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <main+0xa8>
    error_reporter->Report("Model version does not match Schema");
 80012f6:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <main+0x284>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	497e      	ldr	r1, [pc, #504]	; (80014f4 <main+0x298>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 f877 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    while(1);
 8001302:	e7fe      	b.n	8001302 <main+0xa6>
  static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 8001304:	4b7c      	ldr	r3, [pc, #496]	; (80014f8 <main+0x29c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f3bf 8f5b 	dmb	ish
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d014      	beq.n	800134a <main+0xee>
 8001320:	4875      	ldr	r0, [pc, #468]	; (80014f8 <main+0x29c>)
 8001322:	f00a fe91 	bl	800c048 <__cxa_guard_acquire>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <main+0xee>
 8001336:	2100      	movs	r1, #0
 8001338:	4870      	ldr	r0, [pc, #448]	; (80014fc <main+0x2a0>)
 800133a:	f000 faa1 	bl	8001880 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>
 800133e:	486e      	ldr	r0, [pc, #440]	; (80014f8 <main+0x29c>)
 8001340:	f00a fe8e 	bl	800c060 <__cxa_guard_release>
 8001344:	486e      	ldr	r0, [pc, #440]	; (8001500 <main+0x2a4>)
 8001346:	f00a ff89 	bl	800c25c <atexit>
  tflite_status = micro_op_resolver.AddFullyConnected();
 800134a:	486c      	ldr	r0, [pc, #432]	; (80014fc <main+0x2a0>)
 800134c:	f000 fab4 	bl	80018b8 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv>
 8001350:	4603      	mov	r3, r0
 8001352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tflite_status != kTfLiteOk)
 8001356:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <main+0x110>
    error_reporter->Report("Could not add FULLY CONNECTED op");
 800135e:	4b60      	ldr	r3, [pc, #384]	; (80014e0 <main+0x284>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4968      	ldr	r1, [pc, #416]	; (8001504 <main+0x2a8>)
 8001364:	4618      	mov	r0, r3
 8001366:	f003 f843 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    while(1);
 800136a:	e7fe      	b.n	800136a <main+0x10e>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <main+0x2ac>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	f3bf 8f5b 	dmb	ish
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01f      	beq.n	80013c8 <main+0x16c>
 8001388:	485f      	ldr	r0, [pc, #380]	; (8001508 <main+0x2ac>)
 800138a:	f00a fe5d 	bl	800c048 <__cxa_guard_acquire>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf14      	ite	ne
 8001394:	2301      	movne	r3, #1
 8001396:	2300      	moveq	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d014      	beq.n	80013c8 <main+0x16c>
 800139e:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <main+0x294>)
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <main+0x284>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	9202      	str	r2, [sp, #8]
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4b56      	ldr	r3, [pc, #344]	; (800150c <main+0x2b0>)
 80013b4:	4a51      	ldr	r2, [pc, #324]	; (80014fc <main+0x2a0>)
 80013b6:	4856      	ldr	r0, [pc, #344]	; (8001510 <main+0x2b4>)
 80013b8:	f007 f9d5 	bl	8008766 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 80013bc:	4852      	ldr	r0, [pc, #328]	; (8001508 <main+0x2ac>)
 80013be:	f00a fe4f 	bl	800c060 <__cxa_guard_release>
 80013c2:	4854      	ldr	r0, [pc, #336]	; (8001514 <main+0x2b8>)
 80013c4:	f00a ff4a 	bl	800c25c <atexit>
  interpreter = &static_interpreter;
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <main+0x2bc>)
 80013ca:	4a51      	ldr	r2, [pc, #324]	; (8001510 <main+0x2b4>)
 80013cc:	601a      	str	r2, [r3, #0]

  // Allocate memory from the tensor_arena for the model's tensors.
  tflite_status = interpreter->AllocateTensors();
 80013ce:	4b52      	ldr	r3, [pc, #328]	; (8001518 <main+0x2bc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 faa4 	bl	8008920 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tflite_status != kTfLiteOk)
 80013de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <main+0x198>
  {
    error_reporter->Report("AllocateTensors() failed");
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <main+0x284>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	494c      	ldr	r1, [pc, #304]	; (800151c <main+0x2c0>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 ffff 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    while(1);
 80013f2:	e7fe      	b.n	80013f2 <main+0x196>
  }

  // Assign model input and output buffers (tensors) to pointers
  model_input = interpreter->input(0);
 80013f4:	4b48      	ldr	r3, [pc, #288]	; (8001518 <main+0x2bc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 fc68 	bl	8008cd0 <_ZN6tflite16MicroInterpreter5inputEj>
 8001400:	4603      	mov	r3, r0
 8001402:	4a47      	ldr	r2, [pc, #284]	; (8001520 <main+0x2c4>)
 8001404:	6013      	str	r3, [r2, #0]
  model_output = interpreter->output(0);
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <main+0x2bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f007 fcc5 	bl	8008d9c <_ZN6tflite16MicroInterpreter6outputEj>
 8001412:	4603      	mov	r3, r0
 8001414:	4a43      	ldr	r2, [pc, #268]	; (8001524 <main+0x2c8>)
 8001416:	6013      	str	r3, [r2, #0]

  // Get number of elements in input tensor
  num_elements = model_input->bytes / sizeof(float);
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <main+0x2c4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	643b      	str	r3, [r7, #64]	; 0x40
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001426:	4940      	ldr	r1, [pc, #256]	; (8001528 <main+0x2cc>)
 8001428:	4618      	mov	r0, r3
 800142a:	f00b fe5f 	bl	800d0ec <siprintf>
 800142e:	64b8      	str	r0, [r7, #72]	; 0x48
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001432:	b29a      	uxth	r2, r3
 8001434:	1d39      	adds	r1, r7, #4
 8001436:	2364      	movs	r3, #100	; 0x64
 8001438:	483c      	ldr	r0, [pc, #240]	; (800152c <main+0x2d0>)
 800143a:	f002 fb61 	bl	8003b00 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Fill input buffer (use test value)
	  for (uint32_t i = 0; i < num_elements; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001446:	429a      	cmp	r2, r3
 8001448:	d20c      	bcs.n	8001464 <main+0x208>
	  {
	     model_input->data.f[i] = 2.0f;
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <main+0x2c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < num_elements; i++)
 800145c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800145e:	3301      	adds	r3, #1
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001462:	e7ee      	b.n	8001442 <main+0x1e6>
	  }

	  // Get current timestamp
	  timestamp = htim16.Instance->CNT;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <main+0x278>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c

	  // Run inference
	  tflite_status = interpreter->Invoke();
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <main+0x2bc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f007 fb8d 	bl	8008b90 <_ZN6tflite16MicroInterpreter6InvokeEv>
 8001476:	4603      	mov	r3, r0
 8001478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  if (tflite_status != kTfLiteOk)
 800147c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <main+0x234>
	  {
	     error_reporter->Report("Invoke failed");
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <main+0x284>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4929      	ldr	r1, [pc, #164]	; (8001530 <main+0x2d4>)
 800148a:	4618      	mov	r0, r3
 800148c:	f002 ffb0 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  }

	  // Read output (predicted y) of neural network
	  y_val = model_output->data.f[0];
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <main+0x2c8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38

	  // Print output of neural network along with inference time (microseconds)
	  buf_len = sprintf(buf,
 800149a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800149c:	f7ff f864 	bl	8000568 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
	                    "Output: %f | Duration: %lu\r\n",
	                    y_val,
	                    htim16.Instance->CNT - timestamp);
 80014a4:	490b      	ldr	r1, [pc, #44]	; (80014d4 <main+0x278>)
 80014a6:	6809      	ldr	r1, [r1, #0]
 80014a8:	6a48      	ldr	r0, [r1, #36]	; 0x24
	  buf_len = sprintf(buf,
 80014aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80014ac:	1a41      	subs	r1, r0, r1
 80014ae:	1d38      	adds	r0, r7, #4
 80014b0:	9100      	str	r1, [sp, #0]
 80014b2:	4920      	ldr	r1, [pc, #128]	; (8001534 <main+0x2d8>)
 80014b4:	f00b fe1a 	bl	800d0ec <siprintf>
 80014b8:	64b8      	str	r0, [r7, #72]	; 0x48
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80014ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014bc:	b29a      	uxth	r2, r3
 80014be:	1d39      	adds	r1, r7, #4
 80014c0:	2364      	movs	r3, #100	; 0x64
 80014c2:	481a      	ldr	r0, [pc, #104]	; (800152c <main+0x2d0>)
 80014c4:	f002 fb1c 	bl	8003b00 <HAL_UART_Transmit>

	  // Wait before doing it again
	  HAL_Delay(500);
 80014c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014cc:	f000 fdc6 	bl	800205c <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80014d0:	e7b5      	b.n	800143e <main+0x1e2>
 80014d2:	bf00      	nop
 80014d4:	20000dbc 	.word	0x20000dbc
 80014d8:	200016a0 	.word	0x200016a0
 80014dc:	0800122d 	.word	0x0800122d
 80014e0:	20000e8c 	.word	0x20000e8c
 80014e4:	20000bb0 	.word	0x20000bb0
 80014e8:	0800f1cc 	.word	0x0800f1cc
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000e90 	.word	0x20000e90
 80014f4:	0800f1e8 	.word	0x0800f1e8
 80014f8:	200016dc 	.word	0x200016dc
 80014fc:	200016a4 	.word	0x200016a4
 8001500:	0800123d 	.word	0x0800123d
 8001504:	0800f20c 	.word	0x0800f20c
 8001508:	20001774 	.word	0x20001774
 800150c:	20000ea0 	.word	0x20000ea0
 8001510:	200016e0 	.word	0x200016e0
 8001514:	0800124d 	.word	0x0800124d
 8001518:	20000e94 	.word	0x20000e94
 800151c:	0800f230 	.word	0x0800f230
 8001520:	20000e98 	.word	0x20000e98
 8001524:	20000e9c 	.word	0x20000e9c
 8001528:	0800f24c 	.word	0x0800f24c
 800152c:	20000e08 	.word	0x20000e08
 8001530:	0800f26c 	.word	0x0800f26c
 8001534:	0800f27c 	.word	0x0800f27c

08001538 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	2244      	movs	r2, #68	; 0x44
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f00a ff06 	bl	800c358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800155a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800155e:	f001 f817 	bl	8002590 <HAL_PWREx_ControlVoltageScaling>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001572:	f000 f8ff 	bl	8001774 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001576:	2302      	movs	r3, #2
 8001578:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001580:	2310      	movs	r3, #16
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001584:	2302      	movs	r3, #2
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001590:	230a      	movs	r3, #10
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001594:	2307      	movs	r3, #7
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001598:	2302      	movs	r3, #2
 800159a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800159c:	2302      	movs	r3, #2
 800159e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 f849 	bl	800263c <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80015ba:	f000 f8db 	bl	8001774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	230f      	movs	r3, #15
 80015c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2303      	movs	r3, #3
 80015c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2104      	movs	r1, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fc50 	bl	8002e7c <HAL_RCC_ClockConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80015ec:	f000 f8c2 	bl	8001774 <Error_Handler>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3758      	adds	r7, #88	; 0x58
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <_ZL13MX_TIM16_Initv+0x50>)
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <_ZL13MX_TIM16_Initv+0x54>)
 8001600:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80 - 1;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <_ZL13MX_TIM16_Initv+0x50>)
 8001604:	224f      	movs	r2, #79	; 0x4f
 8001606:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <_ZL13MX_TIM16_Initv+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <_ZL13MX_TIM16_Initv+0x50>)
 8001610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001614:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <_ZL13MX_TIM16_Initv+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <_ZL13MX_TIM16_Initv+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <_ZL13MX_TIM16_Initv+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <_ZL13MX_TIM16_Initv+0x50>)
 800162a:	f002 f913 	bl	8003854 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800163e:	f000 f899 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000dbc 	.word	0x20000dbc
 800164c:	40014400 	.word	0x40014400

08001650 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001656:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001692:	4807      	ldr	r0, [pc, #28]	; (80016b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001694:	f002 f9e6 	bl	8003a64 <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80016a8:	f000 f864 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000e08 	.word	0x20000e08
 80016b4:	40004400 	.word	0x40004400

080016b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a16      	ldr	r2, [pc, #88]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <_ZL12MX_GPIO_Initv+0x8c>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2108      	movs	r1, #8
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <_ZL12MX_GPIO_Initv+0x90>)
 800171c:	f000 ff12 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001720:	2308      	movs	r3, #8
 8001722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <_ZL12MX_GPIO_Initv+0x90>)
 8001738:	f000 fd9a 	bl	8002270 <HAL_GPIO_Init>

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	48000400 	.word	0x48000400

0800174c <DebugLog>:

/* USER CODE BEGIN 4 */

// Custom implementation of DebugLog from TensorFlow
extern "C" void DebugLog(const char* s)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), 100);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7fe fd45 	bl	80001e4 <strlen>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	2364      	movs	r3, #100	; 0x64
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4803      	ldr	r0, [pc, #12]	; (8001770 <DebugLog+0x24>)
 8001764:	f002 f9cc 	bl	8003b00 <HAL_UART_Transmit>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000e08 	.word	0x20000e08

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	e7fe      	b.n	800177c <Error_Handler+0x8>

0800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001786:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f8ac 	bl	80018fe <_ZN11flatbuffers12EndianScalarItEET_S1_>
 80017a6:	4603      	mov	r3, r0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ffde 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f885 	bl	80018e8 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80017de:	4603      	mov	r3, r0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	460b      	mov	r3, r1
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80017f6:	897b      	ldrh	r3, [r7, #10]
 80017f8:	4619      	mov	r1, r3
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fc72 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001800:	4603      	mov	r3, r0
 8001802:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001804:	8afb      	ldrh	r3, [r7, #22]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	8afb      	ldrh	r3, [r7, #22]
 800180e:	4413      	add	r3, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ffcd 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001816:	4603      	mov	r3, r0
 8001818:	e000      	b.n	800181c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800181a:	687b      	ldr	r3, [r7, #4]
  }
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f872 	bl	8001916 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001832:	4603      	mov	r3, r0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	080128dc 	.word	0x080128dc

0800185c <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ffe8 	bl	800183c <_ZN6tflite10OpResolverC1Ev>
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	080128b8 	.word	0x080128b8

08001880 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>:
namespace tflite {

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffe5 	bl	800185c <_ZN6tflite15MicroOpResolverC1Ev>
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE+0x34>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	08012894 	.word	0x08012894

080018b8 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv>:
  TfLiteStatus AddFloor() {
    return AddBuiltin(BuiltinOperator_FLOOR,
                      tflite::ops::micro::Register_FLOOR(), ParseFloor);
  }

  TfLiteStatus AddFullyConnected() {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED,
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f009 ff5b 	bl	800b780 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
                      ParseFullyConnected);
 80018ca:	f107 0208 	add.w	r2, r7, #8
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv+0x2c>)
 80018d0:	2109      	movs	r1, #9
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f832 	bl	800193c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80018d8:	4603      	mov	r3, r0
  }
 80018da:	4618      	mov	r0, r3
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	0800473d 	.word	0x0800473d

080018e8 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
    return t;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	80fb      	strh	r3, [r7, #6]
    return t;
 8001908:	88fb      	ldrh	r3, [r7, #6]
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  EndianCheck();
 800191e:	f7ff fbb7 	bl	8001090 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff29 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800192c:	4602      	mov	r2, r0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	460b      	mov	r3, r1
 800194a:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	2b20      	cmp	r3, #32
 8001950:	d10b      	bne.n	800196a <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	4934      	ldr	r1, [pc, #208]	; (8001a30 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fd45 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8001966:	2301      	movs	r3, #1
 8001968:	e05d      	b.n	8001a26 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3310      	adds	r3, #16
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	7afa      	ldrb	r2, [r7, #11]
 8001974:	4611      	mov	r1, r2
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	4798      	blx	r3
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001996:	7afa      	ldrb	r2, [r7, #11]
 8001998:	4926      	ldr	r1, [pc, #152]	; (8001a34 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fd28 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e040      	b.n	8001a26 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80019b8:	7afa      	ldrb	r2, [r7, #11]
 80019ba:	2301      	movs	r3, #1
 80019bc:	491e      	ldr	r1, [pc, #120]	; (8001a38 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 80019be:	f002 fd17 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e02f      	b.n	8001a26 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	015b      	lsls	r3, r3, #5
 80019ce:	4413      	add	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	1d1c      	adds	r4, r3, #4
 80019d4:	4615      	mov	r5, r2
 80019d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	7afa      	ldrb	r2, [r7, #11]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	440b      	add	r3, r1
 80019ee:	3318      	adds	r3, #24
 80019f0:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24

    builtin_codes_[num_buitin_ops_] = op;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	7afa      	ldrb	r2, [r7, #11]
 8001a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    builtin_parsers_[num_buitin_ops_] = parser;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	330a      	adds	r3, #10
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30

    return kTfLiteOk;
 8001a24:	2300      	movs	r3, #0
  }
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	0800f29c 	.word	0x0800f29c
 8001a34:	0800f2e4 	.word	0x0800f2e4
 8001a38:	0800f334 	.word	0x0800f334

08001a3c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d101      	bne.n	8001a52 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e018      	b.n	8001a84 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d210      	bcs.n	8001a82 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x46>
      const TfLiteRegistration& registration = registrations_[i];
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015b      	lsls	r3, r3, #5
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	3304      	adds	r3, #4
 8001a6a:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d101      	bne.n	8001a7a <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x3e>
        return &registration;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	e004      	b.n	8001a84 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e7e9      	b.n	8001a56 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001a82:	2300      	movs	r3, #0
  }
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev+0x20>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fba1 	bl	80011e8 <_ZN6tflite15MicroOpResolverD1Ev>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	08012894 	.word	0x08012894

08001ab4 <_ZN6tflite22MicroMutableOpResolverILj1EED0Ev>:
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ffe7 	bl	8001a90 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8001ac2:	2138      	movs	r1, #56	; 0x38
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f00a fabb 	bl	800c040 <_ZdlPvj>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d218      	bcs.n	8001b1e <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	3304      	adds	r3, #4
 8001af6:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d10a      	bne.n	8001b16 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
          (strcmp(registration.custom_name, op) == 0)) {
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	6839      	ldr	r1, [r7, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fb62 	bl	80001d0 <strcmp>
 8001b0c:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
        return &registration;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	e004      	b.n	8001b20 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e7e1      	b.n	8001ae2 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0xe>
    return nullptr;
 8001b1e:	2300      	movs	r3, #0
  }
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d901      	bls.n	8001b40 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 8001b3c:	f00a fb68 	bl	800c210 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d212      	bcs.n	8001b74 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	3328      	adds	r3, #40	; 0x28
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d106      	bne.n	8001b6c <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x44>
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	330a      	adds	r3, #10
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	e004      	b.n	8001b76 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e7e7      	b.n	8001b44 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001b74:	2300      	movs	r3, #0
  }
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6613      	str	r3, [r2, #96]	; 0x60
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_MspInit+0x44>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_MspInit+0x44>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_MspInit+0x44>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_TIM_Base_MspInit+0x38>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_TIM_Base_MspInit+0x3c>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_TIM_Base_MspInit+0x3c>)
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	6613      	str	r3, [r2, #96]	; 0x60
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_TIM_Base_MspInit+0x3c>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40014400 	.word	0x40014400
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b09e      	sub	sp, #120	; 0x78
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2254      	movs	r2, #84	; 0x54
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00a fb95 	bl	800c358 <memset>
  if(huart->Instance==USART2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_UART_MspInit+0xcc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d148      	bne.n	8001cca <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 fb1f 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c50:	f7ff fd90 	bl	8001774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c84:	2304      	movs	r3, #4
 8001c86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c94:	2307      	movs	r3, #7
 8001c96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca2:	f000 fae5 	bl	8002270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001caa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f000 fad3 	bl	8002270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	3778      	adds	r7, #120	; 0x78
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40004400 	.word	0x40004400
 8001cd8:	40021000 	.word	0x40021000

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f978 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
	return 1;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_kill>:

int _kill(int pid, int sig)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d4a:	f00a fa8d 	bl	800c268 <__errno>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2216      	movs	r2, #22
 8001d52:	601a      	str	r2, [r3, #0]
	return -1;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_exit>:

void _exit (int status)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ffe7 	bl	8001d40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d72:	e7fe      	b.n	8001d72 <_exit+0x12>

08001d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e00a      	b.n	8001d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d86:	f3af 8000 	nop.w
 8001d8a:	4601      	mov	r1, r0
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	b2ca      	uxtb	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbf0      	blt.n	8001d86 <_read+0x12>
	}

return len;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e009      	b.n	8001dd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbf1      	blt.n	8001dc0 <_write+0x12>
	}
	return len;
 8001ddc:	687b      	ldr	r3, [r7, #4]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_close>:

int _close(int file)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	return -1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_isatty>:

int _isatty(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	return 1;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <_sbrk+0x5c>)
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <_sbrk+0x60>)
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <_sbrk+0x64>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <_sbrk+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d207      	bcs.n	8001e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e80:	f00a f9f2 	bl	800c268 <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	220c      	movs	r2, #12
 8001e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e009      	b.n	8001ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <_sbrk+0x64>)
 8001ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000c000 	.word	0x2000c000
 8001eb0:	00000400 	.word	0x00000400
 8001eb4:	20001778 	.word	0x20001778
 8001eb8:	20001830 	.word	0x20001830

08001ebc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <SystemInit+0x5c>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <SystemInit+0x5c>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <SystemInit+0x60>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <SystemInit+0x60>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <SystemInit+0x60>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <SystemInit+0x60>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <SystemInit+0x60>)
 8001ee8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001eec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <SystemInit+0x60>)
 8001ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <SystemInit+0x60>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <SystemInit+0x60>)
 8001f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SystemInit+0x60>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00
 8001f1c:	40021000 	.word	0x40021000

08001f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f24:	f7ff ffca 	bl	8001ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f2a:	e003      	b.n	8001f34 <LoopCopyDataInit>

08001f2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f32:	3104      	adds	r1, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f34:	480a      	ldr	r0, [pc, #40]	; (8001f60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f3c:	d3f6      	bcc.n	8001f2c <CopyDataInit>
	ldr	r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f40:	e002      	b.n	8001f48 <LoopFillZerobss>

08001f42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f44:	f842 3b04 	str.w	r3, [r2], #4

08001f48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <LoopForever+0x16>)
	cmp	r2, r3
 8001f4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f4c:	d3f9      	bcc.n	8001f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f00a f9a3 	bl	800c298 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f52:	f7ff f983 	bl	800125c <main>

08001f56 <LoopForever>:

LoopForever:
    b LoopForever
 8001f56:	e7fe      	b.n	8001f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f58:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8001f5c:	08013038 	.word	0x08013038
	ldr	r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f64:	20000d98 	.word	0x20000d98
	ldr	r2, =_sbss
 8001f68:	20000da0 	.word	0x20000da0
	ldr	r3, = _ebss
 8001f6c:	2000182c 	.word	0x2000182c

08001f70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_IRQHandler>

08001f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f000 f943 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f80e 	bl	8001fa4 <HAL_InitTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
 8001f92:	e001      	b.n	8001f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f94:	f7ff fdf4 	bl	8001b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f98:	79fb      	ldrb	r3, [r7, #7]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_InitTick+0x6c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d023      	beq.n	8002000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_InitTick+0x70>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_InitTick+0x6c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f941 	bl	8002256 <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d809      	bhi.n	8001ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 f919 	bl	800221e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_InitTick+0x74>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e004      	b.n	8002004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	e001      	b.n	8002004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000bbc 	.word	0x20000bbc
 8002014:	20000bb4 	.word	0x20000bb4
 8002018:	20000bb8 	.word	0x20000bb8

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000bbc 	.word	0x20000bbc
 8002040:	20001818 	.word	0x20001818

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20001818 	.word	0x20001818

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000bbc 	.word	0x20000bbc

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff47 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff5c 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffb0 	bl	80021c4 <SysTick_Config>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227e:	e148      	b.n	8002512 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 813a 	beq.w	800250c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d00b      	beq.n	80022b8 <HAL_GPIO_Init+0x48>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d007      	beq.n	80022b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ac:	2b11      	cmp	r3, #17
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b12      	cmp	r3, #18
 80022b6:	d130      	bne.n	800231a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ee:	2201      	movs	r2, #1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 0201 	and.w	r2, r3, #1
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0xea>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b12      	cmp	r3, #18
 8002358:	d123      	bne.n	80023a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	6939      	ldr	r1, [r7, #16]
 800239e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0203 	and.w	r2, r3, #3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8094 	beq.w	800250c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e4:	4b52      	ldr	r3, [pc, #328]	; (8002530 <HAL_GPIO_Init+0x2c0>)
 80023e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e8:	4a51      	ldr	r2, [pc, #324]	; (8002530 <HAL_GPIO_Init+0x2c0>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6613      	str	r3, [r2, #96]	; 0x60
 80023f0:	4b4f      	ldr	r3, [pc, #316]	; (8002530 <HAL_GPIO_Init+0x2c0>)
 80023f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023fc:	4a4d      	ldr	r2, [pc, #308]	; (8002534 <HAL_GPIO_Init+0x2c4>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002426:	d00d      	beq.n	8002444 <HAL_GPIO_Init+0x1d4>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a43      	ldr	r2, [pc, #268]	; (8002538 <HAL_GPIO_Init+0x2c8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <HAL_GPIO_Init+0x1d0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a42      	ldr	r2, [pc, #264]	; (800253c <HAL_GPIO_Init+0x2cc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_GPIO_Init+0x1cc>
 8002438:	2302      	movs	r3, #2
 800243a:	e004      	b.n	8002446 <HAL_GPIO_Init+0x1d6>
 800243c:	2307      	movs	r3, #7
 800243e:	e002      	b.n	8002446 <HAL_GPIO_Init+0x1d6>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_GPIO_Init+0x1d6>
 8002444:	2300      	movs	r3, #0
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	f002 0203 	and.w	r2, r2, #3
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	4093      	lsls	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002456:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_GPIO_Init+0x2c4>)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002488:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b2:	4a23      	ldr	r2, [pc, #140]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3301      	adds	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	f47f aeaf 	bne.w	8002280 <HAL_GPIO_Init+0x10>
  }
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40021000 	.word	0x40021000
 8002534:	40010000 	.word	0x40010000
 8002538:	48000400 	.word	0x48000400
 800253c:	48000800 	.word	0x48000800
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002560:	e002      	b.n	8002568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <HAL_PWREx_GetVoltageRange+0x18>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40007000 	.word	0x40007000

08002590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259e:	d130      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d038      	beq.n	8002620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2232      	movs	r2, #50	; 0x32
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0c9b      	lsrs	r3, r3, #18
 80025d0:	3301      	adds	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d4:	e002      	b.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3b01      	subs	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e8:	d102      	bne.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f2      	bne.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fc:	d110      	bne.n	8002620 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e00f      	b.n	8002622 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260e:	d007      	beq.n	8002620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002618:	4a05      	ldr	r2, [pc, #20]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40007000 	.word	0x40007000
 8002634:	20000bb4 	.word	0x20000bb4
 8002638:	431bde83 	.word	0x431bde83

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f000 bc11 	b.w	8002e72 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002650:	4ba0      	ldr	r3, [pc, #640]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265a:	4b9e      	ldr	r3, [pc, #632]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80e4 	beq.w	800283a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_RCC_OscConfig+0x4c>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	f040 808b 	bne.w	8002796 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b01      	cmp	r3, #1
 8002684:	f040 8087 	bne.w	8002796 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_OscConfig+0x64>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e3e8      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	4b8b      	ldr	r3, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <HAL_RCC_OscConfig+0x7e>
 80026b0:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b8:	e005      	b.n	80026c6 <HAL_RCC_OscConfig+0x8a>
 80026ba:	4b86      	ldr	r3, [pc, #536]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d223      	bcs.n	8002712 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fd7a 	bl	80031c8 <RCC_SetFlashLatencyFromMSIRange>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e3c9      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026de:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7c      	ldr	r2, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4977      	ldr	r1, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	4972      	ldr	r1, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
 8002710:	e025      	b.n	800275e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002712:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6f      	ldr	r2, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	496a      	ldr	r1, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	4965      	ldr	r1, [pc, #404]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fd3a 	bl	80031c8 <RCC_SetFlashLatencyFromMSIRange>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e389      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800275e:	f000 fc6f 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b5b      	ldr	r3, [pc, #364]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	495a      	ldr	r1, [pc, #360]	; (80028d8 <HAL_RCC_OscConfig+0x29c>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_OscConfig+0x2a0>)
 800277c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800277e:	4b58      	ldr	r3, [pc, #352]	; (80028e0 <HAL_RCC_OscConfig+0x2a4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fc0e 	bl	8001fa4 <HAL_InitTick>
 8002788:	4603      	mov	r3, r0
 800278a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d052      	beq.n	8002838 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	e36d      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d032      	beq.n	8002804 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800279e:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a4c      	ldr	r2, [pc, #304]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027aa:	f7ff fc4b 	bl	8002044 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b2:	f7ff fc47 	bl	8002044 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e356      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d0:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3f      	ldr	r2, [pc, #252]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	493a      	ldr	r1, [pc, #232]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ee:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	4935      	ldr	r1, [pc, #212]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
 8002802:	e01a      	b.n	800283a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002804:	4b33      	ldr	r3, [pc, #204]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a32      	ldr	r2, [pc, #200]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002810:	f7ff fc18 	bl	8002044 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002818:	f7ff fc14 	bl	8002044 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e323      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800282a:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x1dc>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d073      	beq.n	800292e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x21c>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d10e      	bne.n	8002870 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d063      	beq.n	800292c <HAL_RCC_OscConfig+0x2f0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d15f      	bne.n	800292c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e300      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x24c>
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0x288>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x270>
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0x288>
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01b      	beq.n	8002904 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff fbba 	bl	8002044 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	e010      	b.n	80028f6 <HAL_RCC_OscConfig+0x2ba>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08012900 	.word	0x08012900
 80028dc:	20000bb4 	.word	0x20000bb4
 80028e0:	20000bb8 	.word	0x20000bb8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff fbae 	bl	8002044 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e2bd      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f6:	4baf      	ldr	r3, [pc, #700]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2a8>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7ff fb9e 	bl	8002044 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7ff fb9a 	bl	8002044 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e2a9      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800291e:	4ba5      	ldr	r3, [pc, #660]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x2d0>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d060      	beq.n	80029fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d005      	beq.n	800294c <HAL_RCC_OscConfig+0x310>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d119      	bne.n	800297a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d116      	bne.n	800297a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_OscConfig+0x328>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e286      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b93      	ldr	r3, [pc, #588]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	4990      	ldr	r1, [pc, #576]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002978:	e040      	b.n	80029fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d023      	beq.n	80029ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002982:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a8b      	ldr	r2, [pc, #556]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7ff fb59 	bl	8002044 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002996:	f7ff fb55 	bl	8002044 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e264      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a8:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	497c      	ldr	r1, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e018      	b.n	80029fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ca:	4b7a      	ldr	r3, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a79      	ldr	r2, [pc, #484]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7ff fb35 	bl	8002044 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7ff fb31 	bl	8002044 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e240      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f0:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d03c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a10:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a16:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7ff fb10 	bl	8002044 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a28:	f7ff fb0c 	bl	8002044 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e21b      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a3a:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCC_OscConfig+0x3ec>
 8002a48:	e01b      	b.n	8002a82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4a:	4b5a      	ldr	r3, [pc, #360]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7ff faf3 	bl	8002044 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a62:	f7ff faef 	bl	8002044 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1fe      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ef      	bne.n	8002a62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a6 	beq.w	8002bdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a43      	ldr	r2, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002aac:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <HAL_RCC_OscConfig+0x57c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d118      	bne.n	8002afa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCC_OscConfig+0x57c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a3a      	ldr	r2, [pc, #232]	; (8002bb8 <HAL_RCC_OscConfig+0x57c>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad4:	f7ff fab6 	bl	8002044 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002adc:	f7ff fab2 	bl	8002044 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1c1      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_RCC_OscConfig+0x57c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d108      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b12:	e024      	b.n	8002b5e <HAL_RCC_OscConfig+0x522>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d110      	bne.n	8002b3e <HAL_RCC_OscConfig+0x502>
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b3c:	e00f      	b.n	8002b5e <HAL_RCC_OscConfig+0x522>
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b56:	f023 0304 	bic.w	r3, r3, #4
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7ff fa6d 	bl	8002044 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7ff fa69 	bl	8002044 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e176      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ed      	beq.n	8002b6e <HAL_RCC_OscConfig+0x532>
 8002b92:	e01a      	b.n	8002bca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7ff fa56 	bl	8002044 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b9a:	e00f      	b.n	8002bbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fa52 	bl	8002044 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d906      	bls.n	8002bbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e15f      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bbc:	4baa      	ldr	r3, [pc, #680]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e8      	bne.n	8002b9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4ba5      	ldr	r3, [pc, #660]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	4aa4      	ldr	r2, [pc, #656]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d03c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bf0:	4b9d      	ldr	r3, [pc, #628]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf6:	4a9c      	ldr	r2, [pc, #624]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7ff fa20 	bl	8002044 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c08:	f7ff fa1c 	bl	8002044 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e12b      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c1a:	4b93      	ldr	r3, [pc, #588]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ef      	beq.n	8002c08 <HAL_RCC_OscConfig+0x5cc>
 8002c28:	e01b      	b.n	8002c62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c2a:	4b8f      	ldr	r3, [pc, #572]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c30:	4a8d      	ldr	r2, [pc, #564]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7ff fa03 	bl	8002044 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c42:	f7ff f9ff 	bl	8002044 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e10e      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c54:	4b84      	ldr	r3, [pc, #528]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ef      	bne.n	8002c42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8102 	beq.w	8002e70 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	f040 80c5 	bne.w	8002e00 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c76:	4b7c      	ldr	r3, [pc, #496]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0203 	and.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d12c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	3b01      	subs	r3, #1
 8002c96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d123      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d11b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d113      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d109      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d067      	beq.n	8002db4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d062      	beq.n	8002db0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cea:	4b5f      	ldr	r3, [pc, #380]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0bb      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5a      	ldr	r2, [pc, #360]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d06:	f7ff f99d 	bl	8002044 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7ff f999 	bl	8002044 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0a8      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d20:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f0      	bne.n	8002d0e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	4b4e      	ldr	r3, [pc, #312]	; (8002e6c <HAL_RCC_OscConfig+0x830>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d46:	0212      	lsls	r2, r2, #8
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d4e:	0852      	lsrs	r2, r2, #1
 8002d50:	3a01      	subs	r2, #1
 8002d52:	0552      	lsls	r2, r2, #21
 8002d54:	4311      	orrs	r1, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d5a:	0852      	lsrs	r2, r2, #1
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0652      	lsls	r2, r2, #25
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d66:	06d2      	lsls	r2, r2, #27
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	493f      	ldr	r1, [pc, #252]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d70:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a39      	ldr	r2, [pc, #228]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d88:	f7ff f95c 	bl	8002044 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7ff f958 	bl	8002044 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e067      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dae:	e05f      	b.n	8002e70 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e05e      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db4:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d157      	bne.n	8002e70 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a28      	ldr	r2, [pc, #160]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd8:	f7ff f934 	bl	8002044 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7ff f930 	bl	8002044 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e03f      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x7a4>
 8002dfe:	e037      	b.n	8002e70 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d02d      	beq.n	8002e62 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e10:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002e24:	f023 0303 	bic.w	r3, r3, #3
 8002e28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002e30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7ff f903 	bl	8002044 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7ff f8ff 	bl	8002044 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e00e      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <HAL_RCC_OscConfig+0x82c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_OscConfig+0x806>
 8002e60:	e006      	b.n	8002e70 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e005      	b.n	8002e72 <HAL_RCC_OscConfig+0x836>
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop

08002e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0c8      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d910      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 0207 	bic.w	r2, r3, #7
 8002ea6:	4961      	ldr	r1, [pc, #388]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b0      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d04c      	beq.n	8002f66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed4:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d121      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e09e      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d115      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e092      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f04:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e086      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e07e      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 0203 	bic.w	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	493f      	ldr	r1, [pc, #252]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f36:	f7ff f885 	bl	8002044 <HAL_GetTick>
 8002f3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3e:	f7ff f881 	bl	8002044 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e066      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 020c 	and.w	r2, r3, #12
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d1eb      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f72:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	492c      	ldr	r1, [pc, #176]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d210      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4924      	ldr	r1, [pc, #144]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e036      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4918      	ldr	r1, [pc, #96]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4910      	ldr	r1, [pc, #64]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff2:	f000 f825 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490c      	ldr	r1, [pc, #48]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe ffc4 	bl	8001fa4 <HAL_InitTick>
 800301c:	4603      	mov	r3, r0
 800301e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003020:	7afb      	ldrb	r3, [r7, #11]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	08012900 	.word	0x08012900
 8003038:	20000bb4 	.word	0x20000bb4
 800303c:	20000bb8 	.word	0x20000bb8

08003040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304e:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003058:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x34>
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d121      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d11e      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003074:	4b34      	ldr	r3, [pc, #208]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003080:	4b31      	ldr	r3, [pc, #196]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e005      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003090:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800309c:	4a2b      	ldr	r2, [pc, #172]	; (800314c <HAL_RCC_GetSysClockFreq+0x10c>)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d102      	bne.n	80030be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e004      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_RCC_GetSysClockFreq+0x114>)
 80030c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d134      	bne.n	8003138 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d003      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0xac>
 80030e4:	e005      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_RCC_GetSysClockFreq+0x110>)
 80030e8:	617b      	str	r3, [r7, #20]
      break;
 80030ea:	e005      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_RCC_GetSysClockFreq+0x114>)
 80030ee:	617b      	str	r3, [r7, #20]
      break;
 80030f0:	e002      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	617b      	str	r3, [r7, #20]
      break;
 80030f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	3301      	adds	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	fb02 f203 	mul.w	r2, r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	0e5b      	lsrs	r3, r3, #25
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	3301      	adds	r3, #1
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003138:	69bb      	ldr	r3, [r7, #24]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	; 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	08012918 	.word	0x08012918
 8003150:	00f42400 	.word	0x00f42400
 8003154:	007a1200 	.word	0x007a1200

08003158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCC_GetHCLKFreq+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000bb4 	.word	0x20000bb4

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003174:	f7ff fff0 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4904      	ldr	r1, [pc, #16]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	08012910 	.word	0x08012910

0800319c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031a0:	f7ff ffda 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0adb      	lsrs	r3, r3, #11
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4904      	ldr	r1, [pc, #16]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08012910 	.word	0x08012910

080031c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031e0:	f7ff f9c8 	bl	8002574 <HAL_PWREx_GetVoltageRange>
 80031e4:	6178      	str	r0, [r7, #20]
 80031e6:	e014      	b.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	4a24      	ldr	r2, [pc, #144]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	; 0x58
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003200:	f7ff f9b8 	bl	8002574 <HAL_PWREx_GetVoltageRange>
 8003204:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003210:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003218:	d10b      	bne.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d919      	bls.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2ba0      	cmp	r3, #160	; 0xa0
 8003224:	d902      	bls.n	800322c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003226:	2302      	movs	r3, #2
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	e013      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800322c:	2301      	movs	r3, #1
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	e010      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b80      	cmp	r3, #128	; 0x80
 8003236:	d902      	bls.n	800323e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003238:	2303      	movs	r3, #3
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e00a      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b80      	cmp	r3, #128	; 0x80
 8003242:	d102      	bne.n	800324a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003244:	2302      	movs	r3, #2
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	e004      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b70      	cmp	r3, #112	; 0x70
 800324e:	d101      	bne.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003250:	2301      	movs	r3, #1
 8003252:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 0207 	bic.w	r2, r3, #7
 800325c:	4909      	ldr	r1, [pc, #36]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	429a      	cmp	r2, r3
 8003270:	d001      	beq.n	8003276 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	40022000 	.word	0x40022000

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003290:	2300      	movs	r3, #0
 8003292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003294:	2300      	movs	r3, #0
 8003296:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d031      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ac:	d01a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032b2:	d814      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032bc:	d10f      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032be:	4bac      	ldr	r3, [pc, #688]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4aab      	ldr	r2, [pc, #684]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ca:	e00c      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f9cc 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032dc:	e003      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	74fb      	strb	r3, [r7, #19]
      break;
 80032e2:	e000      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80032e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ec:	4ba0      	ldr	r3, [pc, #640]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	499d      	ldr	r1, [pc, #628]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003302:	e001      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8099 	beq.w	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800331a:	4b95      	ldr	r3, [pc, #596]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800332a:	2300      	movs	r3, #0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b8f      	ldr	r3, [pc, #572]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	4a8e      	ldr	r2, [pc, #568]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	6593      	str	r3, [r2, #88]	; 0x58
 800333c:	4b8c      	ldr	r3, [pc, #560]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003348:	2301      	movs	r3, #1
 800334a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334c:	4b89      	ldr	r3, [pc, #548]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a88      	ldr	r2, [pc, #544]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003356:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003358:	f7fe fe74 	bl	8002044 <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800335e:	e009      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003360:	f7fe fe70 	bl	8002044 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d902      	bls.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	74fb      	strb	r3, [r7, #19]
        break;
 8003372:	e005      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003374:	4b7f      	ldr	r3, [pc, #508]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ef      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d155      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003386:	4b7a      	ldr	r3, [pc, #488]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003390:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01e      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d019      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a2:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ae:	4b70      	ldr	r3, [pc, #448]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033be:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	4a6a      	ldr	r2, [pc, #424]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ce:	4a68      	ldr	r2, [pc, #416]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d016      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fe30 	bl	8002044 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	e00b      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe fe2c 	bl	8002044 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d902      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	74fb      	strb	r3, [r7, #19]
            break;
 80033fe:	e006      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003400:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ec      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003414:	4b56      	ldr	r3, [pc, #344]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003422:	4953      	ldr	r1, [pc, #332]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800342a:	e004      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
 8003430:	e001      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003436:	7c7b      	ldrb	r3, [r7, #17]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	4a4b      	ldr	r2, [pc, #300]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003454:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4943      	ldr	r1, [pc, #268]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f023 020c 	bic.w	r2, r3, #12
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	493a      	ldr	r1, [pc, #232]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	4932      	ldr	r1, [pc, #200]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	4929      	ldr	r1, [pc, #164]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4921      	ldr	r1, [pc, #132]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4918      	ldr	r1, [pc, #96]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	4910      	ldr	r1, [pc, #64]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02c      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4907      	ldr	r1, [pc, #28]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003560:	d10a      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003562:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4a02      	ldr	r2, [pc, #8]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800356c:	60d3      	str	r3, [r2, #12]
 800356e:	e015      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003580:	d10c      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f871 	bl	8003670 <RCCEx_PLLSAI1_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d028      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	492d      	ldr	r1, [pc, #180]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c6:	d106      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035d2:	60d3      	str	r3, [r2, #12]
 80035d4:	e011      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035de:	d10c      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f842 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01c      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003606:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	4915      	ldr	r1, [pc, #84]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003624:	d10c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2102      	movs	r1, #2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f81f 	bl	8003670 <RCCEx_PLLSAI1_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	4904      	ldr	r1, [pc, #16]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003662:	7cbb      	ldrb	r3, [r7, #18]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000

08003670 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800367e:	4b74      	ldr	r3, [pc, #464]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d018      	beq.n	80036bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800368a:	4b71      	ldr	r3, [pc, #452]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0203 	and.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d10d      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
       ||
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036a2:	4b6b      	ldr	r3, [pc, #428]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
       ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d047      	beq.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e044      	b.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d018      	beq.n	80036f6 <RCCEx_PLLSAI1_Config+0x86>
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d825      	bhi.n	8003714 <RCCEx_PLLSAI1_Config+0xa4>
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d002      	beq.n	80036d2 <RCCEx_PLLSAI1_Config+0x62>
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d009      	beq.n	80036e4 <RCCEx_PLLSAI1_Config+0x74>
 80036d0:	e020      	b.n	8003714 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d2:	4b5f      	ldr	r3, [pc, #380]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11d      	bne.n	800371a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e2:	e01a      	b.n	800371a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e4:	4b5a      	ldr	r3, [pc, #360]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f4:	e013      	b.n	800371e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036f6:	4b56      	ldr	r3, [pc, #344]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003702:	4b53      	ldr	r3, [pc, #332]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003712:	e006      	b.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e004      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003722:	bf00      	nop
    }

    if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372a:	4b49      	ldr	r3, [pc, #292]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	430b      	orrs	r3, r1
 8003740:	4943      	ldr	r1, [pc, #268]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d17c      	bne.n	8003846 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800374c:	4b40      	ldr	r3, [pc, #256]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fe fc74 	bl	8002044 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003760:	f7fe fc70 	bl	8002044 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
        break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003774:	4b36      	ldr	r3, [pc, #216]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ef      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d15f      	bne.n	8003846 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d110      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378c:	4b30      	ldr	r3, [pc, #192]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003794:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6892      	ldr	r2, [r2, #8]
 800379c:	0211      	lsls	r1, r2, #8
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68d2      	ldr	r2, [r2, #12]
 80037a2:	06d2      	lsls	r2, r2, #27
 80037a4:	430a      	orrs	r2, r1
 80037a6:	492a      	ldr	r1, [pc, #168]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	610b      	str	r3, [r1, #16]
 80037ac:	e027      	b.n	80037fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d112      	bne.n	80037da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b4:	4b26      	ldr	r3, [pc, #152]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	0211      	lsls	r1, r2, #8
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6912      	ldr	r2, [r2, #16]
 80037ca:	0852      	lsrs	r2, r2, #1
 80037cc:	3a01      	subs	r2, #1
 80037ce:	0552      	lsls	r2, r2, #21
 80037d0:	430a      	orrs	r2, r1
 80037d2:	491f      	ldr	r1, [pc, #124]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	610b      	str	r3, [r1, #16]
 80037d8:	e011      	b.n	80037fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6892      	ldr	r2, [r2, #8]
 80037ea:	0211      	lsls	r1, r2, #8
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6952      	ldr	r2, [r2, #20]
 80037f0:	0852      	lsrs	r2, r2, #1
 80037f2:	3a01      	subs	r2, #1
 80037f4:	0652      	lsls	r2, r2, #25
 80037f6:	430a      	orrs	r2, r1
 80037f8:	4915      	ldr	r1, [pc, #84]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037fe:	4b14      	ldr	r3, [pc, #80]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003808:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380a:	f7fe fc1b 	bl	8002044 <HAL_GetTick>
 800380e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003810:	e009      	b.n	8003826 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003812:	f7fe fc17 	bl	8002044 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d902      	bls.n	8003826 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	73fb      	strb	r3, [r7, #15]
          break;
 8003824:	e005      	b.n	8003832 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ef      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003842:	4313      	orrs	r3, r2
 8003844:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000

08003854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e049      	b.n	80038fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe f9a4 	bl	8001bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 f882 	bl	800399c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e033      	b.n	8003984 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a19      	ldr	r2, [pc, #100]	; (8003990 <HAL_TIM_Base_Start+0x8c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_TIM_Base_Start+0x3e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d004      	beq.n	8003942 <HAL_TIM_Base_Start+0x3e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <HAL_TIM_Base_Start+0x90>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d115      	bne.n	800396e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_TIM_Base_Start+0x94>)
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b06      	cmp	r3, #6
 8003952:	d015      	beq.n	8003980 <HAL_TIM_Base_Start+0x7c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395a:	d011      	beq.n	8003980 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396c:	e008      	b.n	8003980 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e000      	b.n	8003982 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40014000 	.word	0x40014000
 8003998:	00010007 	.word	0x00010007

0800399c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <TIM_Base_SetConfig+0xbc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0x20>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ba:	d108      	bne.n	80039ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <TIM_Base_SetConfig+0xbc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0x52>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0x52>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <TIM_Base_SetConfig+0xc0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0x52>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <TIM_Base_SetConfig+0xc4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <TIM_Base_SetConfig+0xbc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d007      	beq.n	8003a3c <TIM_Base_SetConfig+0xa0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <TIM_Base_SetConfig+0xc0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_Base_SetConfig+0xa0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <TIM_Base_SetConfig+0xc4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d103      	bne.n	8003a44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	615a      	str	r2, [r3, #20]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400

08003a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e040      	b.n	8003af8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fe f8be 	bl	8001c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8c0 	bl	8003c28 <UART_SetConfig>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e022      	b.n	8003af8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fac0 	bl	8004040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fb47 	bl	8004184 <UART_CheckIdleState>
 8003af6:	4603      	mov	r3, r0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	f040 8082 	bne.w	8003c1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_UART_Transmit+0x26>
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07a      	b.n	8003c20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Transmit+0x38>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e073      	b.n	8003c20 <HAL_UART_Transmit+0x120>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2221      	movs	r2, #33	; 0x21
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4e:	f7fe fa79 	bl	8002044 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	d108      	bne.n	8003b80 <HAL_UART_Transmit+0x80>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e003      	b.n	8003b88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b90:	e02d      	b.n	8003bee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fb3a 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e039      	b.n	8003c20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbe:	b292      	uxth	r2, r2
 8003bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	e008      	b.n	8003bdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1cb      	bne.n	8003b92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fb06 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e005      	b.n	8003c20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c28:	b5b0      	push	{r4, r5, r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4baf      	ldr	r3, [pc, #700]	; (8003f10 <UART_SetConfig+0x2e8>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	69f9      	ldr	r1, [r7, #28]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4aa4      	ldr	r2, [pc, #656]	; (8003f14 <UART_SetConfig+0x2ec>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a9b      	ldr	r2, [pc, #620]	; (8003f18 <UART_SetConfig+0x2f0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d121      	bne.n	8003cf2 <UART_SetConfig+0xca>
 8003cae:	4b9b      	ldr	r3, [pc, #620]	; (8003f1c <UART_SetConfig+0x2f4>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d817      	bhi.n	8003cec <UART_SetConfig+0xc4>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0x9c>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003ce1 	.word	0x08003ce1
 8003ccc:	08003cdb 	.word	0x08003cdb
 8003cd0:	08003ce7 	.word	0x08003ce7
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	76fb      	strb	r3, [r7, #27]
 8003cd8:	e070      	b.n	8003dbc <UART_SetConfig+0x194>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	76fb      	strb	r3, [r7, #27]
 8003cde:	e06d      	b.n	8003dbc <UART_SetConfig+0x194>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	76fb      	strb	r3, [r7, #27]
 8003ce4:	e06a      	b.n	8003dbc <UART_SetConfig+0x194>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	76fb      	strb	r3, [r7, #27]
 8003cea:	e067      	b.n	8003dbc <UART_SetConfig+0x194>
 8003cec:	2310      	movs	r3, #16
 8003cee:	76fb      	strb	r3, [r7, #27]
 8003cf0:	e064      	b.n	8003dbc <UART_SetConfig+0x194>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a8a      	ldr	r2, [pc, #552]	; (8003f20 <UART_SetConfig+0x2f8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d132      	bne.n	8003d62 <UART_SetConfig+0x13a>
 8003cfc:	4b87      	ldr	r3, [pc, #540]	; (8003f1c <UART_SetConfig+0x2f4>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d828      	bhi.n	8003d5c <UART_SetConfig+0x134>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <UART_SetConfig+0xe8>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d45 	.word	0x08003d45
 8003d14:	08003d5d 	.word	0x08003d5d
 8003d18:	08003d5d 	.word	0x08003d5d
 8003d1c:	08003d5d 	.word	0x08003d5d
 8003d20:	08003d51 	.word	0x08003d51
 8003d24:	08003d5d 	.word	0x08003d5d
 8003d28:	08003d5d 	.word	0x08003d5d
 8003d2c:	08003d5d 	.word	0x08003d5d
 8003d30:	08003d4b 	.word	0x08003d4b
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	08003d5d 	.word	0x08003d5d
 8003d3c:	08003d5d 	.word	0x08003d5d
 8003d40:	08003d57 	.word	0x08003d57
 8003d44:	2300      	movs	r3, #0
 8003d46:	76fb      	strb	r3, [r7, #27]
 8003d48:	e038      	b.n	8003dbc <UART_SetConfig+0x194>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	76fb      	strb	r3, [r7, #27]
 8003d4e:	e035      	b.n	8003dbc <UART_SetConfig+0x194>
 8003d50:	2304      	movs	r3, #4
 8003d52:	76fb      	strb	r3, [r7, #27]
 8003d54:	e032      	b.n	8003dbc <UART_SetConfig+0x194>
 8003d56:	2308      	movs	r3, #8
 8003d58:	76fb      	strb	r3, [r7, #27]
 8003d5a:	e02f      	b.n	8003dbc <UART_SetConfig+0x194>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	76fb      	strb	r3, [r7, #27]
 8003d60:	e02c      	b.n	8003dbc <UART_SetConfig+0x194>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6b      	ldr	r2, [pc, #428]	; (8003f14 <UART_SetConfig+0x2ec>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d125      	bne.n	8003db8 <UART_SetConfig+0x190>
 8003d6c:	4b6b      	ldr	r3, [pc, #428]	; (8003f1c <UART_SetConfig+0x2f4>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d7a:	d017      	beq.n	8003dac <UART_SetConfig+0x184>
 8003d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d80:	d817      	bhi.n	8003db2 <UART_SetConfig+0x18a>
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	d00b      	beq.n	8003da0 <UART_SetConfig+0x178>
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8c:	d811      	bhi.n	8003db2 <UART_SetConfig+0x18a>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <UART_SetConfig+0x172>
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d006      	beq.n	8003da6 <UART_SetConfig+0x17e>
 8003d98:	e00b      	b.n	8003db2 <UART_SetConfig+0x18a>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	76fb      	strb	r3, [r7, #27]
 8003d9e:	e00d      	b.n	8003dbc <UART_SetConfig+0x194>
 8003da0:	2302      	movs	r3, #2
 8003da2:	76fb      	strb	r3, [r7, #27]
 8003da4:	e00a      	b.n	8003dbc <UART_SetConfig+0x194>
 8003da6:	2304      	movs	r3, #4
 8003da8:	76fb      	strb	r3, [r7, #27]
 8003daa:	e007      	b.n	8003dbc <UART_SetConfig+0x194>
 8003dac:	2308      	movs	r3, #8
 8003dae:	76fb      	strb	r3, [r7, #27]
 8003db0:	e004      	b.n	8003dbc <UART_SetConfig+0x194>
 8003db2:	2310      	movs	r3, #16
 8003db4:	76fb      	strb	r3, [r7, #27]
 8003db6:	e001      	b.n	8003dbc <UART_SetConfig+0x194>
 8003db8:	2310      	movs	r3, #16
 8003dba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a54      	ldr	r2, [pc, #336]	; (8003f14 <UART_SetConfig+0x2ec>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d173      	bne.n	8003eae <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dc6:	7efb      	ldrb	r3, [r7, #27]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d824      	bhi.n	8003e16 <UART_SetConfig+0x1ee>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <UART_SetConfig+0x1ac>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e17 	.word	0x08003e17
 8003ddc:	08003e01 	.word	0x08003e01
 8003de0:	08003e17 	.word	0x08003e17
 8003de4:	08003e07 	.word	0x08003e07
 8003de8:	08003e17 	.word	0x08003e17
 8003dec:	08003e17 	.word	0x08003e17
 8003df0:	08003e17 	.word	0x08003e17
 8003df4:	08003e0f 	.word	0x08003e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df8:	f7ff f9ba 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	6178      	str	r0, [r7, #20]
        break;
 8003dfe:	e00f      	b.n	8003e20 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b48      	ldr	r3, [pc, #288]	; (8003f24 <UART_SetConfig+0x2fc>)
 8003e02:	617b      	str	r3, [r7, #20]
        break;
 8003e04:	e00c      	b.n	8003e20 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7ff f91b 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8003e0a:	6178      	str	r0, [r7, #20]
        break;
 8003e0c:	e008      	b.n	8003e20 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e12:	617b      	str	r3, [r7, #20]
        break;
 8003e14:	e004      	b.n	8003e20 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	76bb      	strb	r3, [r7, #26]
        break;
 8003e1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80fe 	beq.w	8004024 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d305      	bcc.n	8003e44 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d902      	bls.n	8003e4a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	76bb      	strb	r3, [r7, #26]
 8003e48:	e0ec      	b.n	8004024 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	020b      	lsls	r3, r1, #8
 8003e5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e60:	0202      	lsls	r2, r0, #8
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	6849      	ldr	r1, [r1, #4]
 8003e66:	0849      	lsrs	r1, r1, #1
 8003e68:	4608      	mov	r0, r1
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	1814      	adds	r4, r2, r0
 8003e70:	eb43 0501 	adc.w	r5, r3, r1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7fc fef1 	bl	8000c68 <__aeabi_uldivmod>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e94:	d308      	bcc.n	8003ea8 <UART_SetConfig+0x280>
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9c:	d204      	bcs.n	8003ea8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	e0bd      	b.n	8004024 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	76bb      	strb	r3, [r7, #26]
 8003eac:	e0ba      	b.n	8004024 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb6:	d168      	bne.n	8003f8a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003eb8:	7efb      	ldrb	r3, [r7, #27]
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d834      	bhi.n	8003f28 <UART_SetConfig+0x300>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0x29c>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003eff 	.word	0x08003eff
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	08003f29 	.word	0x08003f29
 8003ee0:	08003f29 	.word	0x08003f29
 8003ee4:	08003f07 	.word	0x08003f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f7ff f942 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8003eec:	6178      	str	r0, [r7, #20]
        break;
 8003eee:	e020      	b.n	8003f32 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef0:	f7ff f954 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 8003ef4:	6178      	str	r0, [r7, #20]
        break;
 8003ef6:	e01c      	b.n	8003f32 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <UART_SetConfig+0x2fc>)
 8003efa:	617b      	str	r3, [r7, #20]
        break;
 8003efc:	e019      	b.n	8003f32 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7ff f89f 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8003f02:	6178      	str	r0, [r7, #20]
        break;
 8003f04:	e015      	b.n	8003f32 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	617b      	str	r3, [r7, #20]
        break;
 8003f0c:	e011      	b.n	8003f32 <UART_SetConfig+0x30a>
 8003f0e:	bf00      	nop
 8003f10:	efff69f3 	.word	0xefff69f3
 8003f14:	40008000 	.word	0x40008000
 8003f18:	40013800 	.word	0x40013800
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40004400 	.word	0x40004400
 8003f24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	76bb      	strb	r3, [r7, #26]
        break;
 8003f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d075      	beq.n	8004024 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	005a      	lsls	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	441a      	add	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0f      	cmp	r3, #15
 8003f54:	d916      	bls.n	8003f84 <UART_SetConfig+0x35c>
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5c:	d212      	bcs.n	8003f84 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f023 030f 	bic.w	r3, r3, #15
 8003f66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	89fb      	ldrh	r3, [r7, #14]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	89fa      	ldrh	r2, [r7, #14]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	e04f      	b.n	8004024 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	76bb      	strb	r3, [r7, #26]
 8003f88:	e04c      	b.n	8004024 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f8a:	7efb      	ldrb	r3, [r7, #27]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d828      	bhi.n	8003fe2 <UART_SetConfig+0x3ba>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x370>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7ff f8d8 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	6178      	str	r0, [r7, #20]
        break;
 8003fc2:	e013      	b.n	8003fec <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7ff f8ea 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 8003fc8:	6178      	str	r0, [r7, #20]
        break;
 8003fca:	e00f      	b.n	8003fec <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <UART_SetConfig+0x414>)
 8003fce:	617b      	str	r3, [r7, #20]
        break;
 8003fd0:	e00c      	b.n	8003fec <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7ff f835 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8003fd6:	6178      	str	r0, [r7, #20]
        break;
 8003fd8:	e008      	b.n	8003fec <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fde:	617b      	str	r3, [r7, #20]
        break;
 8003fe0:	e004      	b.n	8003fec <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	76bb      	strb	r3, [r7, #26]
        break;
 8003fea:	bf00      	nop
    }

    if (pclk != 0U)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	085a      	lsrs	r2, r3, #1
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	d908      	bls.n	8004020 <UART_SetConfig+0x3f8>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d204      	bcs.n	8004020 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	e001      	b.n	8004024 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004030:	7ebb      	ldrb	r3, [r7, #26]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bdb0      	pop	{r4, r5, r7, pc}
 800403a:	bf00      	nop
 800403c:	00f42400 	.word	0x00f42400

08004040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01a      	beq.n	8004156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413e:	d10a      	bne.n	8004156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004194:	f7fd ff56 	bl	8002044 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10e      	bne.n	80041c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f82d 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e023      	b.n	800420e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d10e      	bne.n	80041f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f817 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00d      	b.n	800420e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	e05e      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d05a      	beq.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fd ff08 	bl	8002044 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <UART_WaitOnFlagUntilTimeout+0x30>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d11b      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004254:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e043      	b.n	8004306 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02c      	beq.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429a:	d124      	bne.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042b4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e00f      	b.n	8004306 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4013      	ands	r3, r2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	429a      	cmp	r2, r3
 8004302:	d091      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3301      	adds	r3, #1
 800431a:	009b      	lsls	r3, r3, #2
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d837      	bhi.n	80043a8 <TfLiteTypeGetName+0x80>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <TfLiteTypeGetName+0x18>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004375 	.word	0x08004375
 8004344:	08004379 	.word	0x08004379
 8004348:	08004381 	.word	0x08004381
 800434c:	08004385 	.word	0x08004385
 8004350:	0800438d 	.word	0x0800438d
 8004354:	0800439d 	.word	0x0800439d
 8004358:	08004391 	.word	0x08004391
 800435c:	0800437d 	.word	0x0800437d
 8004360:	08004395 	.word	0x08004395
 8004364:	08004389 	.word	0x08004389
 8004368:	080043a1 	.word	0x080043a1
 800436c:	080043a5 	.word	0x080043a5
 8004370:	08004399 	.word	0x08004399
    case kTfLiteNoType:
      return "NOTYPE";
 8004374:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <TfLiteTypeGetName+0x90>)
 8004376:	e018      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteFloat32:
      return "FLOAT32";
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <TfLiteTypeGetName+0x94>)
 800437a:	e016      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteInt16:
      return "INT16";
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <TfLiteTypeGetName+0x98>)
 800437e:	e014      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteInt32:
      return "INT32";
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <TfLiteTypeGetName+0x9c>)
 8004382:	e012      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteUInt8:
      return "UINT8";
 8004384:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <TfLiteTypeGetName+0xa0>)
 8004386:	e010      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteInt8:
      return "INT8";
 8004388:	4b10      	ldr	r3, [pc, #64]	; (80043cc <TfLiteTypeGetName+0xa4>)
 800438a:	e00e      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteInt64:
      return "INT64";
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <TfLiteTypeGetName+0xa8>)
 800438e:	e00c      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteBool:
      return "BOOL";
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <TfLiteTypeGetName+0xac>)
 8004392:	e00a      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <TfLiteTypeGetName+0xb0>)
 8004396:	e008      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8004398:	4b10      	ldr	r3, [pc, #64]	; (80043dc <TfLiteTypeGetName+0xb4>)
 800439a:	e006      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteString:
      return "STRING";
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <TfLiteTypeGetName+0xb8>)
 800439e:	e004      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteFloat16:
      return "FLOAT16";
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <TfLiteTypeGetName+0xbc>)
 80043a2:	e002      	b.n	80043aa <TfLiteTypeGetName+0x82>
    case kTfLiteFloat64:
      return "FLOAT64";
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <TfLiteTypeGetName+0xc0>)
 80043a6:	e000      	b.n	80043aa <TfLiteTypeGetName+0x82>
  }
  return "Unknown type";
 80043a8:	4b10      	ldr	r3, [pc, #64]	; (80043ec <TfLiteTypeGetName+0xc4>)
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	0800f378 	.word	0x0800f378
 80043bc:	0800f380 	.word	0x0800f380
 80043c0:	0800f388 	.word	0x0800f388
 80043c4:	0800f390 	.word	0x0800f390
 80043c8:	0800f398 	.word	0x0800f398
 80043cc:	0800f3a0 	.word	0x0800f3a0
 80043d0:	0800f3a8 	.word	0x0800f3a8
 80043d4:	0800f3b0 	.word	0x0800f3b0
 80043d8:	0800f3b8 	.word	0x0800f3b8
 80043dc:	0800f3c4 	.word	0x0800f3c4
 80043e0:	0800f3d0 	.word	0x0800f3d0
 80043e4:	0800f3d8 	.word	0x0800f3d8
 80043e8:	0800f3e0 	.word	0x0800f3e0
 80043ec:	0800f3e8 	.word	0x0800f3e8

080043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 80043f0:	b40e      	push	{r1, r2, r3}
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 80043fa:	f107 0320 	add.w	r3, r7, #32
 80043fe:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
 8004410:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800441e:	b003      	add	sp, #12
 8004420:	4770      	bx	lr

08004422 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8004422:	b40c      	push	{r2, r3}
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 800442e:	f107 031c 	add.w	r3, r7, #28
 8004432:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3308      	adds	r3, #8
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	69b9      	ldr	r1, [r7, #24]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
 8004444:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004446:	68fb      	ldr	r3, [r7, #12]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004452:	b002      	add	sp, #8
 8004454:	4770      	bx	lr

08004456 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	2104      	movs	r1, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fa58 	bl	8004932 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004482:	4603      	mov	r3, r0
 8004484:	b2db      	uxtb	r3, r3
  }
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	2106      	movs	r1, #6
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fa48 	bl	8004932 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80044a2:	4603      	mov	r3, r0
 80044a4:	b2db      	uxtb	r3, r3
  }
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2108      	movs	r1, #8
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f9db 	bl	8004878 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
  }
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	210a      	movs	r1, #10
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f9c7 	bl	8004878 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
  }
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	210a      	movs	r1, #10
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f9b3 	bl	8004878 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004512:	4603      	mov	r3, r0
  }
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	210c      	movs	r1, #12
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f9c4 	bl	80048b6 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 800452e:	4603      	mov	r3, r0
  }
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff ffdc 	bl	80044fe <_ZNK6tflite8Operator20builtin_options_typeEv>
 8004546:	4603      	mov	r3, r0
 8004548:	2b08      	cmp	r3, #8
 800454a:	d104      	bne.n	8004556 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ffe5 	bl	800451c <_ZNK6tflite8Operator15builtin_optionsEv>
 8004552:	4603      	mov	r3, r0
 8004554:	e000      	b.n	8004558 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8004556:	2300      	movs	r3, #0
  }
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6839      	ldr	r1, [r7, #0]
 8004598:	4610      	mov	r0, r2
 800459a:	4798      	blx	r3
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 80045d6:	f007 fe1b 	bl	800c210 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 80045e0:	f007 fe16 	bl	800c210 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 80045ea:	f007 fe11 	bl	800c210 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 80045f4:	f007 fe0c 	bl	800c210 <abort>
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	2b05      	cmp	r3, #5
 800460e:	d81b      	bhi.n	8004648 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	08004631 	.word	0x08004631
 800461c:	08004635 	.word	0x08004635
 8004620:	08004639 	.word	0x08004639
 8004624:	0800463d 	.word	0x0800463d
 8004628:	08004641 	.word	0x08004641
 800462c:	08004645 	.word	0x08004645
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8004630:	2300      	movs	r3, #0
 8004632:	e00a      	b.n	800464a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8004634:	2301      	movs	r3, #1
 8004636:	e008      	b.n	800464a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8004638:	2302      	movs	r3, #2
 800463a:	e006      	b.n	800464a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 800463c:	2303      	movs	r3, #3
 800463e:	e004      	b.n	800464a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8004640:	2304      	movs	r3, #4
 8004642:	e002      	b.n	800464a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8004644:	2305      	movs	r3, #5
 8004646:	e000      	b.n	800464a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop

08004658 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2b0b      	cmp	r3, #11
 800466a:	d857      	bhi.n	800471c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xc4>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	080046af 	.word	0x080046af
 8004678:	080046a5 	.word	0x080046a5
 800467c:	080046cd 	.word	0x080046cd
 8004680:	080046d7 	.word	0x080046d7
 8004684:	080046eb 	.word	0x080046eb
 8004688:	080046f5 	.word	0x080046f5
 800468c:	080046ff 	.word	0x080046ff
 8004690:	080046c3 	.word	0x080046c3
 8004694:	08004709 	.word	0x08004709
 8004698:	080046e1 	.word	0x080046e1
 800469c:	080046b9 	.word	0x080046b9
 80046a0:	08004713 	.word	0x08004713
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	220a      	movs	r2, #10
 80046a8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e040      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e03b      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	220b      	movs	r2, #11
 80046bc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046be:	2300      	movs	r3, #0
 80046c0:	e036      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2207      	movs	r2, #7
 80046c6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e031      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2202      	movs	r2, #2
 80046d0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e02c      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2203      	movs	r2, #3
 80046da:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046dc:	2300      	movs	r3, #0
 80046de:	e027      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2209      	movs	r2, #9
 80046e4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e022      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2204      	movs	r2, #4
 80046ee:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e01d      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_STRING:
      *type = kTfLiteString;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2205      	movs	r2, #5
 80046f8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e018      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2206      	movs	r2, #6
 8004702:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004704:	2300      	movs	r3, #0
 8004706:	e013      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2208      	movs	r2, #8
 800470c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800470e:	2300      	movs	r3, #0
 8004710:	e00e      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	220c      	movs	r2, #12
 8004716:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004718:	2300      	movs	r3, #0
 800471a:	e009      	b.n	8004730 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd8>
    default:
      *type = kTfLiteNoType;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	461a      	mov	r2, r3
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe0>)
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fe61 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 800472e:	2301      	movs	r3, #1
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	0800f568 	.word	0x0800f568

0800473c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 800473c:	b5b0      	push	{r4, r5, r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff ff36 	bl	80045c2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004756:	f107 0318 	add.w	r3, r7, #24
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff ff21 	bl	80045a4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004762:	f107 0310 	add.w	r3, r7, #16
 8004766:	f107 0218 	add.w	r2, r7, #24
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f935 	bl	80049dc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004772:	f107 0310 	add.w	r3, r7, #16
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f000 f96f 	bl	8004a5c <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800477e:	4603      	mov	r3, r0
 8004780:	f083 0301 	eor.w	r3, r3, #1
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00c      	beq.n	80047a4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	f240 4352 	movw	r3, #1106	; 0x452
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4b35      	ldr	r3, [pc, #212]	; (800486c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8004796:	4a36      	ldr	r2, [pc, #216]	; (8004870 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68b8      	ldr	r0, [r7, #8]
 800479c:	f7ff fe41 	bl	8004422 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80047a0:	2401      	movs	r4, #1
 80047a2:	e056      	b.n	8004852 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff fec7 	bl	8004538 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 80047aa:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d046      	beq.n	8004840 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80047b2:	69f8      	ldr	r0, [r7, #28]
 80047b4:	f7ff fe5b 	bl	800446e <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461d      	mov	r5, r3
    params->activation =
 80047bc:	f107 0310 	add.w	r3, r7, #16
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f958 	bl	8004a76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80047c6:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80047c8:	4628      	mov	r0, r5
 80047ca:	f7ff ff19 	bl	8004600 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80047ce:	4603      	mov	r3, r0
    params->activation =
 80047d0:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 80047d2:	f107 0310 	add.w	r3, r7, #16
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f94d 	bl	8004a76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80047dc:	4604      	mov	r4, r0
 80047de:	69f8      	ldr	r0, [r7, #28]
 80047e0:	f7ff fe65 	bl	80044ae <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 80047e4:	4603      	mov	r3, r0
 80047e6:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 80047e8:	f107 0310 	add.w	r3, r7, #16
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f942 	bl	8004a76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80047f2:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 80047f4:	69f8      	ldr	r0, [r7, #28]
 80047f6:	f7ff fe6e 	bl	80044d6 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 80047fa:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 80047fc:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 80047fe:	69f8      	ldr	r0, [r7, #28]
 8004800:	f7ff fe45 	bl	800448e <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 800480a:	2b01      	cmp	r3, #1
 800480c:	d009      	beq.n	8004822 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 800480e:	e011      	b.n	8004834 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8004810:	f107 0310 	add.w	r3, r7, #16
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f92e 	bl	8004a76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800481a:	4603      	mov	r3, r0
 800481c:	2200      	movs	r2, #0
 800481e:	705a      	strb	r2, [r3, #1]
        break;
 8004820:	e00e      	b.n	8004840 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8004822:	f107 0310 	add.w	r3, r7, #16
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f925 	bl	8004a76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800482c:	4603      	mov	r3, r0
 800482e:	2201      	movs	r2, #1
 8004830:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8004832:	e005      	b.n	8004840 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8004834:	490f      	ldr	r1, [pc, #60]	; (8004874 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004836:	68b8      	ldr	r0, [r7, #8]
 8004838:	f7ff fdda 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 800483c:	2401      	movs	r4, #1
 800483e:	e008      	b.n	8004852 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004840:	f107 0310 	add.w	r3, r7, #16
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f922 	bl	8004a8e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800484a:	4602      	mov	r2, r0
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004850:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004852:	f107 0310 	add.w	r3, r7, #16
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f8de 	bl	8004a18 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800485c:	4623      	mov	r3, r4
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bdb0      	pop	{r4, r5, r7, pc}
 8004866:	bf00      	nop
 8004868:	0800f4e0 	.word	0x0800f4e0
 800486c:	0800f480 	.word	0x0800f480
 8004870:	0800f4c8 	.word	0x0800f4c8
 8004874:	0800f58c 	.word	0x0800f58c

08004878 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
 8004884:	4613      	mov	r3, r2
 8004886:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004888:	887b      	ldrh	r3, [r7, #2]
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fc fc29 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004892:	4603      	mov	r3, r0
 8004894:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	89fb      	ldrh	r3, [r7, #14]
 80048a0:	4413      	add	r3, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f913 	bl	8004ace <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 80048a8:	4603      	mov	r3, r0
 80048aa:	e000      	b.n	80048ae <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 80048ac:	787b      	ldrb	r3, [r7, #1]
  }
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80048c2:	887b      	ldrh	r3, [r7, #2]
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f90f 	bl	8004aea <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 80048cc:	4603      	mov	r3, r0
  }
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	460b      	mov	r3, r1
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80048e4:	897b      	ldrh	r3, [r7, #10]
 80048e6:	4619      	mov	r1, r3
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7fc fbfb 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80048ee:	4603      	mov	r3, r0
 80048f0:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80048f2:	8afb      	ldrh	r3, [r7, #22]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	8afb      	ldrh	r3, [r7, #22]
 80048fc:	4413      	add	r3, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc ff64 	bl	80017cc <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8004904:	4603      	mov	r3, r0
 8004906:	e000      	b.n	800490a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8004908:	687b      	ldr	r3, [r7, #4]
  }
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800491e:	887b      	ldrh	r3, [r7, #2]
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f901 	bl	8004b2a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8004928:	4603      	mov	r3, r0
  }
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	807b      	strh	r3, [r7, #2]
 800493e:	4613      	mov	r3, r2
 8004940:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004942:	887b      	ldrh	r3, [r7, #2]
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc fbcc 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800494c:	4603      	mov	r3, r0
 800494e:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004950:	89fb      	ldrh	r3, [r7, #14]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	4413      	add	r3, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f904 	bl	8004b6a <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8004962:	4603      	mov	r3, r0
 8004964:	e001      	b.n	800496a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8004966:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fc fefd 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8004984:	4603      	mov	r3, r0
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff ffe9 	bl	8004972 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80049a0:	4602      	mov	r2, r0
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d306      	bcc.n	80049b6 <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 80049aa:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 80049ac:	f240 1101 	movw	r1, #257	; 0x101
 80049b0:	4809      	ldr	r0, [pc, #36]	; (80049d8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 80049b2:	f007 fc35 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8f8 	bl	8004bac <_ZNK11flatbuffers6VectorIlE4DataEv>
 80049bc:	4603      	mov	r3, r0
 80049be:	6839      	ldr	r1, [r7, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 f8e1 	bl	8004b88 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 80049c6:	4603      	mov	r3, r0
  }
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	0800f5c0 	.word	0x0800f5c0
 80049d4:	0800f5cc 	.word	0x0800f5cc
 80049d8:	0800f69c 	.word	0x0800f69c

080049dc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f8f5 	bl	8004bda <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 80049f0:	4604      	mov	r4, r0
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	f107 030c 	add.w	r3, r7, #12
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fdaf 	bl	8004560 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004a02:	f107 030c 	add.w	r3, r7, #12
 8004a06:	461a      	mov	r2, r3
 8004a08:	4621      	mov	r1, r4
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8fb 	bl	8004c06 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd90      	pop	{r4, r7, pc}

08004a18 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f904 	bl	8004c30 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004a28:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f909 	bl	8004c4a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f912 	bl	8004c64 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004a40:	4603      	mov	r3, r0
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4619      	mov	r1, r3
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff fd99 	bl	800457e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
      }
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd90      	pop	{r4, r7, pc}

08004a5c <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f91d 	bl	8004ca6 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
	return get();
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f922 	bl	8004cc8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004a84:	4603      	mov	r3, r0
      }
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f916 	bl	8004cc8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004a9c:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f8c5 	bl	8004c30 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
	return __p;
 8004aac:	68fb      	ldr	r3, [r7, #12]
      }
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	4603      	mov	r3, r0
 8004abe:	71fb      	strb	r3, [r7, #7]
    return t;
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff ffeb 	bl	8004ab6 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8004ae0:	4603      	mov	r3, r0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc faf2 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004b00:	4603      	mov	r3, r0
 8004b02:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	89fb      	ldrh	r3, [r7, #14]
 8004b08:	4413      	add	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b0c:	89fb      	ldrh	r3, [r7, #14]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8004b12:	68b8      	ldr	r0, [r7, #8]
 8004b14:	f7fc fe4c 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4413      	add	r3, r2
                        : nullptr;
 8004b1e:	e000      	b.n	8004b22 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b20:	2300      	movs	r3, #0
  }
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004b36:	887b      	ldrh	r3, [r7, #2]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc fad2 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004b40:	4603      	mov	r3, r0
 8004b42:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	89fb      	ldrh	r3, [r7, #14]
 8004b48:	4413      	add	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b4c:	89fb      	ldrh	r3, [r7, #14]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8004b52:	68b8      	ldr	r0, [r7, #8]
 8004b54:	f7fc fe2c 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4413      	add	r3, r2
                        : nullptr;
 8004b5e:	e000      	b.n	8004b62 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b60:	2300      	movs	r3, #0
  }
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f993 3000 	ldrsb.w	r3, [r3]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f8b2 	bl	8004ce2 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8004b7e:	4603      	mov	r3, r0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4413      	add	r3, r2
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fc fea3 	bl	80018e8 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8004ba2:	4603      	mov	r3, r0
  }
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
  }
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	2104      	movs	r1, #4
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
 8004bf0:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	2004      	movs	r0, #4
 8004bf8:	f7ff fc2d 	bl	8004456 <_ZnwjPv>
 8004bfc:	4603      	mov	r3, r0
  }
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004c06:	b590      	push	{r4, r7, lr}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004c12:	68fc      	ldr	r4, [r7, #12]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f880 	bl	8004d1a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 f82a 	bl	8004c7a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd90      	pop	{r4, r7, pc}

08004c30 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f878 	bl	8004d30 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f878 	bl	8004d4a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004c7a:	b590      	push	{r4, r7, lr}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004c86:	68fc      	ldr	r4, [r7, #12]
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff9b 	bl	8004bc4 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	f107 0308 	add.w	r3, r7, #8
 8004c94:	4619      	mov	r1, r3
 8004c96:	4620      	mov	r0, r4
 8004c98:	f000 f864 	bl	8004d64 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd90      	pop	{r4, r7, pc}

08004ca6 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f80a 	bl	8004cc8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf14      	ite	ne
 8004cba:	2301      	movne	r3, #1
 8004cbc:	2300      	moveq	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f85f 	bl	8004d96 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	4603      	mov	r3, r0
 8004cea:	71fb      	strb	r3, [r7, #7]
    return t;
 8004cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	ee07 3a90 	vmov	s15, r3
}
 8004d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f839 	bl	8004db2 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 f838 	bl	8004dca <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004d70:	68fc      	ldr	r4, [r7, #12]
 8004d72:	68b8      	ldr	r0, [r7, #8]
 8004d74:	f000 f836 	bl	8004de4 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d78:	4605      	mov	r5, r0
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ff22 	bl	8004bc4 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	4629      	mov	r1, r5
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 f837 	bl	8004dfa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bdb0      	pop	{r4, r5, r7, pc}

08004d96 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 f848 	bl	8004e36 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004da6:	4603      	mov	r3, r0
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f867 	bl	8004e8e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f83b 	bl	8004e50 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004dfa:	b590      	push	{r4, r7, lr}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004e06:	68fc      	ldr	r4, [r7, #12]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fedb 	bl	8004bc4 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4619      	mov	r1, r3
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 f828 	bl	8004e68 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1d1c      	adds	r4, r3, #4
 8004e1c:	68b8      	ldr	r0, [r7, #8]
 8004e1e:	f7ff ffe1 	bl	8004de4 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004e22:	4603      	mov	r3, r0
 8004e24:	4619      	mov	r1, r3
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 f83f 	bl	8004eaa <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}

08004e36 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f843 	bl	8004ecc <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004e46:	4603      	mov	r3, r0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f843 	bl	8004ee4 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004e72:	687c      	ldr	r4, [r7, #4]
 8004e74:	6838      	ldr	r0, [r7, #0]
 8004e76:	f7ff fea5 	bl	8004bc4 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 f83d 	bl	8004efe <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd90      	pop	{r4, r7, pc}

08004e8e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f840 	bl	8004f20 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004eb4:	6838      	ldr	r0, [r7, #0]
 8004eb6:	f7ff ff95 	bl	8004de4 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f82e 	bl	8004f36 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004eda:	4603      	mov	r3, r0
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f82f 	bl	8004f52 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	f7ff fe5b 	bl	8004bc4 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f810 	bl	8004f68 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f8d9 	bl	8005140 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return names;
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	08012948 	.word	0x08012948

08004fac <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	72bb      	strb	r3, [r7, #10]
 8004fba:	237e      	movs	r3, #126	; 0x7e
 8004fbc:	72fb      	strb	r3, [r7, #11]
 8004fbe:	f107 020b 	add.w	r2, r7, #11
 8004fc2:	f107 010a 	add.w	r1, r7, #10
 8004fc6:	1dfb      	adds	r3, r7, #7
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f8c5 	bl	8005158 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8004fd6:	e008      	b.n	8004fea <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8004fdc:	f7ff ffdc 	bl	8004f98 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	681b      	ldr	r3, [r3, #0]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	0800fd04 	.word	0x0800fd04

08004ff8 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	2104      	movs	r1, #4
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fc93 	bl	8004932 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800500c:	4603      	mov	r3, r0
 800500e:	b2db      	uxtb	r3, r3
  }
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2106      	movs	r1, #6
 8005024:	4618      	mov	r0, r3
 8005026:	f000 f8b2 	bl	800518e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800502a:	4603      	mov	r3, r0
  }
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	2108      	movs	r1, #8
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fc47 	bl	80048d6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005048:	4603      	mov	r3, r0
  }
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8005062:	2300      	movs	r3, #0
 8005064:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
  auto builtin_code = opcode->builtin_code();
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff ffc3 	bl	8004ff8 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8005072:	4603      	mov	r3, r0
 8005074:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff ffdc 	bl	8005034 <_ZNK6tflite12OperatorCode7versionEv>
 800507c:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800507e:	7fbb      	ldrb	r3, [r7, #30]
 8005080:	2b7e      	cmp	r3, #126	; 0x7e
 8005082:	d908      	bls.n	8005096 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 8005084:	7fbb      	ldrb	r3, [r7, #30]
 8005086:	461a      	mov	r2, r3
 8005088:	492a      	ldr	r1, [pc, #168]	; (8005134 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff f9b0 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8005090:	2301      	movs	r3, #1
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e048      	b.n	8005128 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8005096:	7fbb      	ldrb	r3, [r7, #30]
 8005098:	2b20      	cmp	r3, #32
 800509a:	d01a      	beq.n	80050d2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	7fb9      	ldrb	r1, [r7, #30]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	68b8      	ldr	r0, [r7, #8]
 80050a8:	4798      	blx	r3
 80050aa:	4602      	mov	r2, r0
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d137      	bne.n	8005128 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 80050b8:	7fbb      	ldrb	r3, [r7, #30]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff ff76 	bl	8004fac <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80050c0:	4602      	mov	r2, r0
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	491c      	ldr	r1, [pc, #112]	; (8005138 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff f992 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 80050cc:	2301      	movs	r3, #1
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e02a      	b.n	8005128 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff ffa0 	bl	8005018 <_ZNK6tflite12OperatorCode11custom_codeEv>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bf0c      	ite	eq
 80050de:	2301      	moveq	r3, #1
 80050e0:	2300      	movne	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d006      	beq.n	80050f6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 80050e8:	4914      	ldr	r1, [pc, #80]	; (800513c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff f980 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 80050f0:	2301      	movs	r3, #1
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e018      	b.n	8005128 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f7ff ff8e 	bl	8005018 <_ZNK6tflite12OperatorCode11custom_codeEv>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ff3d 	bl	8004f7e <_ZNK11flatbuffers6String5c_strEv>
 8005104:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3304      	adds	r3, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	6979      	ldr	r1, [r7, #20]
 8005112:	68b8      	ldr	r0, [r7, #8]
 8005114:	4798      	blx	r3
 8005116:	4602      	mov	r2, r0
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 8005124:	2301      	movs	r3, #1
 8005126:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8005128:	7ffb      	ldrb	r3, [r7, #31]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	0800fd08 	.word	0x0800fd08
 8005138:	0800fd5c 	.word	0x0800fd5c
 800513c:	0800fd94 	.word	0x0800fd94

08005140 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
  }
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d305      	bcc.n	800517c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	781a      	ldrb	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d201      	bcs.n	8005180 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f805 	bl	80051ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80051a4:	4603      	mov	r3, r0
  }
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fb ff90 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80051c4:	4603      	mov	r3, r0
 80051c6:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	89fb      	ldrh	r3, [r7, #14]
 80051cc:	4413      	add	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 80051d6:	68b8      	ldr	r0, [r7, #8]
 80051d8:	f7fc faea 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80051dc:	4602      	mov	r2, r0
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4413      	add	r3, r2
                        : nullptr;
 80051e2:	e000      	b.n	80051e6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80051e4:	2300      	movs	r3, #0
  }
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	ed87 0a01 	vstr	s0, [r7, #4]
 80051f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80051fc:	f006 ffe2 	bl	800c1c4 <roundf>
 8005200:	eef0 7a40 	vmov.f32	s15, s0
 8005204:	eeb0 0a67 	vmov.f32	s0, s15
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800520e:	b480      	push	{r7}
 8005210:	af00      	add	r7, sp, #0
 8005212:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005216:	4618      	mov	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8005220:	b5b0      	push	{r4, r5, r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	ed87 0b02 	vstr	d0, [r7, #8]
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800523a:	f7fb fc55 	bl	8000ae8 <__aeabi_dcmpeq>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d006      	beq.n	8005252 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
    return;
 8005250:	e06b      	b.n	800532a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8005252:	6838      	ldr	r0, [r7, #0]
 8005254:	ed97 0b02 	vldr	d0, [r7, #8]
 8005258:	f006 ff36 	bl	800c0c8 <frexp>
 800525c:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	4b32      	ldr	r3, [pc, #200]	; (8005330 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8005266:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800526a:	f7fb f9d5 	bl	8000618 <__aeabi_dmul>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	ec43 2b17 	vmov	d7, r2, r3
 8005276:	eeb0 0a47 	vmov.f32	s0, s14
 800527a:	eef0 0a67 	vmov.f32	s1, s15
 800527e:	f000 f88b 	bl	8005398 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8005282:	ec53 2b10 	vmov	r2, r3, d0
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	f7fb fd05 	bl	8000c98 <__aeabi_d2lz>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8005296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800529a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	4290      	cmp	r0, r2
 80052a4:	eb71 0303 	sbcs.w	r3, r1, r3
 80052a8:	da01      	bge.n	80052ae <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 80052aa:	f006 ffb1 	bl	800c210 <abort>
  if (q_fixed == (1ll << 31)) {
 80052ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf08      	it	eq
 80052b6:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 80052ba:	d117      	bne.n	80052ec <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 80052bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c0:	0fd9      	lsrs	r1, r3, #31
 80052c2:	4608      	mov	r0, r1
 80052c4:	f04f 0100 	mov.w	r1, #0
 80052c8:	1884      	adds	r4, r0, r2
 80052ca:	eb41 0503 	adc.w	r5, r1, r3
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	0862      	lsrs	r2, r4, #1
 80052d8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80052dc:	106b      	asrs	r3, r5, #1
 80052de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 80052ec:	f7ff ff8f 	bl	800520e <_ZNSt14numeric_limitsIlE3maxEv>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4618      	mov	r0, r3
 80052f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80052f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052fc:	4290      	cmp	r0, r2
 80052fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8005302:	da01      	bge.n	8005308 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 8005304:	f006 ff84 	bl	800c210 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f113 0f1f 	cmn.w	r3, #31
 8005310:	da08      	bge.n	8005324 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	601a      	str	r2, [r3, #0]
}
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bdb0      	pop	{r4, r5, r7, pc}
 8005330:	41e00000 	.word	0x41e00000

08005334 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	ed93 7a00 	vldr	s14, [r3]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800534e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005352:	d501      	bpl.n	8005358 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	e000      	b.n	800535a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8005358:	687b      	ldr	r3, [r7, #4]
    }
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	ed93 7a00 	vldr	s14, [r3]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	edd3 7a00 	vldr	s15, [r3]
 800537c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005384:	d501      	bpl.n	800538a <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	e000      	b.n	800538c <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800538a:	687b      	ldr	r3, [r7, #4]
    }
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	ed87 0b00 	vstr	d0, [r7]
 80053a2:	ed97 0b00 	vldr	d0, [r7]
 80053a6:	f006 fec7 	bl	800c138 <round>
 80053aa:	eeb0 7a40 	vmov.f32	s14, s0
 80053ae:	eef0 7a60 	vmov.f32	s15, s1
 80053b2:	eeb0 0a47 	vmov.f32	s0, s14
 80053b6:	eef0 0a67 	vmov.f32	s1, s15
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80053ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80053ce:	f7ff ff0e 	bl	80051ee <_ZSt5roundf>
 80053d2:	eef0 7a40 	vmov.f32	s15, s0
 80053d6:	eeb0 0a67 	vmov.f32	s0, s15
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 80053f2:	b480      	push	{r7}
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	237f      	movs	r3, #127	; 0x7f
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8005402:	b480      	push	{r7}
 8005404:	af00      	add	r7, sp, #0
 8005406:	2300      	movs	r3, #0
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8005412:	b480      	push	{r7}
 8005414:	af00      	add	r7, sp, #0
 8005416:	23ff      	movs	r3, #255	; 0xff
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
 8005428:	4b02      	ldr	r3, [pc, #8]	; (8005434 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800542a:	4618      	mov	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	ffff8000 	.word	0xffff8000

08005438 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
 800543c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	ed87 0b00 	vstr	d0, [r7]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800545c:	ec43 2b17 	vmov	d7, r2, r3
 8005460:	eeb0 0a47 	vmov.f32	s0, s14
 8005464:	eef0 0a67 	vmov.f32	s1, s15
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
#include "tensorflow/lite/kernels/internal/quantization_util.h"

namespace tflite {

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
  if (context->tensors != nullptr) {
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2a>
    return &context->tensors[node->inputs->data[index]];
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	019b      	lsls	r3, r3, #6
 8005498:	4413      	add	r3, r2
 800549a:	e00c      	b.n	80054b6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x44>
  } else {
    return context->GetTensor(context, node->inputs->data[index]);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4619      	mov	r1, r3
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	4790      	blx	r2
 80054b2:	4603      	mov	r3, r0
 80054b4:	bf00      	nop
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  }
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
  if (context->tensors != nullptr) {
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2a>
    return &context->tensors[node->outputs->data[index]];
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6859      	ldr	r1, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	019b      	lsls	r3, r3, #6
 80054e4:	4413      	add	r3, r2
 80054e6:	e00c      	b.n	8005502 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x44>
  } else {
    return context->GetTensor(context, node->outputs->data[index]);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4619      	mov	r1, r3
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	4790      	blx	r2
 80054fe:	4603      	mov	r3, r0
 8005500:	bf00      	nop
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	da0a      	bge.n	8005538 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d001      	beq.n	8005538 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x30>
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01b      	beq.n	800557a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x70>
    if (context->tensors != nullptr) {
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x56>
      return &context->tensors[node->inputs->data[index]];
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	019b      	lsls	r3, r3, #6
 800555c:	4413      	add	r3, r2
 800555e:	e00d      	b.n	800557c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x72>
    } else {
      return context->GetTensor(context, node->inputs->data[index]);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6819      	ldr	r1, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4619      	mov	r1, r3
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	4790      	blx	r2
 8005576:	4603      	mov	r3, r0
 8005578:	e000      	b.n	800557c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x72>
    }
  }
  return nullptr;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	0000      	movs	r0, r0
	...

08005588 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005588:	b5b0      	push	{r4, r5, r7, lr}
 800558a:	b08e      	sub	sp, #56	; 0x38
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fa ffe4 	bl	8000568 <__aeabi_f2d>
 80055a0:	4604      	mov	r4, r0
 80055a2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fa ffdd 	bl	8000568 <__aeabi_f2d>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fb f82f 	bl	8000618 <__aeabi_dmul>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d04a      	beq.n	800565e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fa ffcb 	bl	8000568 <__aeabi_f2d>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80055da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055e2:	f7fa fe61 	bl	80002a8 <__aeabi_dsub>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	ec43 2b17 	vmov	d7, r2, r3
 80055ee:	eeb0 0a47 	vmov.f32	s0, s14
 80055f2:	eef0 0a67 	vmov.f32	s1, s15
 80055f6:	f7ff ff28 	bl	800544a <_ZSt3absd>
 80055fa:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80055fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fa ffb0 	bl	8000568 <__aeabi_f2d>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8005610:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005614:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005618:	f7fb f928 	bl	800086c <__aeabi_ddiv>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	2301      	movs	r3, #1
 8005626:	461c      	mov	r4, r3
 8005628:	a318      	add	r3, pc, #96	; (adr r3, 800568c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f7fb fa6f 	bl	8000b10 <__aeabi_dcmple>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8005638:	2300      	movs	r3, #0
 800563a:	461c      	mov	r4, r3
 800563c:	b2e3      	uxtb	r3, r4
 800563e:	f083 0301 	eor.w	r3, r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	695c      	ldr	r4, [r3, #20]
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	23c5      	movs	r3, #197	; 0xc5
 8005652:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8005654:	490c      	ldr	r1, [pc, #48]	; (8005688 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	47a0      	blx	r4
 800565a:	2301      	movs	r3, #1
 800565c:	e009      	b.n	8005672 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800565e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f813 	bl	8005694 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800566e:	4603      	mov	r3, r0
                                          multiplier);
 8005670:	bf00      	nop
}
 8005672:	4618      	mov	r0, r3
 8005674:	3730      	adds	r7, #48	; 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bdb0      	pop	{r4, r5, r7, pc}
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w
 8005680:	0800ff8c 	.word	0x0800ff8c
 8005684:	0800fdcc 	.word	0x0800fdcc
 8005688:	0800fe78 	.word	0x0800fe78
 800568c:	47ae147b 	.word	0x47ae147b
 8005690:	3f947ae1 	.word	0x3f947ae1

08005694 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80056b2:	ee17 0a90 	vmov	r0, s15
 80056b6:	f7fa ff57 	bl	8000568 <__aeabi_f2d>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80056c2:	2301      	movs	r3, #1
 80056c4:	461c      	mov	r4, r3
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056d2:	f7fb fa27 	bl	8000b24 <__aeabi_dcmpge>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80056dc:	2300      	movs	r3, #0
 80056de:	461c      	mov	r4, r3
 80056e0:	b2e3      	uxtb	r3, r4
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	695c      	ldr	r4, [r3, #20]
 80056f0:	4b0e      	ldr	r3, [pc, #56]	; (800572c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	23d2      	movs	r3, #210	; 0xd2
 80056f6:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 80056f8:	490e      	ldr	r1, [pc, #56]	; (8005734 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	47a0      	blx	r4
 80056fe:	2301      	movs	r3, #1
 8005700:	e010      	b.n	8005724 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fa ff2e 	bl	8000568 <__aeabi_f2d>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005714:	f7fb f8aa 	bl	800086c <__aeabi_ddiv>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800571e:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd90      	pop	{r4, r7, pc}
 800572c:	0800ffb0 	.word	0x0800ffb0
 8005730:	0800fdcc 	.word	0x0800fdcc
 8005734:	0800fe78 	.word	0x0800fe78

08005738 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	ed87 0a00 	vstr	s0, [r7]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800574a:	ed97 7a00 	vldr	s14, [r7]
 800574e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005752:	eeb0 0a66 	vmov.f32	s0, s13
 8005756:	f7ff fe33 	bl	80053c0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800575a:	eef0 7a40 	vmov.f32	s15, s0
 800575e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005762:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800576a:	4413      	add	r3, r2
  };
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b08e      	sub	sp, #56	; 0x38
 8005778:	af00      	add	r7, sp, #0
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8005790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d118      	bne.n	80057d0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8005898 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ffc6 	bl	8005738 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80057ac:	4603      	mov	r3, r0
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	f107 021c 	add.w	r2, r7, #28
 80057b4:	f107 0308 	add.w	r3, r7, #8
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f8c2 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 80057c0:	4603      	mov	r3, r0
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c6:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057cc:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 80057ce:	e05f      	b.n	8005890 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d129      	bne.n	800582a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 80057d6:	f107 0314 	add.w	r3, r7, #20
 80057da:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8005898 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff ffaa 	bl	8005738 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80057e4:	4603      	mov	r3, r0
 80057e6:	623b      	str	r3, [r7, #32]
 80057e8:	f107 0220 	add.w	r2, r7, #32
 80057ec:	f107 0308 	add.w	r3, r7, #8
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f8a6 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 80057f8:	4603      	mov	r3, r0
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fe:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff ff95 	bl	8005738 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800580e:	4603      	mov	r3, r0
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
 8005812:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f8a6 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 8005820:	4603      	mov	r3, r0
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005826:	601a      	str	r2, [r3, #0]
}
 8005828:	e032      	b.n	8005890 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d129      	bne.n	8005884 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8005830:	f107 0314 	add.w	r3, r7, #20
 8005834:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ff7d 	bl	8005738 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800583e:	4603      	mov	r3, r0
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
 8005842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005846:	f107 0308 	add.w	r3, r7, #8
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f879 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 8005852:	4603      	mov	r3, r0
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005858:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 800585a:	f107 0314 	add.w	r3, r7, #20
 800585e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff ff68 	bl	8005738 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005868:	4603      	mov	r3, r0
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005870:	1d3b      	adds	r3, r7, #4
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f000 f879 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 800587a:	4603      	mov	r3, r0
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005880:	601a      	str	r2, [r3, #0]
}
 8005882:	e005      	b.n	8005890 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005888:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588e:	601a      	str	r2, [r3, #0]
}
 8005890:	bf00      	nop
 8005892:	3738      	adds	r7, #56	; 0x38
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	00000000 	.word	0x00000000

0800589c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	460b      	mov	r3, r1
 80058aa:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d108      	bne.n	80058ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80058bc:	f7ff fda1 	bl	8005402 <_ZNSt14numeric_limitsIhE3minEv>
 80058c0:	4603      	mov	r3, r0
 80058c2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80058c4:	f7ff fda5 	bl	8005412 <_ZNSt14numeric_limitsIhE3maxEv>
 80058c8:	4603      	mov	r3, r0
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	e025      	b.n	800591a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b09      	cmp	r3, #9
 80058d4:	d108      	bne.n	80058e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80058d6:	f7ff fd83 	bl	80053e0 <_ZNSt14numeric_limitsIaE3minEv>
 80058da:	4603      	mov	r3, r0
 80058dc:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80058de:	f7ff fd88 	bl	80053f2 <_ZNSt14numeric_limitsIaE3maxEv>
 80058e2:	4603      	mov	r3, r0
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	e018      	b.n	800591a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b07      	cmp	r3, #7
 80058ee:	d108      	bne.n	8005902 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80058f0:	f7ff fd98 	bl	8005424 <_ZNSt14numeric_limitsIsE3minEv>
 80058f4:	4603      	mov	r3, r0
 80058f6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80058f8:	f7ff fd9e 	bl	8005438 <_ZNSt14numeric_limitsIsE3maxEv>
 80058fc:	4603      	mov	r3, r0
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	e00b      	b.n	800591a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	695c      	ldr	r4, [r3, #20]
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	f240 1305 	movw	r3, #261	; 0x105
 800590e:	4a0b      	ldr	r2, [pc, #44]	; (800593c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8005910:	490b      	ldr	r1, [pc, #44]	; (8005940 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	47a0      	blx	r4
 8005916:	2301      	movs	r3, #1
 8005918:	e00a      	b.n	8005930 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 800591a:	7af8      	ldrb	r0, [r7, #11]
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	6979      	ldr	r1, [r7, #20]
 800592a:	f7ff ff23 	bl	8005774 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	bd90      	pop	{r4, r7, pc}
 8005938:	0800ffcc 	.word	0x0800ffcc
 800593c:	0800fdcc 	.word	0x0800fdcc
 8005940:	0800fe78 	.word	0x0800fe78

08005944 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	da01      	bge.n	800595e <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	e000      	b.n	8005960 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800595e:	687b      	ldr	r3, [r7, #4]
    }
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	da01      	bge.n	8005986 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	e000      	b.n	8005988 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8005986:	687b      	ldr	r3, [r7, #4]
    }
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2104      	movs	r1, #4
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe ffb6 	bl	8004912 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80059a6:	4603      	mov	r3, r0
  }
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	2106      	movs	r1, #6
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe ffb7 	bl	8004932 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80059c4:	4603      	mov	r3, r0
 80059c6:	b2db      	uxtb	r3, r3
  }
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f866 	bl	8005ad4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	dd08      	ble.n	8005a34 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d004      	beq.n	8005a34 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f006 fb08 	bl	800c044 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	dd02      	ble.n	8005a6c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	e001      	b.n	8005a70 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
  }
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	dd08      	ble.n	8005aa0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f006 fad2 	bl	800c044 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b05      	cmp	r3, #5
 8005aaa:	dd0f      	ble.n	8005acc <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d201      	bcs.n	8005aba <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	e001      	b.n	8005abe <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8005aba:	f04f 33ff 	mov.w	r3, #4294967295
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f006 fae2 	bl	800c088 <_Znaj>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff ffca 	bl	8005a7c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff ffb4 	bl	8005a56 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8005aee:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	461a      	mov	r2, r3
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	6978      	ldr	r0, [r7, #20]
 8005afa:	f006 fc05 	bl	800c308 <memcpy>
  }
 8005afe:	bf00      	nop
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff ff5a 	bl	80059d0 <_ZN6tflite12RuntimeShapeC1Ev>
 8005b1c:	e00d      	b.n	8005b3a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	6939      	ldr	r1, [r7, #16]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff59 	bl	80059ec <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	1e5a      	subs	r2, r3, #1
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8005b64:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8005b66:	68bb      	ldr	r3, [r7, #8]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8005b90:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8005b92:	68bb      	ldr	r3, [r7, #8]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	1e5a      	subs	r2, r3, #1
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	2b0b      	cmp	r3, #11
 8005be2:	d83f      	bhi.n	8005c64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x94>
 8005be4:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c1d 	.word	0x08005c1d
 8005bf0:	08005c2d 	.word	0x08005c2d
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c45 	.word	0x08005c45
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005c4d 	.word	0x08005c4d
 8005c04:	08005c25 	.word	0x08005c25
 8005c08:	08005c55 	.word	0x08005c55
 8005c0c:	08005c3d 	.word	0x08005c3d
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005c5d 	.word	0x08005c5d
    case kTfLiteFloat32:
      *size = sizeof(float);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	601a      	str	r2, [r3, #0]
      break;
 8005c22:	e021      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2202      	movs	r2, #2
 8005c28:	601a      	str	r2, [r3, #0]
      break;
 8005c2a:	e01d      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2204      	movs	r2, #4
 8005c30:	601a      	str	r2, [r3, #0]
      break;
 8005c32:	e019      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
      break;
 8005c3a:	e015      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
      break;
 8005c42:	e011      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2208      	movs	r2, #8
 8005c48:	601a      	str	r2, [r3, #0]
      break;
 8005c4a:	e00d      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    case kTfLiteBool:
      *size = sizeof(bool);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
      break;
 8005c52:	e009      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2208      	movs	r2, #8
 8005c58:	601a      	str	r2, [r3, #0]
      break;
 8005c5a:	e005      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2210      	movs	r2, #16
 8005c60:	601a      	str	r2, [r3, #0]
      break;
 8005c62:	e001      	b.n	8005c68 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x98>
    default:
      return kTfLiteError;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x9a>
  }
  return kTfLiteOk;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop

08005c78 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8005c86:	2301      	movs	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff fe82 	bl	8005994 <_ZNK6tflite6Tensor5shapeEv>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	bf14      	ite	ne
 8005c96:	2301      	movne	r3, #1
 8005c98:	2300      	moveq	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d022      	beq.n	8005ce6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff fe75 	bl	8005994 <_ZNK6tflite6Tensor5shapeEv>
 8005caa:	4603      	mov	r3, r0
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f884 	bl	8005dba <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	bf34      	ite	cc
 8005cba:	2301      	movcc	r3, #1
 8005cbc:	2300      	movcs	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7ff fe65 	bl	8005994 <_ZNK6tflite6Tensor5shapeEv>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fe5e 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	fb02 f303 	mul.w	r3, r2, r3
 8005cdc:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	e7de      	b.n	8005ca4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fe62 	bl	80059b0 <_ZNK6tflite6Tensor4typeEv>
 8005cec:	4603      	mov	r3, r0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f107 0315 	add.w	r3, r7, #21
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f7fe fcae 	bl	8004658 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	75fb      	strb	r3, [r7, #23]
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	e013      	b.n	8005d32 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8005d0a:	7d7b      	ldrb	r3, [r7, #21]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ff5e 	bl	8005bd0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8005d14:	4603      	mov	r3, r0
 8005d16:	75bb      	strb	r3, [r7, #22]
 8005d18:	7dbb      	ldrb	r3, [r7, #22]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8005d1e:	7dbb      	ldrb	r3, [r7, #22]
 8005d20:	e007      	b.n	8005d32 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	fb02 f203 	mul.w	r2, r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 8005d4a:	f006 fa61 	bl	800c210 <abort>

  int element_count = 1;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d015      	beq.n	8005d86 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	da0d      	bge.n	8005d86 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	fb02 f303 	mul.w	r3, r2, r3
 8005d7c:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3301      	adds	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	e7eb      	b.n	8005d5e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	7a1b      	ldrb	r3, [r3, #8]
 8005d8a:	f107 0208 	add.w	r2, r7, #8
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff ff1d 	bl	8005bd0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	e006      	b.n	8005db2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	fb02 f203 	mul.w	r2, r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fe fdd5 	bl	8004972 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2108      	movs	r1, #8
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 fdf0 	bl	80079c4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8005de4:	4603      	mov	r3, r0
  }
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	210a      	movs	r1, #10
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 fdf2 	bl	80079e4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8005e00:	4603      	mov	r3, r0
  }
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2110      	movs	r1, #16
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe fd5c 	bl	80048d6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005e1e:	4603      	mov	r3, r0
  }
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	2108      	movs	r1, #8
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fb fcd6 	bl	80017e8 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8005e3c:	4603      	mov	r3, r0
  }
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	210c      	movs	r1, #12
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fdd6 	bl	8007a04 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8005e58:	4603      	mov	r3, r0
  }
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	210e      	movs	r1, #14
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fd01 	bl	8004878 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
  }
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	2104      	movs	r1, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fb fca5 	bl	80017e8 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8005e9e:	4603      	mov	r3, r0
  }
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2106      	movs	r1, #6
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe fd2c 	bl	8004912 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005eba:	4603      	mov	r3, r0
  }
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2108      	movs	r1, #8
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fd1e 	bl	8004912 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005ed6:	4603      	mov	r3, r0
  }
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	210e      	movs	r1, #14
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 fd59 	bl	80079a4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8005ef2:	4603      	mov	r3, r0
  }
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2104      	movs	r1, #4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fd8b 	bl	8007a24 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8005f0e:	4603      	mov	r3, r0
  }
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2106      	movs	r1, #6
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fcf4 	bl	8004912 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005f2a:	4603      	mov	r3, r0
  }
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2108      	movs	r1, #8
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fce6 	bl	8004912 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005f46:	4603      	mov	r3, r0
  }
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	210a      	movs	r1, #10
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fd71 	bl	8007a44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8005f62:	4603      	mov	r3, r0
  }
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2104      	movs	r1, #4
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 fd13 	bl	80079a4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8005f7e:	4603      	mov	r3, r0
  }
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2104      	movs	r1, #4
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff f8fa 	bl	800518e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8005f9a:	4603      	mov	r3, r0
  }
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2106      	movs	r1, #6
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fb fc18 	bl	80017e8 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8005fb8:	4603      	mov	r3, r0
  }
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2106      	movs	r1, #6
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fd48 	bl	8007a64 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8005fd4:	4603      	mov	r3, r0
  }
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2108      	movs	r1, #8
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 fd4a 	bl	8007a84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8005ff0:	4603      	mov	r3, r0
  }
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	210c      	movs	r1, #12
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fd4c 	bl	8007aa4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800600c:	4603      	mov	r3, r0
  }
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2110      	movs	r1, #16
 8006022:	4618      	mov	r0, r3
 8006024:	f001 fd4e 	bl	8007ac4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8006028:	4603      	mov	r3, r0
  }
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	4a04      	ldr	r2, [pc, #16]	; (8006050 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	08012bbc 	.word	0x08012bbc

08006054 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff ffe9 	bl	8006034 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8006062:	2104      	movs	r1, #4
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f005 ffeb 	bl	800c040 <_ZdlPvj>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	4a04      	ldr	r2, [pc, #16]	; (8006090 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	08012bbc 	.word	0x08012bbc

08006094 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {0, {}};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff ffe7 	bl	8006074 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 80060a6:	4a05      	ldr	r2, [pc, #20]	; (80060bc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	08012b6c 	.word	0x08012b6c

080060c0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6858      	ldr	r0, [r3, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4798      	blx	r3
 80060e0:	4603      	mov	r3, r0
  }
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(ErrorReporter* reporter,
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
                        SimpleMemoryAllocator* allocator)
      : reporter_(reporter), allocator_(allocator) {}
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	609a      	str	r2, [r3, #8]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	611a      	str	r2, [r3, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>:

  // Initializes the builder by allocating AllocationInfo array from the
  // simple memory allocator.
  TfLiteStatus Init(size_t tensor_count, size_t scratch_buffer_count) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
    tensor_count_ = tensor_count;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	609a      	str	r2, [r3, #8]
    buffer_count_ = scratch_buffer_count;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]
    return Allocate();
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f821 	bl	8006198 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>
 8006156:	4603      	mov	r3, r0
  }
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>:

  // Add allocation information for the scratch buffers.
  TfLiteStatus AddScratchBuffers(internal::ScratchBufferHandle* buffer_handles);

  // Returns a pointer to the built AllocationInfo array.
  const AllocationInfo* Finish() const { return info_; }
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>:
  size_t Size() const { return tensor_count_ + buffer_count_; }
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4413      	add	r3, r2
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>:
  size_t tensor_count_ = 0;
  size_t buffer_count_ = 0;
  AllocationInfo* info_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::Allocate() {
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  size_t bytes = sizeof(AllocationInfo) * Size();
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ffe9 	bl	8006178 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 80061a6:	4602      	mov	r2, r0
 80061a8:	4613      	mov	r3, r2
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	4413      	add	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	60fb      	str	r3, [r7, #12]
  info_ = reinterpret_cast<AllocationInfo*>(
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6858      	ldr	r0, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2204      	movs	r2, #4
 80061c2:	68f9      	ldr	r1, [r7, #12]
 80061c4:	4798      	blx	r3
 80061c6:	4602      	mov	r2, r0
  info_ = reinterpret_cast<AllocationInfo*>(
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	611a      	str	r2, [r3, #16]
  if (info_ == nullptr) {
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d108      	bne.n	80061e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x4e>
    TF_LITE_REPORT_ERROR(
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4905      	ldr	r1, [pc, #20]	; (80061f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x58>)
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe f907 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x50>
  }
  return kTfLiteOk;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	08010760 	.word	0x08010760

080061f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b09a      	sub	sp, #104	; 0x68
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8006208:	f006 f802 	bl	800c210 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800620c:	2300      	movs	r3, #0
 800620e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006216:	429a      	cmp	r2, r3
 8006218:	d267      	bcs.n	80062ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6919      	ldr	r1, [r3, #16]
 800621e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	643b      	str	r3, [r7, #64]	; 0x40
    current->output_ptr = &(eval_tensors[i].data.data);
 800622c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800622e:	4613      	mov	r3, r2
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	461a      	mov	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4413      	add	r3, r2
 800623c:	461a      	mov	r2, r3
 800623e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006240:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 8006242:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006244:	4613      	mov	r3, r2
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	461a      	mov	r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	4413      	add	r3, r2
 8006252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff fd6f 	bl	8005d3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006262:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800626a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800626e:	e177      	b.n	8006560 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x36c>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 8006270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 8006278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627a:	f04f 32ff 	mov.w	r2, #4294967295
 800627e:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8006280:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006282:	4613      	mov	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	461a      	mov	r2, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	4413      	add	r3, r2
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d113      	bne.n	80062be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 8006296:	68b8      	ldr	r0, [r7, #8]
 8006298:	f7ff fe30 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 800629c:	4603      	mov	r3, r0
 800629e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 fca7 	bl	8007bf4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80062a6:	4603      	mov	r3, r0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fdda 	bl	8005e62 <_ZNK6tflite6Tensor11is_variableEv>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f083 0301 	eor.w	r3, r3, #1
 80062b4:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 80062ba:	2201      	movs	r2, #1
 80062bc:	e000      	b.n	80062c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 80062be:	2200      	movs	r2, #0
 80062c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c2:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 80062ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d6:	611a      	str	r2, [r3, #16]
 80062d8:	e003      	b.n	80062e2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 80062da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062dc:	f04f 32ff 	mov.w	r2, #4294967295
 80062e0:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 80062e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e4:	3301      	adds	r3, #1
 80062e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e8:	e792      	b.n	8006210 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80062ea:	2300      	movs	r3, #0
 80062ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ee:	68b8      	ldr	r0, [r7, #8]
 80062f0:	f7ff fe12 	bl	8005f18 <_ZNK6tflite8SubGraph6inputsEv>
 80062f4:	4603      	mov	r3, r0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fb3b 	bl	8004972 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006300:	4293      	cmp	r3, r2
 8006302:	bf34      	ite	cc
 8006304:	2301      	movcc	r3, #1
 8006306:	2300      	movcs	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d018      	beq.n	8006340 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 800630e:	68b8      	ldr	r0, [r7, #8]
 8006310:	f7ff fe02 	bl	8005f18 <_ZNK6tflite8SubGraph6inputsEv>
 8006314:	4603      	mov	r3, r0
 8006316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe fb39 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800631e:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6919      	ldr	r1, [r3, #16]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4613      	mov	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	4413      	add	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	440b      	add	r3, r1
 8006330:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2200      	movs	r2, #0
 8006336:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8006338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800633a:	3301      	adds	r3, #1
 800633c:	65bb      	str	r3, [r7, #88]	; 0x58
 800633e:	e7d6      	b.n	80062ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8006340:	2300      	movs	r3, #0
 8006342:	657b      	str	r3, [r7, #84]	; 0x54
 8006344:	68b8      	ldr	r0, [r7, #8]
 8006346:	f7ff fdf5 	bl	8005f34 <_ZNK6tflite8SubGraph7outputsEv>
 800634a:	4603      	mov	r3, r0
 800634c:	4618      	mov	r0, r3
 800634e:	f7fe fb10 	bl	8004972 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006352:	4602      	mov	r2, r0
 8006354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006356:	4293      	cmp	r3, r2
 8006358:	bf34      	ite	cc
 800635a:	2301      	movcc	r3, #1
 800635c:	2300      	movcs	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d021      	beq.n	80063a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 8006364:	68b8      	ldr	r0, [r7, #8]
 8006366:	f7ff fde5 	bl	8005f34 <_ZNK6tflite8SubGraph7outputsEv>
 800636a:	4603      	mov	r3, r0
 800636c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe fb0e 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006374:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6919      	ldr	r1, [r3, #16]
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	4613      	mov	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	440b      	add	r3, r1
 8006386:	61bb      	str	r3, [r7, #24]
    current->last_used = subgraph->operators()->size() - 1;
 8006388:	68b8      	ldr	r0, [r7, #8]
 800638a:	f7ff fde1 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 800638e:	4603      	mov	r3, r0
 8006390:	4618      	mov	r0, r3
 8006392:	f001 fc55 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8006396:	4603      	mov	r3, r0
 8006398:	3b01      	subs	r3, #1
 800639a:	461a      	mov	r2, r3
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80063a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a2:	3301      	adds	r3, #1
 80063a4:	657b      	str	r3, [r7, #84]	; 0x54
 80063a6:	e7cd      	b.n	8006344 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 80063a8:	68b8      	ldr	r0, [r7, #8]
 80063aa:	f7ff fdd1 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 80063ae:	4603      	mov	r3, r0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 fc45 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80063b6:	4603      	mov	r3, r0
 80063b8:	3b01      	subs	r3, #1
 80063ba:	653b      	str	r3, [r7, #80]	; 0x50
 80063bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063be:	2b00      	cmp	r3, #0
 80063c0:	db77      	blt.n	80064b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 80063c2:	68b8      	ldr	r0, [r7, #8]
 80063c4:	f7ff fdc4 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f001 fc44 	bl	8007c5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80063d4:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80063d6:	2300      	movs	r3, #0
 80063d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063dc:	f7ff fd64 	bl	8005ea8 <_ZNK6tflite8Operator6inputsEv>
 80063e0:	4603      	mov	r3, r0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fac5 	bl	8004972 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80063e8:	4602      	mov	r2, r0
 80063ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ec:	4293      	cmp	r3, r2
 80063ee:	bf34      	ite	cc
 80063f0:	2301      	movcc	r3, #1
 80063f2:	2300      	movcs	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d022      	beq.n	8006440 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 80063fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063fc:	f7ff fd54 	bl	8005ea8 <_ZNK6tflite8Operator6inputsEv>
 8006400:	4603      	mov	r3, r0
 8006402:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fac3 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800640a:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6919      	ldr	r1, [r3, #16]
 8006410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006412:	4613      	mov	r3, r2
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	4413      	add	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	440b      	add	r3, r1
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d004      	beq.n	8006432 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800642e:	429a      	cmp	r2, r3
 8006430:	dd02      	ble.n	8006438 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006436:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8006438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643a:	3301      	adds	r3, #1
 800643c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643e:	e7cc      	b.n	80063da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8006440:	2300      	movs	r3, #0
 8006442:	64bb      	str	r3, [r7, #72]	; 0x48
 8006444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006446:	f7ff fd3d 	bl	8005ec4 <_ZNK6tflite8Operator7outputsEv>
 800644a:	4603      	mov	r3, r0
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe fa90 	bl	8004972 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006452:	4602      	mov	r2, r0
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	4293      	cmp	r3, r2
 8006458:	bf34      	ite	cc
 800645a:	2301      	movcc	r3, #1
 800645c:	2300      	movcs	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d022      	beq.n	80064aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 8006464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006466:	f7ff fd2d 	bl	8005ec4 <_ZNK6tflite8Operator7outputsEv>
 800646a:	4603      	mov	r3, r0
 800646c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fa8e 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006474:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6919      	ldr	r1, [r3, #16]
 800647a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800647c:	4613      	mov	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	4413      	add	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	440b      	add	r3, r1
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d004      	beq.n	800649c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006498:	429a      	cmp	r2, r3
 800649a:	da02      	bge.n	80064a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064a0:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80064a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a4:	3301      	adds	r3, #1
 80064a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a8:	e7cc      	b.n	8006444 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 80064aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ac:	3b01      	subs	r3, #1
 80064ae:	653b      	str	r3, [r7, #80]	; 0x50
 80064b0:	e784      	b.n	80063bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }

  // Work out which tensors need to be allocated.
  for (size_t i = 0; i < tensor_count_; ++i) {
 80064b2:	2300      	movs	r3, #0
 80064b4:	647b      	str	r3, [r7, #68]	; 0x44
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064bc:	429a      	cmp	r2, r3
 80064be:	d24e      	bcs.n	800655e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x36a>
    AllocationInfo* current = &info_[i];
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6919      	ldr	r1, [r3, #16]
 80064c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	440b      	add	r3, r1
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
    const bool is_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d106      	bne.n	80064ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d001      	beq.n	80064ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f8>
 80064ea:	2300      	movs	r3, #0
    const bool is_read_only =
 80064ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (is_read_only) {
 80064f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x30a>
      current->needs_allocating = false;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	2200      	movs	r2, #0
 80064fc:	751a      	strb	r2, [r3, #20]
    }
    const bool has_partial_lifetime =
        !is_read_only &&
 80064fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006502:	f083 0301 	eor.w	r3, r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x330>
        ((current->first_created == -1) || (current->last_used == -1));
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	689b      	ldr	r3, [r3, #8]
        !is_read_only &&
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006514:	d004      	beq.n	8006520 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x32c>
        ((current->first_created == -1) || (current->last_used == -1));
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d101      	bne.n	8006524 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x330>
        !is_read_only &&
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x332>
 8006524:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 8006526:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (has_partial_lifetime && current->needs_allocating) {
 800652a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800652e:	2b00      	cmp	r3, #0
 8006530:	d011      	beq.n	8006556 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x362>
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	7d1b      	ldrb	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x362>
      TF_LITE_REPORT_ERROR(
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800654c:	4906      	ldr	r1, [pc, #24]	; (8006568 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x374>)
 800654e:	f7fd ff4f 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 8006552:	2301      	movs	r3, #1
 8006554:	e004      	b.n	8006560 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x36c>
  for (size_t i = 0; i < tensor_count_; ++i) {
 8006556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006558:	3301      	adds	r3, #1
 800655a:	647b      	str	r3, [r7, #68]	; 0x44
 800655c:	e7ab      	b.n	80064b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c2>
    }
  }
  return kTfLiteOk;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3760      	adds	r7, #96	; 0x60
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	080107a4 	.word	0x080107a4

0800656c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b08c      	sub	sp, #48	; 0x30
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8006578:	68b8      	ldr	r0, [r7, #8]
 800657a:	f7ff fd4c 	bl	8006016 <_ZNK6tflite5Model8metadataEv>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf14      	ite	ne
 8006584:	2301      	movne	r3, #1
 8006586:	2300      	moveq	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d060      	beq.n	8006650 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800658e:	2300      	movs	r3, #0
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006592:	68b8      	ldr	r0, [r7, #8]
 8006594:	f7ff fd3f 	bl	8006016 <_ZNK6tflite5Model8metadataEv>
 8006598:	4603      	mov	r3, r0
 800659a:	4618      	mov	r0, r3
 800659c:	f001 fc20 	bl	8007de0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bf34      	ite	cc
 80065a8:	2301      	movcc	r3, #1
 80065aa:	2300      	movcs	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d04e      	beq.n	8006650 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 80065b2:	68b8      	ldr	r0, [r7, #8]
 80065b4:	f7ff fd2f 	bl	8006016 <_ZNK6tflite5Model8metadataEv>
 80065b8:	4603      	mov	r3, r0
 80065ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fc1d 	bl	8007dfc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 80065c2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80065c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c6:	f7ff fcdf 	bl	8005f88 <_ZNK6tflite8Metadata4nameEv>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe fcd6 	bl	8004f7e <_ZNK11flatbuffers6String5c_strEv>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2217      	movs	r2, #23
 80065d6:	4921      	ldr	r1, [pc, #132]	; (800665c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 80065d8:	4618      	mov	r0, r3
 80065da:	f006 fda7 	bl	800d12c <strncmp>
 80065de:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf0c      	ite	eq
 80065e4:	2301      	moveq	r3, #1
 80065e6:	2300      	movne	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d02c      	beq.n	8006648 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 80065ee:	68b8      	ldr	r0, [r7, #8]
 80065f0:	f7ff fd03 	bl	8005ffa <_ZNK6tflite5Model7buffersEv>
 80065f4:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 80065f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f8:	f7ff fcd4 	bl	8005fa4 <_ZNK6tflite8Metadata6bufferEv>
 80065fc:	4603      	mov	r3, r0
 80065fe:	4619      	mov	r1, r3
 8006600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006602:	f001 fc2f 	bl	8007e64 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8006606:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8006608:	6a38      	ldr	r0, [r7, #32]
 800660a:	f7ff fcaf 	bl	8005f6c <_ZNK6tflite6Buffer4dataEv>
 800660e:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8006610:	69f8      	ldr	r0, [r7, #28]
 8006612:	f001 fc35 	bl	8007e80 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8006616:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	3308      	adds	r3, #8
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	429a      	cmp	r2, r3
 8006632:	d009      	beq.n	8006648 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4908      	ldr	r1, [pc, #32]	; (8006660 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8006640:	f7fd fed6 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8006644:	2301      	movs	r3, #1
 8006646:	e004      	b.n	8006652 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	3301      	adds	r3, #1
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800664e:	e7a0      	b.n	8006592 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3730      	adds	r7, #48	; 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	08012b48 	.word	0x08012b48
 8006660:	08010714 	.word	0x08010714

08006664 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferHandle* buffer_handles) {
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4413      	add	r3, r2
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	429a      	cmp	r2, r3
 8006682:	d22e      	bcs.n	80066e2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x7e>
    AllocationInfo* current = &info_[i];
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6919      	ldr	r1, [r3, #16]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4613      	mov	r3, r2
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	4413      	add	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	440b      	add	r3, r1
 8006694:	613b      	str	r3, [r7, #16]
    internal::ScratchBufferHandle* handle =
        &(buffer_handles[i - tensor_count_]);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	1ad2      	subs	r2, r2, r3
 800669e:	4613      	mov	r3, r2
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	461a      	mov	r2, r3
    internal::ScratchBufferHandle* handle =
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	4413      	add	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]
    current->bytes = handle->bytes;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	601a      	str	r2, [r3, #0]
    current->first_created = handle->node_idx;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	609a      	str	r2, [r3, #8]
    current->last_used = handle->node_idx;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	60da      	str	r2, [r3, #12]
    current->needs_allocating = true;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2201      	movs	r2, #1
 80066d0:	751a      	strb	r2, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f04f 32ff 	mov.w	r2, #4294967295
 80066d8:	611a      	str	r2, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	3301      	adds	r3, #1
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e7c8      	b.n	8006674 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x10>
  }
  return kTfLiteOk;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b08b      	sub	sp, #44	; 0x2c
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d247      	bcs.n	800679a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	4613      	mov	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4413      	add	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	461a      	mov	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4413      	add	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	7d1b      	ldrb	r3, [r3, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d036      	beq.n	8006792 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2110      	movs	r1, #16
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fa38 	bl	8005ba0 <_ZN6tflite11AlignSizeUpEjj>
 8006730:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673a:	d114      	bne.n	8006766 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	681c      	ldr	r4, [r3, #0]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	6899      	ldr	r1, [r3, #8]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	460b      	mov	r3, r1
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	68b8      	ldr	r0, [r7, #8]
 8006756:	47a0      	blx	r4
 8006758:	4603      	mov	r3, r0
 800675a:	74bb      	strb	r3, [r7, #18]
 800675c:	7cbb      	ldrb	r3, [r7, #18]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d017      	beq.n	8006792 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8006762:	7cbb      	ldrb	r3, [r7, #18]
 8006764:	e01a      	b.n	800679c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8006766:	6979      	ldr	r1, [r7, #20]
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	6898      	ldr	r0, [r3, #8]
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	6912      	ldr	r2, [r2, #16]
 8006774:	9201      	str	r2, [sp, #4]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	4603      	mov	r3, r0
 800677a:	460a      	mov	r2, r1
 800677c:	68f9      	ldr	r1, [r7, #12]
 800677e:	68b8      	ldr	r0, [r7, #8]
 8006780:	f005 f9d4 	bl	800bb2c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 8006784:	4603      	mov	r3, r0
 8006786:	74fb      	strb	r3, [r7, #19]
 8006788:	7cfb      	ldrb	r3, [r7, #19]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800678e:	7cfb      	ldrb	r3, [r7, #19]
 8006790:	e004      	b.n	800679c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3301      	adds	r3, #1
 8006796:	61fb      	str	r3, [r7, #28]
 8006798:	e7b3      	b.n	8006702 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3724      	adds	r7, #36	; 0x24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd90      	pop	{r4, r7, pc}

080067a4 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b08b      	sub	sp, #44	; 0x2c
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	6a3a      	ldr	r2, [r7, #32]
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	429a      	cmp	r2, r3
 80067c0:	d22e      	bcs.n	8006820 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 80067c2:	6a3a      	ldr	r2, [r7, #32]
 80067c4:	4613      	mov	r3, r2
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	4413      	add	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	461a      	mov	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	4413      	add	r3, r2
 80067d2:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	7d1b      	ldrb	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01d      	beq.n	8006818 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3314      	adds	r3, #20
 80067e8:	681c      	ldr	r4, [r3, #0]
 80067ea:	f107 0314 	add.w	r3, r7, #20
 80067ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	68b8      	ldr	r0, [r7, #8]
 80067f4:	47a0      	blx	r4
 80067f6:	4603      	mov	r3, r0
 80067f8:	76fb      	strb	r3, [r7, #27]
 80067fa:	7efb      	ldrb	r3, [r7, #27]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 8006800:	7efb      	ldrb	r3, [r7, #27]
 8006802:	e00e      	b.n	8006822 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4619      	mov	r1, r3
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	440a      	add	r2, r1
 8006810:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	3301      	adds	r3, #1
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	3301      	adds	r3, #1
 800681c:	623b      	str	r3, [r7, #32]
 800681e:	e7cc      	b.n	80067ba <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	372c      	adds	r7, #44	; 0x2c
 8006826:	46bd      	mov	sp, r7
 8006828:	bd90      	pop	{r4, r7, pc}

0800682a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/160894903): Add better unit tests that validate flatbuffer values.
  void* out_buffer = nullptr;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff faf5 	bl	8005e28 <_ZNK6tflite6Tensor6bufferEv>
 800683e:	4603      	mov	r3, r0
 8006840:	4619      	mov	r1, r3
 8006842:	6838      	ldr	r0, [r7, #0]
 8006844:	f001 fb0e 	bl	8007e64 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8006848:	6138      	str	r0, [r7, #16]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d015      	beq.n	800687c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8006850:	6938      	ldr	r0, [r7, #16]
 8006852:	f7ff fb8b 	bl	8005f6c <_ZNK6tflite6Buffer4dataEv>
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f001 f940 	bl	8007ae4 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	bf14      	ite	ne
 800686a:	2301      	movne	r3, #1
 800686c:	2300      	moveq	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f001 fb03 	bl	8007e80 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800687a:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 800687c:	697b      	ldr	r3, [r7, #20]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b08d      	sub	sp, #52	; 0x34
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	460b      	mov	r3, r1
 8006896:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 8006898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800689e:	f005 fcb7 	bl	800c210 <abort>

  *result = {};
 80068a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a4:	4618      	mov	r0, r3
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	461a      	mov	r2, r3
 80068aa:	2100      	movs	r1, #0
 80068ac:	f005 fd54 	bl	800c358 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff f87d 	bl	80059b0 <_ZNK6tflite6Tensor4typeEv>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4618      	mov	r0, r3
 80068ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068be:	4619      	mov	r1, r3
 80068c0:	f7fd feca 	bl	8004658 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 80068d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068d6:	e127      	b.n	8006b28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7ff fac2 	bl	8005e62 <_ZNK6tflite6Tensor11is_variableEv>
 80068de:	4603      	mov	r3, r0
 80068e0:	461a      	mov	r2, r3
 80068e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff ff9d 	bl	800682a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f4:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 80068f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 80068fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006900:	2202      	movs	r2, #2
 8006902:	751a      	strb	r2, [r3, #20]
 8006904:	e002      	b.n	800690c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8006906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006908:	2201      	movs	r2, #1
 800690a:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800690c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690e:	f103 0118 	add.w	r1, r3, #24
 8006912:	f107 0210 	add.w	r2, r7, #16
 8006916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff f9ad 	bl	8005c78 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800691e:	4603      	mov	r3, r0
 8006920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006924:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 800692c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006930:	e0fa      	b.n	8006b28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff f82e 	bl	8005994 <_ZNK6tflite6Tensor5shapeEv>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8006948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694a:	4a79      	ldr	r2, [pc, #484]	; (8006b30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 800694c:	609a      	str	r2, [r3, #8]
 800694e:	e013      	b.n	8006978 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff f81f 	bl	8005994 <_ZNK6tflite6Tensor5shapeEv>
 8006956:	4602      	mov	r2, r0
 8006958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695a:	3308      	adds	r3, #8
 800695c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f001 fa9a 	bl	8007e98 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006964:	4603      	mov	r3, r0
 8006966:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800696a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 8006972:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006976:	e0d7      	b.n	8006b28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fa64 	bl	8005e46 <_ZNK6tflite6Tensor12quantizationEv>
 800697e:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	2b00      	cmp	r3, #0
 8006984:	d021      	beq.n	80069ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 8006986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006988:	f7ff fa23 	bl	8005dd2 <_ZNK6tflite22QuantizationParameters5scaleEv>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d01b      	beq.n	80069ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 8006992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006994:	f7ff fa1d 	bl	8005dd2 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006998:	4603      	mov	r3, r0
 800699a:	4618      	mov	r0, r3
 800699c:	f001 f8b0 	bl	8007b00 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 80069a0:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d011      	beq.n	80069ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 80069a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069a8:	f7ff fa21 	bl	8005dee <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80069ac:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 80069b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069b4:	f7ff fa1b 	bl	8005dee <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80069b8:	4603      	mov	r3, r0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 f8d6 	bl	8007b6c <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80069c0:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 80069ca:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80aa 	beq.w	8006b26 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 80069d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069d4:	f7ff f9fd 	bl	8005dd2 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80069d8:	4603      	mov	r3, r0
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 f89d 	bl	8007b1c <_ZNK11flatbuffers6VectorIfE3GetEm>
 80069e2:	eef0 7a40 	vmov.f32	s15, s0
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 80069ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ee:	f7ff f9fe 	bl	8005dee <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 f8c6 	bl	8007b88 <_ZNK11flatbuffers6VectorIxE3GetEm>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
    result->params.zero_point =
 8006a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a02:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8006a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a06:	f7ff f9e4 	bl	8005dd2 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 f877 	bl	8007b00 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8006a12:	4603      	mov	r3, r0
 8006a14:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3310      	adds	r3, #16
 8006a22:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8006a24:	2204      	movs	r2, #4
 8006a26:	210c      	movs	r1, #12
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	4798      	blx	r3
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	e008      	b.n	8006a42 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 8006a38:	2204      	movs	r2, #4
 8006a3a:	210c      	movs	r1, #12
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	4798      	blx	r3
 8006a40:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 8006a42:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d105      	bne.n	8006a56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006a4a:	493a      	ldr	r1, [pc, #232]	; (8006b34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 8006a4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006a4e:	f7fd fccf 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e068      	b.n	8006b28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3310      	adds	r3, #16
 8006a62:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8006a64:	6a38      	ldr	r0, [r7, #32]
 8006a66:	f7fd fc52 	bl	800430e <TfLiteIntArrayGetSizeInBytes>
 8006a6a:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	4619      	mov	r1, r3
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	47a0      	blx	r4
 8006a74:	4603      	mov	r3, r0
 8006a76:	e00c      	b.n	8006a92 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8006a80:	6a38      	ldr	r0, [r7, #32]
 8006a82:	f7fd fc44 	bl	800430e <TfLiteIntArrayGetSizeInBytes>
 8006a86:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8006a88:	2204      	movs	r2, #4
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	47a0      	blx	r4
 8006a90:	4603      	mov	r3, r0
    quantization->zero_point =
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006a9e:	4926      	ldr	r1, [pc, #152]	; (8006b38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 8006aa0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006aa2:	f7fd fca5 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e03e      	b.n	8006b28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aac:	f7ff f991 	bl	8005dd2 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f001 fa07 	bl	8007eca <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006abc:	4603      	mov	r3, r0
 8006abe:	76fb      	strb	r3, [r7, #27]
 8006ac0:	7efb      	ldrb	r3, [r7, #27]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 8006ac6:	7efb      	ldrb	r3, [r7, #27]
 8006ac8:	e02e      	b.n	8006b28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	6a3a      	ldr	r2, [r7, #32]
 8006ad0:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8006ada:	2300      	movs	r3, #0
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	da12      	bge.n	8006b0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8006ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae8:	f7ff f981 	bl	8005dee <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006aec:	4602      	mov	r2, r0
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f001 f848 	bl	8007b88 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4413      	add	r3, r2
 8006b00:	4602      	mov	r2, r0
 8006b02:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	3301      	adds	r3, #1
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b0a:	e7e8      	b.n	8006ade <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8006b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b0e:	f7ff f97c 	bl	8005e0a <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8006b12:	4602      	mov	r2, r0
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8006b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3734      	adds	r7, #52	; 0x34
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd90      	pop	{r4, r7, pc}
 8006b30:	08012b60 	.word	0x08012b60
 8006b34:	08010808 	.word	0x08010808
 8006b38:	08010838 	.word	0x08010838

08006b3c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  *result = {};
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	6053      	str	r3, [r2, #4]
 8006b54:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006b56:	68b8      	ldr	r0, [r7, #8]
 8006b58:	f7fe ff2a 	bl	80059b0 <_ZNK6tflite6Tensor4typeEv>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	3308      	adds	r3, #8
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	4619      	mov	r1, r3
 8006b68:	f7fd fd76 	bl	8004658 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	75fb      	strb	r3, [r7, #23]
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	e027      	b.n	8006bca <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68b8      	ldr	r0, [r7, #8]
 8006b7e:	f7ff fe54 	bl	800682a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8006b82:	4602      	mov	r2, r0
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8006b88:	68b8      	ldr	r0, [r7, #8]
 8006b8a:	f7fe ff03 	bl	8005994 <_ZNK6tflite6Tensor5shapeEv>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	e010      	b.n	8006bc8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006ba6:	68b8      	ldr	r0, [r7, #8]
 8006ba8:	f7fe fef4 	bl	8005994 <_ZNK6tflite6Tensor5shapeEv>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f001 f96f 	bl	8007e98 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75bb      	strb	r3, [r7, #22]
 8006bbe:	7dbb      	ldrb	r3, [r7, #22]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8006bc4:	7dbb      	ldrb	r3, [r7, #22]
 8006bc6:	e000      	b.n	8006bca <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08012b60 	.word	0x08012b60

08006bd8 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8006be4:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	605a      	str	r2, [r3, #4]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	609a      	str	r2, [r3, #8]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	731a      	strb	r2, [r3, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	611a      	str	r2, [r3, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	615a      	str	r2, [r3, #20]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	08012b84 	.word	0x08012b84

08006c1c <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	4a04      	ldr	r2, [pc, #16]	; (8006c38 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	08012b84 	.word	0x08012b84

08006c3c <_ZN6tflite14MicroAllocatorD0Ev>:
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff ffe9 	bl	8006c1c <_ZN6tflite14MicroAllocatorD1Ev>
 8006c4a:	2118      	movs	r1, #24
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f005 f9f7 	bl	800c040 <_ZdlPvj>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8006c68:	2110      	movs	r1, #16
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7fe ff69 	bl	8005b42 <_ZN6tflite14AlignPointerUpEPhj>
 8006c70:	6178      	str	r0, [r7, #20]
  if (aligned_arena != tensor_arena) {
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d007      	beq.n	8006c8a <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x2e>
    TF_LITE_REPORT_ERROR(
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	490c      	ldr	r1, [pc, #48]	; (8006cb4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x58>)
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fd fbb3 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "%d bytes lost due to alignment. To avoid this loss, please make sure "
        "the tensor_arena is 16 bytes aligned.",
        aligned_arena - tensor_arena);
  }
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	441a      	add	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f002 fd7c 	bl	8009798 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f807 	bl	8006cb8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8006caa:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	08010868 	.word	0x08010868

08006cb8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8006cb8:	b590      	push	{r4, r7, lr}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8006cc8:	f005 faa2 	bl	800c210 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8006cd2:	f005 fa9d 	bl	800c210 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	330c      	adds	r3, #12
 8006cdc:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 8006cde:	2204      	movs	r2, #4
 8006ce0:	2118      	movs	r1, #24
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
 8006ce6:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4619      	mov	r1, r3
 8006cec:	2018      	movs	r0, #24
 8006cee:	f7fd fbb2 	bl	8004456 <_ZnwjPv>
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff ff6d 	bl	8006bd8 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8006cfe:	60bc      	str	r4, [r7, #8]
  return allocator;
 8006d00:	68bb      	ldr	r3, [r7, #8]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd90      	pop	{r4, r7, pc}
	...

08006d0c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations,
    TfLiteEvalTensor** eval_tensors) {
 8006d0c:	b590      	push	{r4, r7, lr}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x18>
 8006d20:	f005 fa76 	bl	800c210 <abort>

  if (model_is_allocating_) {
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	7b1b      	ldrb	r3, [r3, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x30>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	491e      	ldr	r1, [pc, #120]	; (8006dac <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xa0>)
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fd fb5c 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e032      	b.n	8006da2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x96>
  }

  model_is_allocating_ = true;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(AllocateTfLiteEvalTensors(model, eval_tensors));
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	331c      	adds	r3, #28
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	4798      	blx	r3
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x54>
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	e020      	b.n	8006da2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x96>
  TF_LITE_ENSURE_STATUS(
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3314      	adds	r3, #20
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	4798      	blx	r3
 8006d70:	4603      	mov	r3, r0
 8006d72:	75bb      	strb	r3, [r7, #22]
 8006d74:	7dbb      	ldrb	r3, [r7, #22]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x72>
 8006d7a:	7dbb      	ldrb	r3, [r7, #22]
 8006d7c:	e011      	b.n	8006da2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x96>
      AllocateNodeAndRegistrations(model, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3318      	adds	r3, #24
 8006d84:	681c      	ldr	r4, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	47a0      	blx	r4
 8006d92:	4603      	mov	r3, r0
 8006d94:	757b      	strb	r3, [r7, #21]
 8006d96:	7d7b      	ldrb	r3, [r7, #21]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x94>
 8006d9c:	7d7b      	ldrb	r3, [r7, #21]
 8006d9e:	e000      	b.n	8006da2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x96>
      model, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd90      	pop	{r4, r7, pc}
 8006daa:	bf00      	nop
 8006dac:	080108d4 	.word	0x080108d4

08006db0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, TfLiteEvalTensor* eval_tensors) {
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  if (!model_is_allocating_) {
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	f083 0301 	eor.w	r3, r3, #1
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d007      	beq.n	8006dda <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	491b      	ldr	r1, [pc, #108]	; (8006e3c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor+0x8c>)
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fd fb0d 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e02c      	b.n	8006e34 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor+0x84>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fc63 	bl	80076a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8006de2:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor+0x3e>
 8006dea:	f005 fa11 	bl	800c210 <abort>

  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors));
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	332c      	adds	r3, #44	; 0x2c
 8006df4:	681c      	ldr	r4, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	47a0      	blx	r4
 8006e00:	4603      	mov	r3, r0
 8006e02:	74fb      	strb	r3, [r7, #19]
 8006e04:	7cfb      	ldrb	r3, [r7, #19]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor+0x5e>
 8006e0a:	7cfb      	ldrb	r3, [r7, #19]
 8006e0c:	e012      	b.n	8006e34 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor+0x84>
  TF_LITE_ENSURE_STATUS(AllocateVariables(subgraph, eval_tensors));
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3320      	adds	r3, #32
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6979      	ldr	r1, [r7, #20]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	4798      	blx	r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	74bb      	strb	r3, [r7, #18]
 8006e22:	7cbb      	ldrb	r3, [r7, #18]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor+0x7c>
 8006e28:	7cbb      	ldrb	r3, [r7, #18]
 8006e2a:	e003      	b.n	8006e34 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor+0x84>

  model_is_allocating_ = false;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd90      	pop	{r4, r7, pc}
 8006e3c:	0801092c 	.word	0x0801092c

08006e40 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6858      	ldr	r0, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2210      	movs	r2, #16
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	4798      	blx	r3
 8006e5e:	4603      	mov	r3, r0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
  // A consistency check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	691c      	ldr	r4, [r3, #16]
          memory_allocator_->GetTail()) {
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f002 fd80 	bl	800998c <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 8006e8c:	4603      	mov	r3, r0
  if (scratch_buffer_handles_ != nullptr &&
 8006e8e:	429c      	cmp	r4, r3
 8006e90:	d001      	beq.n	8006e96 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x30>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d007      	beq.n	8006eac <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x44>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	491d      	ldr	r1, [pc, #116]	; (8006f18 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb0>)
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fd faa4 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Internal error: AllocateFromTail can not be called "
                         "between two RequestScratchBufferInArena calls.");
    return kTfLiteError;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e030      	b.n	8006f0e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }

  internal::ScratchBufferHandle* handle =
      reinterpret_cast<internal::ScratchBufferHandle*>(
          memory_allocator_->AllocateFromTail(
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6858      	ldr	r0, [r3, #4]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
              sizeof(internal::ScratchBufferHandle),
              alignof(internal::ScratchBufferHandle)));
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	681b      	ldr	r3, [r3, #0]
          memory_allocator_->AllocateFromTail(
 8006eba:	2204      	movs	r2, #4
 8006ebc:	210c      	movs	r1, #12
 8006ebe:	4798      	blx	r3
 8006ec0:	6178      	str	r0, [r7, #20]
  if (handle == nullptr) {
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d108      	bne.n	8006eda <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x72>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	4913      	ldr	r1, [pc, #76]	; (8006f1c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb4>)
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fd fa8d 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e019      	b.n	8006f0e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }
  *handle = {};
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	461a      	mov	r2, r3
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	6053      	str	r3, [r2, #4]
 8006ee4:	6093      	str	r3, [r2, #8]
  handle->bytes = bytes;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	605a      	str	r2, [r3, #4]
  handle->node_idx = node_id;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	609a      	str	r2, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]
  scratch_buffer_count_ += 1;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	615a      	str	r2, [r3, #20]
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd90      	pop	{r4, r7, pc}
 8006f16:	bf00      	nop
 8006f18:	08010978 	.word	0x08010978
 8006f1c:	080109dc 	.word	0x080109dc

08006f20 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695a      	ldr	r2, [r3, #20]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d809      	bhi.n	8006f48 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6898      	ldr	r0, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	490b      	ldr	r1, [pc, #44]	; (8006f6c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x4c>)
 8006f40:	f7fd fa56 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
 8006f44:	2300      	movs	r3, #0
 8006f46:	e00c      	b.n	8006f62 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x42>
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6919      	ldr	r1, [r3, #16]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	4613      	mov	r3, r2
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	3b0c      	subs	r3, #12
 8006f5e:	440b      	add	r3, r1
 8006f60:	681b      	ldr	r3, [r3, #0]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08010a14 	.word	0x08010a14

08006f70 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, NodeAndRegistration** node_and_registrations) {
 8006f70:	b5b0      	push	{r4, r5, r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(node_and_registrations);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x16>
 8006f82:	f005 f945 	bl	800c210 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fb8d 	bl	80076a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8006f8e:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x2a>
 8006f96:	f005 f93b 	bl	800c210 <abort>

  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685d      	ldr	r5, [r3, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 8006fa8:	6978      	ldr	r0, [r7, #20]
 8006faa:	f7fe ffd1 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fe45 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47a0      	blx	r4
 8006fc8:	6138      	str	r0, [r7, #16]
  if (output == nullptr) {
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d107      	bne.n	8006fe0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
    TF_LITE_REPORT_ERROR(
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	4906      	ldr	r1, [pc, #24]	; (8006ff0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x80>)
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fd fa0a 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e003      	b.n	8006fe8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x78>
  }
  *node_and_registrations = output;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bdb0      	pop	{r4, r5, r7, pc}
 8006ff0:	08010a40 	.word	0x08010a40

08006ff4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 8006ff4:	b5b0      	push	{r4, r5, r7, lr}
 8006ff6:	b098      	sub	sp, #96	; 0x60
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x18>
 8007008:	f005 f902 	bl	800c210 <abort>
  TFLITE_DCHECK(node_and_registrations != nullptr);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
 8007012:	f005 f8fd 	bl	800c210 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fb45 	bl	80076a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800701e:	6538      	str	r0, [r7, #80]	; 0x50
  TFLITE_DCHECK(subgraph != nullptr);
 8007020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x36>
 8007026:	f005 f8f3 	bl	800c210 <abort>

  TfLiteStatus status = kTfLiteOk;
 800702a:	2300      	movs	r3, #0
 800702c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  auto* opcodes = model->operator_codes();
 8007030:	68b8      	ldr	r0, [r7, #8]
 8007032:	f7fe ffc6 	bl	8005fc2 <_ZNK6tflite5Model14operator_codesEv>
 8007036:	64b8      	str	r0, [r7, #72]	; 0x48
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	f107 0320 	add.w	r3, r7, #32
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff f826 	bl	8006094 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8007048:	2300      	movs	r3, #0
 800704a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800704c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800704e:	f7fe ff7f 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 8007052:	4603      	mov	r3, r0
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fdf3 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800705a:	4602      	mov	r2, r0
 800705c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800705e:	4293      	cmp	r3, r2
 8007060:	bf34      	ite	cc
 8007062:	2301      	movcc	r3, #1
 8007064:	2300      	movcs	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 812c 	beq.w	80072c6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d2>
    const auto* op = subgraph->operators()->Get(i);
 800706e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007070:	f7fe ff6e 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 8007074:	4603      	mov	r3, r0
 8007076:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fdef 	bl	8007c5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800707e:	6478      	str	r0, [r7, #68]	; 0x44
    const size_t index = op->opcode_index();
 8007080:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007082:	f7fe ff02 	bl	8005e8a <_ZNK6tflite8Operator12opcode_indexEv>
 8007086:	6438      	str	r0, [r7, #64]	; 0x40
    if (index >= opcodes->size()) {
 8007088:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800708a:	f000 fe0d 	bl	8007ca8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800708e:	4602      	mov	r2, r0
 8007090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007092:	4293      	cmp	r3, r2
 8007094:	bf2c      	ite	cs
 8007096:	2301      	movcs	r3, #1
 8007098:	2300      	movcc	r3, #0
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xbe>
      TF_LITE_REPORT_ERROR(error_reporter_,
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070a6:	498d      	ldr	r1, [pc, #564]	; (80072dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2e8>)
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd f9a1 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 80070ae:	2401      	movs	r4, #1
 80070b0:	e10a      	b.n	80072c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    auto* opcode = (*opcodes)[index];
 80070b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80070b6:	f000 ff21 	bl	8007efc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 80070ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 80070c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	461a      	mov	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 80070d2:	3324      	adds	r3, #36	; 0x24
 80070d4:	4602      	mov	r2, r0
 80070d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80070d8:	f7fd ffbc 	bl	8005054 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 80070dc:	4603      	mov	r3, r0
 80070de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (status != kTfLiteOk) {
 80070e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d011      	beq.n	800710e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
      TF_LITE_REPORT_ERROR(error_reporter_,
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689c      	ldr	r4, [r3, #8]
 80070ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80070f0:	f7fd ff82 	bl	8004ff8 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 80070f4:	4603      	mov	r3, r0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fd ff58 	bl	8004fac <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461a      	mov	r2, r3
 8007100:	4977      	ldr	r1, [pc, #476]	; (80072e0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ec>)
 8007102:	4620      	mov	r0, r4
 8007104:	f7fd f974 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(opcode->builtin_code()));
      return status;
 8007108:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 800710c:	e0dc      	b.n	80072c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    const auto* registration = node_and_registrations[i].registration;
 800710e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	461a      	mov	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	4413      	add	r3, r2
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	63bb      	str	r3, [r7, #56]	; 0x38
    if (registration == nullptr) {
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	d108      	bne.n	800713a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x146>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800712e:	496d      	ldr	r1, [pc, #436]	; (80072e4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f0>)
 8007130:	4618      	mov	r0, r3
 8007132:	f7fd f95d 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 8007136:	2401      	movs	r4, #1
 8007138:	e0c6      	b.n	80072c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 800713e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    const char* custom_data = nullptr;
 8007142:	2300      	movs	r3, #0
 8007144:	65bb      	str	r3, [r7, #88]	; 0x58
    size_t custom_data_size = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char* builtin_data = nullptr;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]

    if (op_type == BuiltinOperator_CUSTOM) {
 800714e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007152:	2b20      	cmp	r3, #32
 8007154:	d11b      	bne.n	800718e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19a>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 8007156:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007158:	f7fe fec2 	bl	8005ee0 <_ZNK6tflite8Operator14custom_optionsEv>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	bf14      	ite	ne
 8007162:	2301      	movne	r3, #1
 8007164:	2300      	moveq	r3, #0
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d059      	beq.n	8007220 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 800716c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800716e:	f7fe feb7 	bl	8005ee0 <_ZNK6tflite8Operator14custom_optionsEv>
 8007172:	4603      	mov	r3, r0
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fe83 	bl	8007e80 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800717a:	65b8      	str	r0, [r7, #88]	; 0x58
        custom_data_size = op->custom_options()->size();
 800717c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800717e:	f7fe feaf 	bl	8005ee0 <_ZNK6tflite8Operator14custom_optionsEv>
 8007182:	4603      	mov	r3, r0
 8007184:	4618      	mov	r0, r3
 8007186:	f000 fcad 	bl	8007ae4 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800718a:	6578      	str	r0, [r7, #84]	; 0x54
 800718c:	e048      	b.n	8007220 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
      }
    } else {
      if (op->custom_options() != nullptr) {
 800718e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007190:	f7fe fea6 	bl	8005ee0 <_ZNK6tflite8Operator14custom_optionsEv>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	bf14      	ite	ne
 800719a:	2301      	movne	r3, #1
 800719c:	2300      	moveq	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00e      	beq.n	80071c2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ce>
        TF_LITE_REPORT_ERROR(
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689c      	ldr	r4, [r3, #8]
 80071a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fd fefd 	bl	8004fac <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80071b2:	4603      	mov	r3, r0
 80071b4:	461a      	mov	r2, r3
 80071b6:	494c      	ldr	r1, [pc, #304]	; (80072e8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f4>)
 80071b8:	4620      	mov	r0, r4
 80071ba:	f7fd f919 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 80071be:	2401      	movs	r4, #1
 80071c0:	e082      	b.n	80072c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3318      	adds	r3, #24
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80071ce:	4611      	mov	r1, r2
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
 80071d4:	6338      	str	r0, [r7, #48]	; 0x30
      if (parser == nullptr) {
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10e      	bne.n	80071fa <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x206>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	689c      	ldr	r4, [r3, #8]
 80071e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fd fee1 	bl	8004fac <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80071ea:	4603      	mov	r3, r0
 80071ec:	461a      	mov	r2, r3
 80071ee:	493f      	ldr	r1, [pc, #252]	; (80072ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f8>)
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7fd f8fd 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 80071f6:	2401      	movs	r4, #1
 80071f8:	e066      	b.n	80072c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6899      	ldr	r1, [r3, #8]
 80071fe:	f107 031c 	add.w	r3, r7, #28
 8007202:	f107 0220 	add.w	r2, r7, #32
 8007206:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8007208:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800720a:	47a0      	blx	r4
 800720c:	4603      	mov	r3, r0
 800720e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
 800721a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800721e:	e053      	b.n	80072c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	685c      	ldr	r4, [r3, #4]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689d      	ldr	r5, [r3, #8]
 8007228:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800722a:	f7fe fe3d 	bl	8005ea8 <_ZNK6tflite8Operator6inputsEv>
 800722e:	4602      	mov	r2, r0
 8007230:	f107 0318 	add.w	r3, r7, #24
 8007234:	4629      	mov	r1, r5
 8007236:	4620      	mov	r0, r4
 8007238:	f000 fe2e 	bl	8007e98 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007242:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x25c>
 800724a:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 800724e:	e03b      	b.n	80072c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685c      	ldr	r4, [r3, #4]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689d      	ldr	r5, [r3, #8]
 8007258:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800725a:	f7fe fe33 	bl	8005ec4 <_ZNK6tflite8Operator7outputsEv>
 800725e:	4602      	mov	r2, r0
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4629      	mov	r1, r5
 8007266:	4620      	mov	r0, r4
 8007268:	f000 fe16 	bl	8007e98 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007272:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
 800727a:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
 800727e:	e023      	b.n	80072c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 8007280:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	461a      	mov	r2, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	4413      	add	r3, r2
 8007290:	62bb      	str	r3, [r7, #40]	; 0x28
    *node = {};
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	4618      	mov	r0, r3
 8007296:	2324      	movs	r3, #36	; 0x24
 8007298:	461a      	mov	r2, r3
 800729a:	2100      	movs	r1, #0
 800729c:	f005 f85c 	bl	800c358 <memset>
    node->inputs = inputs_array;
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072b6:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 80072b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 80072be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c0:	3301      	adds	r3, #1
 80072c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c4:	e6c2      	b.n	800704c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
  }

  return kTfLiteOk;
 80072c6:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 80072c8:	f107 0320 	add.w	r3, r7, #32
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 f881 	bl	80083d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 80072d2:	4623      	mov	r3, r4
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3760      	adds	r7, #96	; 0x60
 80072d8:	46bd      	mov	sp, r7
 80072da:	bdb0      	pop	{r4, r5, r7, pc}
 80072dc:	08010a78 	.word	0x08010a78
 80072e0:	08010aa4 	.word	0x08010aa4
 80072e4:	08010ad4 	.word	0x08010ad4
 80072e8:	08010af8 	.word	0x08010af8
 80072ec:	08010b40 	.word	0x08010b40

080072f0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 80072f0:	b590      	push	{r4, r7, lr}
 80072f2:	b089      	sub	sp, #36	; 0x24
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f9d1 	bl	80076a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8007306:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 800730e:	f004 ff7f 	bl	800c210 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor =
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3324      	adds	r3, #36	; 0x24
 8007318:	681c      	ldr	r4, [r3, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	47a0      	blx	r4
 8007324:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/false) !=
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3328      	adds	r3, #40	; 0x28
 800732c:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800732e:	2300      	movs	r3, #0
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	47a0      	blx	r4
 8007340:	4603      	mov	r3, r0
                                         /*allocate_temp=*/false) !=
 8007342:	2b00      	cmp	r3, #0
 8007344:	bf14      	ite	ne
 8007346:	2301      	movne	r3, #1
 8007348:	2300      	moveq	r3, #0
 800734a:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x70>
      kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	490c      	ldr	r1, [pc, #48]	; (8007388 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd f84a 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 800735c:	2300      	movs	r3, #0
 800735e:	e00e      	b.n	800737e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
  }

  if (eval_tensors != nullptr) {
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8c>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4413      	add	r3, r2
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 800737c:	693b      	ldr	r3, [r7, #16]
}
 800737e:	4618      	mov	r0, r3
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	bd90      	pop	{r4, r7, pc}
 8007386:	bf00      	nop
 8007388:	08010b60 	.word	0x08010b60

0800738c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b089      	sub	sp, #36	; 0x24
 8007390:	af02      	add	r7, sp, #8
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f983 	bl	80076a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80073a2:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 80073aa:	f004 ff31 	bl	800c210 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6858      	ldr	r0, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3310      	adds	r3, #16
 80073ba:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 80073bc:	2204      	movs	r2, #4
 80073be:	2140      	movs	r1, #64	; 0x40
 80073c0:	4798      	blx	r3
 80073c2:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3328      	adds	r3, #40	; 0x28
 80073ca:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80073cc:	2301      	movs	r3, #1
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	47a0      	blx	r4
 80073de:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf14      	ite	ne
 80073e4:	2301      	movne	r3, #1
 80073e6:	2300      	moveq	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x72>
    TF_LITE_REPORT_ERROR(
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	490c      	ldr	r1, [pc, #48]	; (8007424 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fc fffb 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e00e      	b.n	800741c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x90>
  }

  if (eval_tensors != nullptr) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	4613      	mov	r3, r2
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4413      	add	r3, r2
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 800741a:	693b      	ldr	r3, [r7, #16]
}
 800741c:	4618      	mov	r0, r3
 800741e:	371c      	adds	r7, #28
 8007420:	46bd      	mov	sp, r7
 8007422:	bd90      	pop	{r4, r7, pc}
 8007424:	08010bac 	.word	0x08010bac

08007428 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3314      	adds	r3, #20
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4610      	mov	r0, r2
 8007440:	4798      	blx	r3
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, TfLiteEvalTensor** eval_tensors) {
 800744c:	b5b0      	push	{r4, r5, r7, lr}
 800744e:	b08c      	sub	sp, #48	; 0x30
 8007450:	af02      	add	r7, sp, #8
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(eval_tensors != nullptr);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16>
 800745e:	f004 fed7 	bl	800c210 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f91f 	bl	80076a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800746a:	6238      	str	r0, [r7, #32]
  TFLITE_DCHECK(subgraph != nullptr);
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x2a>
 8007472:	f004 fecd 	bl	800c210 <abort>

  size_t alloc_count = subgraph->tensors()->size();
 8007476:	6a38      	ldr	r0, [r7, #32]
 8007478:	f7fe fd40 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 800747c:	4603      	mov	r3, r0
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fbaa 	bl	8007bd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007484:	61f8      	str	r0, [r7, #28]
  TfLiteEvalTensor* tensors =
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6858      	ldr	r0, [r3, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	330c      	adds	r3, #12
 8007492:	681c      	ldr	r4, [r3, #0]
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	4613      	mov	r3, r2
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	2204      	movs	r2, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	47a0      	blx	r4
 80074a4:	61b8      	str	r0, [r7, #24]
  if (tensors == nullptr) {
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10c      	bne.n	80074c6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6898      	ldr	r0, [r3, #8]
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	4613      	mov	r3, r2
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	461a      	mov	r2, r3
 80074bc:	4921      	ldr	r1, [pc, #132]	; (8007544 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf8>)
 80074be:	f7fc ff97 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate memory for context->eval_tensors, "
                         "%d bytes required",
                         sizeof(TfLiteEvalTensor) * alloc_count);
    return kTfLiteError;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e03a      	b.n	800753c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  }

  for (size_t i = 0; i < alloc_count; ++i) {
 80074c6:	2300      	movs	r3, #0
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
 80074ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d230      	bcs.n	8007534 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe8>
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 80074d6:	6a38      	ldr	r0, [r7, #32]
 80074d8:	f7fe fd10 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 80074dc:	4603      	mov	r3, r0
 80074de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fb87 	bl	8007bf4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80074e6:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80074e8:	68b8      	ldr	r0, [r7, #8]
 80074ea:	f7fe fd86 	bl	8005ffa <_ZNK6tflite5Model7buffersEv>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &tensors[i]);
 80074f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f4:	4613      	mov	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	461a      	mov	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	4413      	add	r3, r2
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	460b      	mov	r3, r1
 8007506:	4602      	mov	r2, r0
 8007508:	4629      	mov	r1, r5
 800750a:	4620      	mov	r0, r4
 800750c:	f7ff fb16 	bl	8006b3c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 8007510:	4603      	mov	r3, r0
 8007512:	75fb      	strb	r3, [r7, #23]
    if (status != kTfLiteOk) {
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe0>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007520:	4909      	ldr	r1, [pc, #36]	; (8007548 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xfc>)
 8007522:	4618      	mov	r0, r3
 8007524:	f7fc ff64 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 8007528:	2301      	movs	r3, #1
 800752a:	e007      	b.n	800753c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  for (size_t i = 0; i < alloc_count; ++i) {
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	3301      	adds	r3, #1
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
 8007532:	e7ca      	b.n	80074ca <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7e>
    }
  }
  *eval_tensors = tensors;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3728      	adds	r7, #40	; 0x28
 8007540:	46bd      	mov	sp, r7
 8007542:	bdb0      	pop	{r4, r5, r7, pc}
 8007544:	08010bf0 	.word	0x08010bf0
 8007548:	08010c38 	.word	0x08010c38

0800754c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 800754c:	b5b0      	push	{r4, r5, r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007558:	2300      	movs	r3, #0
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	68b8      	ldr	r0, [r7, #8]
 800755e:	f7fe fccd 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 8007562:	4603      	mov	r3, r0
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fb37 	bl	8007bd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800756a:	4602      	mov	r2, r0
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4293      	cmp	r3, r2
 8007570:	bf34      	ite	cc
 8007572:	2301      	movcc	r3, #1
 8007574:	2300      	movcs	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d04f      	beq.n	800761c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 800757c:	68b8      	ldr	r0, [r7, #8]
 800757e:	f7fe fcbd 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 8007582:	4603      	mov	r3, r0
 8007584:	69f9      	ldr	r1, [r7, #28]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fb34 	bl	8007bf4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800758c:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 800758e:	69b8      	ldr	r0, [r7, #24]
 8007590:	f7fe fc67 	bl	8005e62 <_ZNK6tflite6Tensor11is_variableEv>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d03c      	beq.n	8007614 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	f107 0210 	add.w	r2, r7, #16
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fbc2 	bl	8005d3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75fb      	strb	r3, [r7, #23]
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	e02c      	b.n	800761e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6858      	ldr	r0, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	681d      	ldr	r5, [r3, #0]
 80075d2:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	461a      	mov	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 80075e4:	2210      	movs	r2, #16
 80075e6:	47a8      	blx	r5
 80075e8:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 80075ea:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	4613      	mov	r3, r2
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	461a      	mov	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4413      	add	r3, r2
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d108      	bne.n	8007614 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4907      	ldr	r1, [pc, #28]	; (8007628 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800760a:	4618      	mov	r0, r3
 800760c:	f7fc fef0 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8007610:	2301      	movs	r3, #1
 8007612:	e004      	b.n	800761e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
 800761a:	e79f      	b.n	800755c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bdb0      	pop	{r4, r5, r7, pc}
 8007626:	bf00      	nop
 8007628:	08010c58 	.word	0x08010c58

0800762c <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6858      	ldr	r0, [r3, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8007648:	2204      	movs	r2, #4
 800764a:	2140      	movs	r1, #64	; 0x40
 800764c:	4798      	blx	r3
 800764e:	4603      	mov	r3, r0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, const SubGraph* subgraph, TfLiteTensor* tensor,
    int tensor_index, bool allocate_temp) {
 8007658:	b5b0      	push	{r4, r5, r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
  // TODO(b/160894903): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once all kernels have been ported
  // to the new API this can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp, *subgraph->tensors()->Get(tensor_index),
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fe fc46 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 8007670:	4602      	mov	r2, r0
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f000 fabc 	bl	8007bf4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800767c:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800767e:	68b8      	ldr	r0, [r7, #8]
 8007680:	f7fe fcbb 	bl	8005ffa <_ZNK6tflite5Model7buffersEv>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	4603      	mov	r3, r0
 8007694:	462a      	mov	r2, r5
 8007696:	4620      	mov	r0, r4
 8007698:	f7ff f8f6 	bl	8006888 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 800769c:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080076a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 80076b2:	6838      	ldr	r0, [r7, #0]
 80076b4:	f7fe fc93 	bl	8005fde <_ZNK6tflite5Model9subgraphsEv>
 80076b8:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fb28 	bl	8007d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	bf14      	ite	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	2300      	moveq	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d007      	beq.n	80076e0 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4907      	ldr	r1, [pc, #28]	; (80076f4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fc fe8a 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 80076dc:	2300      	movs	r3, #0
 80076de:	e005      	b.n	80076ec <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x44>
  }
  return (*subgraphs)[0];
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fbb0 	bl	8007e48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80076e8:	4603      	mov	r3, r0
 80076ea:	bf00      	nop
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	08010c88 	.word	0x08010c88

080076f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, const SubGraph* subgraph,
    TfLiteEvalTensor* eval_tensors) {
 80076f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076fa:	b0a7      	sub	sp, #156	; 0x9c
 80076fc:	af02      	add	r7, sp, #8
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	2400      	movs	r4, #0
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689d      	ldr	r5, [r3, #8]
                                        memory_allocator_->GetHead(),
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685b      	ldr	r3, [r3, #4]
                                        memory_allocator_->GetTail());
 8007710:	4618      	mov	r0, r3
 8007712:	f002 f92f 	bl	8009974 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 8007716:	4606      	mov	r6, r0
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4618      	mov	r0, r3
 800771e:	f002 f935 	bl	800998c <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 8007722:	4603      	mov	r3, r0
 8007724:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8007728:	4632      	mov	r2, r6
 800772a:	4629      	mov	r1, r5
 800772c:	f001 fffa 	bl	8009724 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6899      	ldr	r1, [r3, #8]
 8007734:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007738:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fcdf 	bl	8006100 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>
    TF_LITE_ENSURE_STATUS(
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fe fbda 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 8007748:	4603      	mov	r3, r0
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fa44 	bl	8007bd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007750:	4601      	mov	r1, r0
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	695a      	ldr	r2, [r3, #20]
 8007756:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fcec 	bl	8006138 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>
 8007760:	4603      	mov	r3, r0
 8007762:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8007766:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x7e>
 800776e:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 8007772:	2500      	movs	r5, #0
 8007774:	e0fe      	b.n	8007974 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x27c>
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
 8007776:	2300      	movs	r3, #0
 8007778:	63fb      	str	r3, [r7, #60]	; 0x3c
    TF_LITE_ENSURE_STATUS(
 800777a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800777e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fef1 	bl	800656c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8007790:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0xa8>
 8007798:	f897 408e 	ldrb.w	r4, [r7, #142]	; 0x8e
 800779c:	2500      	movs	r5, #0
 800779e:	e0e9      	b.n	8007974 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x27c>
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(
 80077a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077a2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	f7fe fd23 	bl	80061f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80077b4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0xcc>
 80077bc:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 80077c0:	2500      	movs	r5, #0
 80077c2:	e0d7      	b.n	8007974 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x27c>
        builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe ff48 	bl	8006664 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 80077da:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0xf2>
 80077e2:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80077e6:	2500      	movs	r5, #0
 80077e8:	e0c4      	b.n	8007974 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x27c>
    const AllocationInfo* allocation_info = builder.Finish();
 80077ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fcb6 	bl	8006160 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>
 80077f4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
 80077f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80077fc:	4618      	mov	r0, r3
 80077fe:	f002 f8d1 	bl	80099a4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8007802:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
 8007806:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800780a:	2201      	movs	r2, #1
 800780c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007810:	4618      	mov	r0, r3
 8007812:	f002 f817 	bl	8009844 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
 8007816:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800781a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10f      	bne.n	8007842 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14a>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6898      	ldr	r0, [r3, #8]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6899      	ldr	r1, [r3, #8]
 800782a:	4b59      	ldr	r3, [pc, #356]	; (8007990 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x298>)
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	f240 4313 	movw	r3, #1043	; 0x413
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4b57      	ldr	r3, [pc, #348]	; (8007994 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x29c>)
 8007836:	4a58      	ldr	r2, [pc, #352]	; (8007998 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x2a0>)
 8007838:	f7fc fdf3 	bl	8004422 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800783c:	2401      	movs	r4, #1
 800783e:	2500      	movs	r5, #0
 8007840:	e098      	b.n	8007974 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x27c>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8007842:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007846:	f107 0310 	add.w	r3, r7, #16
 800784a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800784e:	4618      	mov	r0, r3
 8007850:	f004 f8be 	bl	800b9d0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689d      	ldr	r5, [r3, #8]
 8007858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe fc8b 	bl	8006178 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8007862:	4603      	mov	r3, r0
 8007864:	f107 0110 	add.w	r1, r7, #16
 8007868:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800786c:	4628      	mov	r0, r5
 800786e:	f7fe ff3f 	bl	80066f0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007878:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x190>
 8007880:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 8007884:	2500      	movs	r5, #0
 8007886:	e06b      	b.n	8007960 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x268>
        CreatePlan(error_reporter_, &planner, allocation_info, builder.Size()));

    size_t actual_available_arena_size =
        memory_allocator_->GetAvailableMemory();
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	4618      	mov	r0, r3
 800788e:	f002 f889 	bl	80099a4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8007892:	67b8      	str	r0, [r7, #120]	; 0x78
    // Make sure we have enough arena size.
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8007894:	f107 0310 	add.w	r3, r7, #16
 8007898:	4618      	mov	r0, r3
 800789a:	f004 fb52 	bl	800bf42 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800789e:	4602      	mov	r2, r0
 80078a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bf34      	ite	cc
 80078a6:	2301      	movcc	r3, #1
 80078a8:	2300      	movcs	r3, #0
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00f      	beq.n	80078d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x1d8>
      TF_LITE_REPORT_ERROR(
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689c      	ldr	r4, [r3, #8]
 80078b4:	f107 0310 	add.w	r3, r7, #16
 80078b8:	4618      	mov	r0, r3
 80078ba:	f004 fb42 	bl	800bf42 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 80078be:	4602      	mov	r2, r0
 80078c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c2:	4936      	ldr	r1, [pc, #216]	; (800799c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x2a4>)
 80078c4:	4620      	mov	r0, r4
 80078c6:	f7fc fd93 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Arena size is too small for activation buffers. Needed %d but only "
          "%d was available.",
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
 80078ca:	2401      	movs	r4, #1
 80078cc:	2500      	movs	r5, #0
 80078ce:	e047      	b.n	8007960 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x268>
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689d      	ldr	r5, [r3, #8]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4618      	mov	r0, r3
 80078da:	f002 f84b 	bl	8009974 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 80078de:	4606      	mov	r6, r0
 80078e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fc47 	bl	8006178 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f107 0110 	add.w	r1, r7, #16
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078f6:	4632      	mov	r2, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	f7fe ff53 	bl	80067a4 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 80078fe:	4603      	mov	r3, r0
 8007900:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007904:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x21c>
 800790c:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8007910:	2500      	movs	r5, #0
 8007912:	e025      	b.n	8007960 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x268>
                                     memory_allocator_->GetHead(),
                                     allocation_info, builder.Size()));
    // Allocate the planned area, so the allocator knows it's used.
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685e      	ldr	r6, [r3, #4]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	685b      	ldr	r3, [r3, #4]
                                            /*alignment=*/1);
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3308      	adds	r3, #8
 8007920:	681d      	ldr	r5, [r3, #0]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8007922:	f107 0310 	add.w	r3, r7, #16
 8007926:	4618      	mov	r0, r3
 8007928:	f004 fb0b 	bl	800bf42 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800792c:	4603      	mov	r3, r0
 800792e:	2201      	movs	r2, #1
 8007930:	4619      	mov	r1, r3
 8007932:	4630      	mov	r0, r6
 8007934:	47a8      	blx	r5
 8007936:	6738      	str	r0, [r7, #112]	; 0x70
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
 8007938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10f      	bne.n	800795e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x266>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6898      	ldr	r0, [r3, #8]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6899      	ldr	r1, [r3, #8]
 8007946:	4b16      	ldr	r3, [pc, #88]	; (80079a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x2a8>)
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	f240 432c 	movw	r3, #1068	; 0x42c
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4b10      	ldr	r3, [pc, #64]	; (8007994 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x29c>)
 8007952:	4a11      	ldr	r2, [pc, #68]	; (8007998 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x2a0>)
 8007954:	f7fc fd65 	bl	8004422 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007958:	2401      	movs	r4, #1
 800795a:	2500      	movs	r5, #0
 800795c:	e000      	b.n	8007960 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x268>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800795e:	2501      	movs	r5, #1
 8007960:	f107 0310 	add.w	r3, r7, #16
 8007964:	4618      	mov	r0, r3
 8007966:	f004 f885 	bl	800ba74 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800796a:	2d01      	cmp	r5, #1
 800796c:	d001      	beq.n	8007972 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x27a>
 800796e:	2500      	movs	r5, #0
 8007970:	e000      	b.n	8007974 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x27c>
                                        memory_allocator_->GetTail());
 8007972:	2501      	movs	r5, #1
 8007974:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007978:	4618      	mov	r0, r3
 800797a:	f001 ff43 	bl	8009804 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800797e:	2d01      	cmp	r5, #1
 8007980:	d101      	bne.n	8007986 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28e>
 8007982:	bf00      	nop
  }
  return kTfLiteOk;
 8007984:	2400      	movs	r4, #0
 8007986:	4623      	mov	r3, r4
}
 8007988:	4618      	mov	r0, r3
 800798a:	3794      	adds	r7, #148	; 0x94
 800798c:	46bd      	mov	sp, r7
 800798e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007990:	08010d08 	.word	0x08010d08
 8007994:	08010cb4 	.word	0x08010cb4
 8007998:	08010cf0 	.word	0x08010cf0
 800799c:	08010d24 	.word	0x08010d24
 80079a0:	08010d7c 	.word	0x08010d7c

080079a4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80079b0:	887b      	ldrh	r3, [r7, #2]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 faaf 	bl	8007f18 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80079ba:	4603      	mov	r3, r0
  }
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80079d0:	887b      	ldrh	r3, [r7, #2]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fabf 	bl	8007f58 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 80079da:	4603      	mov	r3, r0
  }
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80079f0:	887b      	ldrh	r3, [r7, #2]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 facf 	bl	8007f98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 80079fa:	4603      	mov	r3, r0
  }
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007a10:	887b      	ldrh	r3, [r7, #2]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fadf 	bl	8007fd8 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8007a1a:	4603      	mov	r3, r0
  }
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007a30:	887b      	ldrh	r3, [r7, #2]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 faef 	bl	8008018 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8007a3a:	4603      	mov	r3, r0
  }
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007a50:	887b      	ldrh	r3, [r7, #2]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 faff 	bl	8008058 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8007a5a:	4603      	mov	r3, r0
  }
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007a70:	887b      	ldrh	r3, [r7, #2]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fb0f 	bl	8008098 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8007a7a:	4603      	mov	r3, r0
  }
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007a90:	887b      	ldrh	r3, [r7, #2]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fb1f 	bl	80080d8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8007a9a:	4603      	mov	r3, r0
  }
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007ab0:	887b      	ldrh	r3, [r7, #2]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fb2f 	bl	8008118 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8007aba:	4603      	mov	r3, r0
  }
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb3f 	bl	8008158 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8007ada:	4603      	mov	r3, r0
  }
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7f9 fe44 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007af6:	4603      	mov	r3, r0
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7f9 fe36 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007b12:	4603      	mov	r3, r0
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff ffea 	bl	8007b00 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d306      	bcc.n	8007b42 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8007b34:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8007b36:	4a0b      	ldr	r2, [pc, #44]	; (8007b64 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8007b38:	f240 1101 	movw	r1, #257	; 0x101
 8007b3c:	480a      	ldr	r0, [pc, #40]	; (8007b68 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8007b3e:	f004 fb6f 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fb4a 	bl	80081dc <_ZNK11flatbuffers6VectorIfE4DataEv>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fb2f 	bl	80081b0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8007b52:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007b56:	eeb0 0a67 	vmov.f32	s0, s15
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	08010da0 	.word	0x08010da0
 8007b64:	08010dac 	.word	0x08010dac
 8007b68:	08010e74 	.word	0x08010e74

08007b6c <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7f9 fe00 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff ffea 	bl	8007b6c <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d306      	bcc.n	8007bae <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8007ba2:	4a0b      	ldr	r2, [pc, #44]	; (8007bd0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8007ba4:	f240 1101 	movw	r1, #257	; 0x101
 8007ba8:	480a      	ldr	r0, [pc, #40]	; (8007bd4 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8007baa:	f004 fb39 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fb36 	bl	8008220 <_ZNK11flatbuffers6VectorIxE4DataEv>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fb1b 	bl	80081f4 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
  }
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	08010da0 	.word	0x08010da0
 8007bd0:	08010f08 	.word	0x08010f08
 8007bd4:	08010e74 	.word	0x08010e74

08007bd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7f9 fdca 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007bea:	4603      	mov	r3, r0
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7ff ffea 	bl	8007bd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007c04:	4602      	mov	r2, r0
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d306      	bcc.n	8007c1a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8007c0c:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	; (8007c38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8007c10:	f240 1101 	movw	r1, #257	; 0x101
 8007c14:	4809      	ldr	r0, [pc, #36]	; (8007c3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8007c16:	f004 fb03 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb20 	bl	8008260 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8007c20:	4603      	mov	r3, r0
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fb07 	bl	8008238 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8007c2a:	4603      	mov	r3, r0
  }
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	08010da0 	.word	0x08010da0
 8007c38:	080110b0 	.word	0x080110b0
 8007c3c:	08010e74 	.word	0x08010e74

08007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7f9 fd96 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007c52:	4603      	mov	r3, r0
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff ffea 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d306      	bcc.n	8007c82 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8007c74:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8007c78:	f240 1101 	movw	r1, #257	; 0x101
 8007c7c:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8007c7e:	f004 facf 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fb0c 	bl	80082a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 faf3 	bl	8008278 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8007c92:	4603      	mov	r3, r0
  }
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	08010da0 	.word	0x08010da0
 8007ca0:	080111a8 	.word	0x080111a8
 8007ca4:	08010e74 	.word	0x08010e74

08007ca8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7f9 fd62 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff ffea 	bl	8007ca8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d306      	bcc.n	8007cea <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 8007cde:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8007ce0:	f240 1101 	movw	r1, #257	; 0x101
 8007ce4:	4809      	ldr	r0, [pc, #36]	; (8007d0c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8007ce6:	f004 fa9b 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 faf8 	bl	80082e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fadf 	bl	80082b8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8007cfa:	4603      	mov	r3, r0
  }
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	08010da0 	.word	0x08010da0
 8007d08:	080112a4 	.word	0x080112a4
 8007d0c:	08010e74 	.word	0x08010e74

08007d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7f9 fd2e 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007d22:	4603      	mov	r3, r0
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ffea 	bl	8007d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d306      	bcc.n	8007d52 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8007d44:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8007d46:	4a0a      	ldr	r2, [pc, #40]	; (8007d70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8007d48:	f240 1101 	movw	r1, #257	; 0x101
 8007d4c:	4809      	ldr	r0, [pc, #36]	; (8007d74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8007d4e:	f004 fa67 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fae4 	bl	8008320 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 facb 	bl	80082f8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8007d62:	4603      	mov	r3, r0
  }
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	08010da0 	.word	0x08010da0
 8007d70:	080113a8 	.word	0x080113a8
 8007d74:	08010e74 	.word	0x08010e74

08007d78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f9 fcfa 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff ffea 	bl	8007d78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8007da4:	4602      	mov	r2, r0
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d306      	bcc.n	8007dba <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8007dae:	4a0a      	ldr	r2, [pc, #40]	; (8007dd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8007db0:	f240 1101 	movw	r1, #257	; 0x101
 8007db4:	4809      	ldr	r0, [pc, #36]	; (8007ddc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8007db6:	f004 fa33 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fad0 	bl	8008360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fab7 	bl	8008338 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8007dca:	4603      	mov	r3, r0
  }
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	08010da0 	.word	0x08010da0
 8007dd8:	080114a4 	.word	0x080114a4
 8007ddc:	08010e74 	.word	0x08010e74

08007de0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f9 fcc6 	bl	800177e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007df2:	4603      	mov	r3, r0
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff ffea 	bl	8007de0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d306      	bcc.n	8007e22 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 8007e14:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 8007e16:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8007e18:	f240 1101 	movw	r1, #257	; 0x101
 8007e1c:	4809      	ldr	r0, [pc, #36]	; (8007e44 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8007e1e:	f004 f9ff 	bl	800c220 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fabc 	bl	80083a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 faa3 	bl	8008378 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8007e32:	4603      	mov	r3, r0
  }
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	08010da0 	.word	0x08010da0
 8007e40:	0801159c 	.word	0x0801159c
 8007e44:	08010e74 	.word	0x08010e74

08007e48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff ff69 	bl	8007d2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff ff8f 	bl	8007d94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 8007e76:	4603      	mov	r3, r0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f985 	bl	8008198 <_ZNK11flatbuffers6VectorIhE4DataEv>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8007eac:	f004 f9b0 	bl	800c210 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8007eb6:	f004 f9ab 	bl	800c210 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8007ede:	f004 f997 	bl	800c210 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8007ee8:	f004 f992 	bl	800c210 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff fedb 	bl	8007cc4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007f24:	887b      	ldrh	r3, [r7, #2]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7f9 f8db 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	4413      	add	r3, r2
 8007f38:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007f3a:	89fb      	ldrh	r3, [r7, #14]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d006      	beq.n	8007f4e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 8007f40:	68b8      	ldr	r0, [r7, #8]
 8007f42:	f7f9 fc35 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007f46:	4602      	mov	r2, r0
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	4413      	add	r3, r2
                        : nullptr;
 8007f4c:	e000      	b.n	8007f50 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007f4e:	2300      	movs	r3, #0
  }
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007f64:	887b      	ldrh	r3, [r7, #2]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7f9 f8bb 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	89fb      	ldrh	r3, [r7, #14]
 8007f76:	4413      	add	r3, r2
 8007f78:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007f7a:	89fb      	ldrh	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d006      	beq.n	8007f8e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 8007f80:	68b8      	ldr	r0, [r7, #8]
 8007f82:	f7f9 fc15 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007f86:	4602      	mov	r2, r0
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4413      	add	r3, r2
                        : nullptr;
 8007f8c:	e000      	b.n	8007f90 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007f8e:	2300      	movs	r3, #0
  }
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007fa4:	887b      	ldrh	r3, [r7, #2]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7f9 f89b 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	89fb      	ldrh	r3, [r7, #14]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007fba:	89fb      	ldrh	r3, [r7, #14]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d006      	beq.n	8007fce <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8007fc0:	68b8      	ldr	r0, [r7, #8]
 8007fc2:	f7f9 fbf5 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	4413      	add	r3, r2
                        : nullptr;
 8007fcc:	e000      	b.n	8007fd0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007fce:	2300      	movs	r3, #0
  }
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007fe4:	887b      	ldrh	r3, [r7, #2]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7f9 f87b 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	89fb      	ldrh	r3, [r7, #14]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007ffa:	89fb      	ldrh	r3, [r7, #14]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d006      	beq.n	800800e <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8008000:	68b8      	ldr	r0, [r7, #8]
 8008002:	f7f9 fbd5 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008006:	4602      	mov	r2, r0
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4413      	add	r3, r2
                        : nullptr;
 800800c:	e000      	b.n	8008010 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800800e:	2300      	movs	r3, #0
  }
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008024:	887b      	ldrh	r3, [r7, #2]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7f9 f85b 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800802e:	4603      	mov	r3, r0
 8008030:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	89fb      	ldrh	r3, [r7, #14]
 8008036:	4413      	add	r3, r2
 8008038:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800803a:	89fb      	ldrh	r3, [r7, #14]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d006      	beq.n	800804e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8008040:	68b8      	ldr	r0, [r7, #8]
 8008042:	f7f9 fbb5 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008046:	4602      	mov	r2, r0
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4413      	add	r3, r2
                        : nullptr;
 800804c:	e000      	b.n	8008050 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800804e:	2300      	movs	r3, #0
  }
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008064:	887b      	ldrh	r3, [r7, #2]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7f9 f83b 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800806e:	4603      	mov	r3, r0
 8008070:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	89fb      	ldrh	r3, [r7, #14]
 8008076:	4413      	add	r3, r2
 8008078:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800807a:	89fb      	ldrh	r3, [r7, #14]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d006      	beq.n	800808e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 8008080:	68b8      	ldr	r0, [r7, #8]
 8008082:	f7f9 fb95 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008086:	4602      	mov	r2, r0
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4413      	add	r3, r2
                        : nullptr;
 800808c:	e000      	b.n	8008090 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800808e:	2300      	movs	r3, #0
  }
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80080a4:	887b      	ldrh	r3, [r7, #2]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f9 f81b 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80080ae:	4603      	mov	r3, r0
 80080b0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	4413      	add	r3, r2
 80080b8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80080ba:	89fb      	ldrh	r3, [r7, #14]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d006      	beq.n	80080ce <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 80080c0:	68b8      	ldr	r0, [r7, #8]
 80080c2:	f7f9 fb75 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80080c6:	4602      	mov	r2, r0
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	4413      	add	r3, r2
                        : nullptr;
 80080cc:	e000      	b.n	80080d0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80080ce:	2300      	movs	r3, #0
  }
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80080e4:	887b      	ldrh	r3, [r7, #2]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7f8 fffb 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80080ee:	4603      	mov	r3, r0
 80080f0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	89fb      	ldrh	r3, [r7, #14]
 80080f6:	4413      	add	r3, r2
 80080f8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80080fa:	89fb      	ldrh	r3, [r7, #14]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 8008100:	68b8      	ldr	r0, [r7, #8]
 8008102:	f7f9 fb55 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008106:	4602      	mov	r2, r0
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4413      	add	r3, r2
                        : nullptr;
 800810c:	e000      	b.n	8008110 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800810e:	2300      	movs	r3, #0
  }
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008124:	887b      	ldrh	r3, [r7, #2]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7f8 ffdb 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800812e:	4603      	mov	r3, r0
 8008130:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	4413      	add	r3, r2
 8008138:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800813a:	89fb      	ldrh	r3, [r7, #14]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d006      	beq.n	800814e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8008140:	68b8      	ldr	r0, [r7, #8]
 8008142:	f7f9 fb35 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008146:	4602      	mov	r2, r0
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4413      	add	r3, r2
                        : nullptr;
 800814c:	e000      	b.n	8008150 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800814e:	2300      	movs	r3, #0
  }
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008164:	887b      	ldrh	r3, [r7, #2]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7f8 ffbb 	bl	80010e4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800816e:	4603      	mov	r3, r0
 8008170:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	89fb      	ldrh	r3, [r7, #14]
 8008176:	4413      	add	r3, r2
 8008178:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800817a:	89fb      	ldrh	r3, [r7, #14]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8008180:	68b8      	ldr	r0, [r7, #8]
 8008182:	f7f9 fb15 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008186:	4602      	mov	r2, r0
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4413      	add	r3, r2
                        : nullptr;
 800818c:	e000      	b.n	8008190 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800818e:	2300      	movs	r3, #0
  }
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3304      	adds	r3, #4
  }
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	edd3 7a00 	vldr	s15, [r3]
 80081c6:	eeb0 0a67 	vmov.f32	s0, s15
 80081ca:	f7fc fd97 	bl	8004cfc <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 80081ce:	eef0 7a40 	vmov.f32	s15, s0
  }
 80081d2:	eeb0 0a67 	vmov.f32	s0, s15
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3304      	adds	r3, #4
  }
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4413      	add	r3, r2
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	4610      	mov	r0, r2
 800820c:	4619      	mov	r1, r3
 800820e:	f000 f8d3 	bl	80083b8 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
  }
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
  }
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7f9 faaf 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008252:	4602      	mov	r2, r0
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4413      	add	r3, r2
  }
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3304      	adds	r3, #4
  }
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	4413      	add	r3, r2
 800828a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7f9 fa8f 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008292:	4602      	mov	r2, r0
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4413      	add	r3, r2
  }
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3304      	adds	r3, #4
  }
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	4413      	add	r3, r2
 80082ca:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7f9 fa6f 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80082d2:	4602      	mov	r2, r0
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4413      	add	r3, r2
  }
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3304      	adds	r3, #4
  }
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	4413      	add	r3, r2
 800830a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7f9 fa4f 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008312:	4602      	mov	r2, r0
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4413      	add	r3, r2
  }
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3304      	adds	r3, #4
  }
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7f9 fa2f 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008352:	4602      	mov	r2, r0
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4413      	add	r3, r2
  }
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3304      	adds	r3, #4
  }
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
 800838a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7f9 fa0f 	bl	80017b0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008392:	4602      	mov	r2, r0
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4413      	add	r3, r2
  }
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3304      	adds	r3, #4
  }
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 80083c2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	4a05      	ldr	r2, [pc, #20]	; (80083f4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fd fe25 	bl	8006034 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	08012b6c 	.word	0x08012b6c

080083f8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff ffe7 	bl	80083d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8008406:	2108      	movs	r1, #8
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f003 fe19 	bl	800c040 <_ZdlPvj>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b0c4      	sub	sp, #272	; 0x110
 800841c:	af00      	add	r7, sp, #0
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	6018      	str	r0, [r3, #0]
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	6019      	str	r1, [r3, #0]
 800842a:	1d3b      	adds	r3, r7, #4
 800842c:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	f107 0208 	add.w	r2, r7, #8
 8008434:	f107 0010 	add.w	r0, r7, #16
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008440:	f000 ff94 	bl	800936c <MicroVsnprintf>
  DebugLog(log_buffer);
 8008444:	f107 0310 	add.w	r3, r7, #16
 8008448:	4618      	mov	r0, r3
 800844a:	f7f9 f97f 	bl	800174c <DebugLog>
  DebugLog("\r\n");
 800844e:	4804      	ldr	r0, [pc, #16]	; (8008460 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>)
 8008450:	f7f9 f97c 	bl	800174c <DebugLog>
#endif
  return 0;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	08011698 	.word	0x08011698

08008464 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b089      	sub	sp, #36	; 0x24
 8008468:	af04      	add	r7, sp, #16
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3308      	adds	r3, #8
 8008476:	681c      	ldr	r4, [r3, #0]
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008484:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008488:	e9cd 2300 	strd	r2, r3, [sp]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	47a0      	blx	r4
 8008494:	4603      	mov	r3, r0
  }
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bd90      	pop	{r4, r7, pc}

0800849e <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 800849e:	b580      	push	{r7, lr}
 80084a0:	b086      	sub	sp, #24
 80084a2:	af02      	add	r7, sp, #8
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	605a      	str	r2, [r3, #4]
    if (profiler) {
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00c      	beq.n	80084d8 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084c6:	e9cd 2300 	strd	r2, r3, [sp]
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	f7ff ffc9 	bl	8008464 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 80084d2:	4602      	mov	r2, r0
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	605a      	str	r2, [r3, #4]
    }
  }
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3310      	adds	r3, #16
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6852      	ldr	r2, [r2, #4]
 8008504:	4611      	mov	r1, r2
 8008506:	4798      	blx	r3
    }
  }
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af02      	add	r7, sp, #8
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
 800851e:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	e9cd 2300 	strd	r2, r3, [sp]
 800852e:	2302      	movs	r3, #2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	f7ff ffb3 	bl	800849e <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854e:	4618      	mov	r0, r3
 8008550:	f7fd fce2 	bl	8005f18 <_ZNK6tflite8SubGraph6inputsEv>
 8008554:	4603      	mov	r3, r0
 8008556:	4618      	mov	r0, r3
 8008558:	f7fd fc2f 	bl	8005dba <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800855c:	4603      	mov	r3, r0
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd fcd0 	bl	8005f18 <_ZNK6tflite8SubGraph6inputsEv>
 8008578:	4603      	mov	r3, r0
  }
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	4618      	mov	r0, r3
 8008590:	f7fd fcd0 	bl	8005f34 <_ZNK6tflite8SubGraph7outputsEv>
 8008594:	4603      	mov	r3, r0
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd fc0f 	bl	8005dba <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800859c:	4603      	mov	r3, r0
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fd fcbe 	bl	8005f34 <_ZNK6tflite8SubGraph7outputsEv>
 80085b8:	4603      	mov	r3, r0
  }
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	d102      	bne.n	80085d8 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	e007      	b.n	80085e8 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fc fce4 	bl	8004fac <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80085e4:	4603      	mov	r3, r0
 80085e6:	bf00      	nop
  }
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>:

}  // namespace

namespace internal {

ContextHelper::ContextHelper(ErrorReporter* error_reporter,
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
                             MicroAllocator* allocator, const Model* model)
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	609a      	str	r2, [r3, #8]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f04f 32ff 	mov.w	r2, #4294967295
 8008616:	611a      	str	r2, [r3, #16]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextj>:

void* ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                              size_t bytes) {
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe fc01 	bl	8006e40 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>
 800863e:	4603      	mov	r3, r0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	6919      	ldr	r1, [r3, #16]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	f7fe fbff 	bl	8006e68 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>
 800866a:	4603      	mov	r3, r0
      helper->current_node_idx_, bytes, buffer_idx);
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
      ->allocator_->GetScratchBuffer(buffer_idx);
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe fc4a 	bl	8006f20 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>
 800868c:	4603      	mov	r3, r0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 8008696:	b40e      	push	{r1, r2, r3}
 8008698:	b580      	push	{r7, lr}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 80086a6:	f107 0320 	add.w	r3, r7, #32
 80086aa:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6858      	ldr	r0, [r3, #4]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3308      	adds	r3, #8
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	69f9      	ldr	r1, [r7, #28]
 80086be:	4798      	blx	r3
  va_end(args);
#endif
}
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086ca:	b003      	add	sp, #12
 80086cc:	4770      	bx	lr

080086ce <_ZN6tflite8internal13ContextHelper9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* ContextHelper::GetTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 80086ce:	b590      	push	{r4, r7, lr}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	60fb      	str	r3, [r7, #12]
  return helper->allocator_->AllocateTempTfLiteTensor(
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
      helper->model_, helper->eval_tensors_, tensor_idx);
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3304      	adds	r3, #4
 80086ea:	681c      	ldr	r4, [r3, #0]
  return helper->allocator_->AllocateTempTfLiteTensor(
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6899      	ldr	r1, [r3, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	47a0      	blx	r4
 80086f8:	4603      	mov	r3, r0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd90      	pop	{r4, r7, pc}

08008702 <_ZN6tflite8internal13ContextHelper13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* ContextHelper::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(context->impl_);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	60fb      	str	r3, [r7, #12]
  return &helper->eval_tensors_[tensor_idx];
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	68d9      	ldr	r1, [r3, #12]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4613      	mov	r3, r2
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>:

void ContextHelper::SetNodeIndex(int idx) { current_node_idx_ = idx; }
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	611a      	str	r2, [r3, #16]
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>:

void ContextHelper::SetTfLiteEvalTensors(TfLiteEvalTensor* eval_tensors) {
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
  eval_tensors_ = eval_tensors;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	60da      	str	r2, [r3, #12]
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
 8008772:	603b      	str	r3, [r7, #0]
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      eval_tensors_(nullptr),
      context_helper_(error_reporter_, &allocator_, model),
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	605a      	str	r2, [r3, #4]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	609a      	str	r2, [r3, #8]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	60da      	str	r2, [r3, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3310      	adds	r3, #16
 8008790:	2258      	movs	r2, #88	; 0x58
 8008792:	2100      	movs	r1, #0
 8008794:	4618      	mov	r0, r3
 8008796:	f003 fddf 	bl	800c358 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	69b9      	ldr	r1, [r7, #24]
 800879e:	6838      	ldr	r0, [r7, #0]
 80087a0:	f7fe fa5c 	bl	8006c5c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 80087a4:	4602      	mov	r2, r0
      output_tensor_(nullptr) {
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	669a      	str	r2, [r3, #104]	; 0x68
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	675a      	str	r2, [r3, #116]	; 0x74
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68d9      	ldr	r1, [r3, #12]
      context_helper_(error_reporter_, &allocator_, model),
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
      output_tensor_(nullptr) {
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f7ff ff0e 	bl	80085f0 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  Init(profiler);
 80087e4:	6a39      	ldr	r1, [r7, #32]
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 f84e 	bl	8008888 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b086      	sub	sp, #24
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d03a      	beq.n	800887c <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	4618      	mov	r0, r3
 8008810:	f7fd fb9e 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 8008814:	4603      	mov	r3, r0
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fa12 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800881c:	4602      	mov	r2, r0
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	4293      	cmp	r3, r2
 8008822:	bf34      	ite	cc
 8008824:	2301      	movcc	r3, #1
 8008826:	2300      	movcs	r3, #0
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d026      	beq.n	800887c <_ZN6tflite16MicroInterpreterD1Ev+0x86>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	440b      	add	r3, r1
 800883e:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00c      	beq.n	8008874 <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
        registration->free(&context_, node->user_data);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	f102 0010 	add.w	r0, r2, #16
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	6912      	ldr	r2, [r2, #16]
 8008870:	4611      	mov	r1, r2
 8008872:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	3301      	adds	r3, #1
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	e7c6      	b.n	800880a <_ZN6tflite16MicroInterpreterD1Ev+0x14>
      }
    }
  }
}
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	4618      	mov	r0, r3
 8008898:	f7fd fba1 	bl	8005fde <_ZNK6tflite5Model9subgraphsEv>
 800889c:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff fa36 	bl	8007d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	bf14      	ite	ne
 80088aa:	2301      	movne	r3, #1
 80088ac:	2300      	moveq	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	4915      	ldr	r1, [pc, #84]	; (8008910 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x88>)
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fb fd98 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return;
 80088c8:	e01e      	b.n	8008908 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>
  }
  subgraph_ = (*subgraphs)[0];
 80088ca:	2100      	movs	r1, #0
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f7ff fabb 	bl	8007e48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80088d2:	4602      	mov	r2, r0
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	671a      	str	r2, [r3, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a0b      	ldr	r2, [pc, #44]	; (8008914 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x8c>)
 80088e6:	625a      	str	r2, [r3, #36]	; 0x24
  context_.GetTensor = context_helper_.GetTensor;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a0b      	ldr	r2, [pc, #44]	; (8008918 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x90>)
 80088ec:	661a      	str	r2, [r3, #96]	; 0x60
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a0a      	ldr	r2, [pc, #40]	; (800891c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x94>)
 80088f2:	665a      	str	r2, [r3, #100]	; 0x64
  context_.recommended_num_threads = 1;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	08011c74 	.word	0x08011c74
 8008914:	08008697 	.word	0x08008697
 8008918:	080086cf 	.word	0x080086cf
 800891c:	08008703 	.word	0x08008703

08008920 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8008920:	b590      	push	{r4, r7, lr}
 8008922:	b08f      	sub	sp, #60	; 0x3c
 8008924:	af02      	add	r7, sp, #8
 8008926:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6859      	ldr	r1, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	687c      	ldr	r4, [r7, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3374      	adds	r3, #116	; 0x74
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	4623      	mov	r3, r4
 800893e:	f7fe f9e5 	bl	8006d0c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>
 8008942:	4603      	mov	r3, r0
                                      &node_and_registrations_,
                                      &eval_tensors_) != kTfLiteOk) {
 8008944:	2b00      	cmp	r3, #0
 8008946:	bf14      	ite	ne
 8008948:	2301      	movne	r3, #1
 800894a:	2300      	moveq	r3, #0
 800894c:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00b      	beq.n	800896a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	4982      	ldr	r1, [pc, #520]	; (8008b60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x240>)
 8008958:	4618      	mov	r0, r3
 800895a:	f7fb fd49 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return kTfLiteError;
 8008966:	2301      	movs	r3, #1
 8008968:	e0f5      	b.n	8008b56 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x236>

  // Update the pointer now that TfLiteEvalTensor allocation has completed on
  // the context helper.
  // TODO(b/16157777): This call would not be needed if ContextHelper rolled
  // into the interpreter.
  context_helper_.SetTfLiteEvalTensors(eval_tensors_);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008974:	4619      	mov	r1, r3
 8008976:	4610      	mov	r0, r2
 8008978:	f7ff fee7 	bl	800874a <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>
      }
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a79      	ldr	r2, [pc, #484]	; (8008b64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x244>)
 8008980:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800898e:	2300      	movs	r3, #0
 8008990:	62bb      	str	r3, [r7, #40]	; 0x28
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008996:	4618      	mov	r0, r3
 8008998:	f7fd fada 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 800899c:	4603      	mov	r3, r0
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f94e 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80089a4:	4602      	mov	r2, r0
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	4293      	cmp	r3, r2
 80089aa:	bf34      	ite	cc
 80089ac:	2301      	movcc	r3, #1
 80089ae:	2300      	movcs	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d03c      	beq.n	8008a30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x110>
    context_helper_.SetNodeIndex(i);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3378      	adds	r3, #120	; 0x78
 80089ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff feb5 	bl	800872e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6819      	ldr	r1, [r3, #0]
 80089c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	440b      	add	r3, r1
 80089d4:	60fb      	str	r3, [r7, #12]
    auto* registration = node_and_registrations_[i].registration;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6819      	ldr	r1, [r3, #0]
 80089da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089dc:	4613      	mov	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	440b      	add	r3, r1
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	60bb      	str	r3, [r7, #8]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d106      	bne.n	8008a00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe0>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	623b      	str	r3, [r7, #32]
      init_data_size = node->custom_initial_data_size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
 80089fe:	e004      	b.n	8008a0a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xea>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	623b      	str	r3, [r7, #32]
      init_data_size = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (registration->init) {
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x108>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	f102 0010 	add.w	r0, r2, #16
 8008a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1e:	6a39      	ldr	r1, [r7, #32]
 8008a20:	4798      	blx	r3
 8008a22:	4602      	mov	r2, r0
      node->user_data =
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a2e:	e7b0      	b.n	8008992 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x72>
    }
  }
  context_helper_.SetNodeIndex(-1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3378      	adds	r3, #120	; 0x78
 8008a34:	f04f 31ff 	mov.w	r1, #4294967295
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff fe78 	bl	800872e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena =
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a49      	ldr	r2, [pc, #292]	; (8008b68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x248>)
 8008a42:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008a44:	2300      	movs	r3, #0
 8008a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fd fa7f 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 8008a52:	4603      	mov	r3, r0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff f8f3 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	bf34      	ite	cc
 8008a62:	2301      	movcc	r3, #1
 8008a64:	2300      	movcs	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d045      	beq.n	8008af8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3378      	adds	r3, #120	; 0x78
 8008a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a72:	4611      	mov	r1, r2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff fe5a 	bl	800872e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6819      	ldr	r1, [r3, #0]
 8008a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	440b      	add	r3, r1
 8008a8a:	61bb      	str	r3, [r7, #24]
    auto* registration = node_and_registrations_[i].registration;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6819      	ldr	r1, [r3, #0]
 8008a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a92:	4613      	mov	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	440b      	add	r3, r1
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	617b      	str	r3, [r7, #20]
    if (registration->prepare) {
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d01a      	beq.n	8008ade <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	3210      	adds	r2, #16
 8008ab0:	69b9      	ldr	r1, [r7, #24]
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	4798      	blx	r3
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	74fb      	strb	r3, [r7, #19]
      if (prepare_status != kTfLiteOk) {
 8008aba:	7cfb      	ldrb	r3, [r7, #19]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00e      	beq.n	8008ade <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
        TF_LITE_REPORT_ERROR(
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68dc      	ldr	r4, [r3, #12]
 8008ac4:	6978      	ldr	r0, [r7, #20]
 8008ac6:	f7ff fd7c 	bl	80085c2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008aca:	4602      	mov	r2, r0
 8008acc:	7cfb      	ldrb	r3, [r7, #19]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	4926      	ldr	r1, [pc, #152]	; (8008b6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x24c>)
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f7fb fc8b 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e03b      	b.n	8008b56 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x236>
      }
    }
    allocator_.ResetTempAllocations();
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3308      	adds	r3, #8
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4610      	mov	r0, r2
 8008aee:	4798      	blx	r3
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	3301      	adds	r3, #1
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af6:	e7a7      	b.n	8008a48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x128>
  }
  context_helper_.SetNodeIndex(-1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3378      	adds	r3, #120	; 0x78
 8008afc:	f04f 31ff 	mov.w	r1, #4294967295
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff fe14 	bl	800872e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a16      	ldr	r2, [pc, #88]	; (8008b70 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>)
 8008b16:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6859      	ldr	r1, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b24:	461a      	mov	r2, r3
 8008b26:	f7fe f943 	bl	8006db0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensor>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	77fb      	strb	r3, [r7, #31]
 8008b2e:	7ffb      	ldrb	r3, [r7, #31]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
 8008b34:	7ffb      	ldrb	r3, [r7, #31]
 8008b36:	e00e      	b.n	8008b56 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x236>
                    allocator_.FinishModelAllocation(model_, eval_tensors_));
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f995 	bl	8008e68 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	77bb      	strb	r3, [r7, #30]
 8008b42:	7fbb      	ldrb	r3, [r7, #30]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
 8008b48:	7fbb      	ldrb	r3, [r7, #30]
 8008b4a:	e004      	b.n	8008b56 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x236>

  tensors_allocated_ = true;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  return kTfLiteOk;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3734      	adds	r7, #52	; 0x34
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd90      	pop	{r4, r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	08011ca0 	.word	0x08011ca0
 8008b64:	08008627 	.word	0x08008627
 8008b68:	08008649 	.word	0x08008649
 8008b6c:	08011cc4 	.word	0x08011cc4
 8008b70:	08008675 	.word	0x08008675

08008b74 <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff fcaf 	bl	80084e2 <_ZN6tflite13ScopedProfileD1Ev>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 8008b90:	b5b0      	push	{r4, r5, r7, lr}
 8008b92:	b08c      	sub	sp, #48	; 0x30
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	2400      	movs	r4, #0
  if (initialization_status_ != kTfLiteOk) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d007      	beq.n	8008bb4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	4947      	ldr	r1, [pc, #284]	; (8008cc8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>)
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fb fc20 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 8008bb0:	2401      	movs	r4, #1
 8008bb2:	e084      	b.n	8008cbe <_ZN6tflite16MicroInterpreter6InvokeEv+0x12e>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008bba:	f083 0301 	eor.w	r3, r3, #1
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00c      	beq.n	8008bde <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff feab 	bl	8008920 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
 8008bd8:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8008bdc:	e06f      	b.n	8008cbe <_ZN6tflite16MicroInterpreter6InvokeEv+0x12e>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008bde:	2300      	movs	r3, #0
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fd f9b2 	bl	8005f50 <_ZNK6tflite8SubGraph9operatorsEv>
 8008bec:	4603      	mov	r3, r0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff f826 	bl	8007c40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	bf34      	ite	cc
 8008bfc:	2301      	movcc	r3, #1
 8008bfe:	2300      	movcs	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d05a      	beq.n	8008cbc <_ZN6tflite16MicroInterpreter6InvokeEv+0x12c>
    auto* node = &(node_and_registrations_[i].node);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6819      	ldr	r1, [r3, #0]
 8008c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	440b      	add	r3, r1
 8008c16:	61fb      	str	r3, [r7, #28]
    auto* registration = node_and_registrations_[i].registration;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6819      	ldr	r1, [r3, #0]
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	440b      	add	r3, r1
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	61bb      	str	r3, [r7, #24]

    if (registration->invoke) {
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d03f      	beq.n	8008cb4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x124>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by
      // ScopedOperatorProfile.
      tflite::Profiler* profiler =
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c38:	617b      	str	r3, [r7, #20]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 8008c3a:	69b8      	ldr	r0, [r7, #24]
 8008c3c:	f7ff fcc1 	bl	80085c2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008c40:	4602      	mov	r2, r0
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	f107 0008 	add.w	r0, r7, #8
 8008c48:	6979      	ldr	r1, [r7, #20]
 8008c4a:	f7ff fc62 	bl	8008512 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	3210      	adds	r2, #16
 8008c56:	69f9      	ldr	r1, [r7, #28]
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	74fb      	strb	r3, [r7, #19]

      // All TfLiteTensor structs used in the kernel are allocated from temp
      // memory in the allocator. This creates a chain of allocations in the
      // temp section. The call below resets the chain of allocations to
      // prepare for the next call.
      allocator_.ResetTempAllocations();
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4798      	blx	r3

      if (invoke_status == kTfLiteError) {
 8008c72:	7cfb      	ldrb	r3, [r7, #19]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d10f      	bne.n	8008c98 <_ZN6tflite16MicroInterpreter6InvokeEv+0x108>
        TF_LITE_REPORT_ERROR(
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68dc      	ldr	r4, [r3, #12]
 8008c7c:	69b8      	ldr	r0, [r7, #24]
 8008c7e:	f7ff fca0 	bl	80085c2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008c82:	4602      	mov	r2, r0
 8008c84:	7cfb      	ldrb	r3, [r7, #19]
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	4910      	ldr	r1, [pc, #64]	; (8008ccc <_ZN6tflite16MicroInterpreter6InvokeEv+0x13c>)
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7fb fbaf 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 8008c92:	2401      	movs	r4, #1
 8008c94:	2500      	movs	r5, #0
 8008c96:	e006      	b.n	8008ca6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x116>
      } else if (invoke_status != kTfLiteOk) {
 8008c98:	7cfb      	ldrb	r3, [r7, #19]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x114>
        return invoke_status;
 8008c9e:	7cfc      	ldrb	r4, [r7, #19]
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	e000      	b.n	8008ca6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x116>
          profiler, OpNameFromRegistration(registration), i);
 8008ca4:	2501      	movs	r5, #1
 8008ca6:	f107 0308 	add.w	r3, r7, #8
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff ff62 	bl	8008b74 <_ZN6tflite21ScopedOperatorProfileD1Ev>
 8008cb0:	2d01      	cmp	r5, #1
 8008cb2:	d104      	bne.n	8008cbe <_ZN6tflite16MicroInterpreter6InvokeEv+0x12e>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cba:	e792      	b.n	8008be2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x52>
      }
    }
  }
  return kTfLiteOk;
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	4623      	mov	r3, r4
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3728      	adds	r7, #40	; 0x28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8008cc8:	08011cfc 	.word	0x08011cfc
 8008ccc:	08011d2c 	.word	0x08011d2c

08008cd0 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8008cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
  const size_t length = inputs_size();
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7ff fc31 	bl	8008542 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008ce0:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d308      	bcc.n	8008cfc <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	68d8      	ldr	r0, [r3, #12]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	4928      	ldr	r1, [pc, #160]	; (8008d94 <_ZN6tflite16MicroInterpreter5inputEj+0xc4>)
 8008cf4:	f7fb fb7c 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e046      	b.n	8008d8a <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (index != 0) {
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01f      	beq.n	8008d42 <_ZN6tflite16MicroInterpreter5inputEj+0x72>
    TF_LITE_REPORT_ERROR(
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	4924      	ldr	r1, [pc, #144]	; (8008d98 <_ZN6tflite16MicroInterpreter5inputEj+0xc8>)
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fb fb71 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Input tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     inputs().Get(index));
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	685e      	ldr	r6, [r3, #4]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d22:	607b      	str	r3, [r7, #4]
                                                     inputs().Get(index));
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff fc1e 	bl	8008566 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fb fe2e 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008d34:	4603      	mov	r3, r0
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	47a0      	blx	r4
 8008d3e:	4603      	mov	r3, r0
                                                     inputs().Get(index));
 8008d40:	e023      	b.n	8008d8a <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (input_tensor_ == nullptr) {
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d11b      	bne.n	8008d84 <_ZN6tflite16MicroInterpreter5inputEj+0xb4>
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, inputs().Get(index));
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681c      	ldr	r4, [r3, #0]
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	685e      	ldr	r6, [r3, #4]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d60:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, inputs().Get(index));
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7ff fbff 	bl	8008566 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fb fe0f 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008d72:	4603      	mov	r3, r0
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	4631      	mov	r1, r6
 8008d78:	4628      	mov	r0, r5
 8008d7a:	47a0      	blx	r4
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  return input_tensor_;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d92:	bf00      	nop
 8008d94:	08011d60 	.word	0x08011d60
 8008d98:	08011d8c 	.word	0x08011d8c

08008d9c <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8008d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
  const size_t length = outputs_size();
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f7ff fbeb 	bl	8008582 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008dac:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d308      	bcc.n	8008dc8 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68d8      	ldr	r0, [r3, #12]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	4928      	ldr	r1, [pc, #160]	; (8008e60 <_ZN6tflite16MicroInterpreter6outputEj+0xc4>)
 8008dc0:	f7fb fb16 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e046      	b.n	8008e56 <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (index != 0) {
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d01f      	beq.n	8008e0e <_ZN6tflite16MicroInterpreter6outputEj+0x72>
    TF_LITE_REPORT_ERROR(
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	4924      	ldr	r1, [pc, #144]	; (8008e64 <_ZN6tflite16MicroInterpreter6outputEj+0xc8>)
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fb fb0b 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Output tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     outputs().Get(index));
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	685e      	ldr	r6, [r3, #4]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dee:	607b      	str	r3, [r7, #4]
                                                     outputs().Get(index));
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff fbd8 	bl	80085a6 <_ZNK6tflite16MicroInterpreter7outputsEv>
 8008df6:	4603      	mov	r3, r0
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fb fdc8 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008e00:	4603      	mov	r3, r0
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4631      	mov	r1, r6
 8008e06:	4628      	mov	r0, r5
 8008e08:	47a0      	blx	r4
 8008e0a:	4603      	mov	r3, r0
                                                     outputs().Get(index));
 8008e0c:	e023      	b.n	8008e56 <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (output_tensor_ == nullptr) {
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d11b      	bne.n	8008e50 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>
    // TODO(b/160894903): This API will allocate TfLiteTensor structs from
    // persistent (tail) memory and cache on this pointer.
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, outputs().Get(index));
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681c      	ldr	r4, [r3, #0]
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	685e      	ldr	r6, [r3, #4]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e2c:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, outputs().Get(index));
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f7ff fbb9 	bl	80085a6 <_ZNK6tflite16MicroInterpreter7outputsEv>
 8008e34:	4603      	mov	r3, r0
 8008e36:	68b9      	ldr	r1, [r7, #8]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fb fda9 	bl	8004990 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008e3e:	4603      	mov	r3, r0
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	4631      	mov	r1, r6
 8008e44:	4628      	mov	r0, r5
 8008e46:	47a0      	blx	r4
 8008e48:	4602      	mov	r2, r0
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
  return output_tensor_;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	08011e04 	.word	0x08011e04
 8008e64:	08011e30 	.word	0x08011e30

08008e68 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
  }
  return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                   index);
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8008e70:	2300      	movs	r3, #0
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fd f83f 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe fea9 	bl	8007bd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008e86:	4602      	mov	r2, r0
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	bf34      	ite	cc
 8008e8e:	2301      	movcc	r3, #1
 8008e90:	2300      	movcs	r3, #0
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d054      	beq.n	8008f42 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xda>
    auto* tensor = subgraph_->tensors()->Get(i);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fd f82d 	bl	8005efc <_ZNK6tflite8SubGraph7tensorsEv>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	69f9      	ldr	r1, [r7, #28]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fea4 	bl	8007bf4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008eac:	6178      	str	r0, [r7, #20]
    if (tensor->is_variable()) {
 8008eae:	6978      	ldr	r0, [r7, #20]
 8008eb0:	f7fc ffd7 	bl	8005e62 <_ZNK6tflite6Tensor11is_variableEv>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d03f      	beq.n	8008f3a <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd2>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	f107 020c 	add.w	r2, r7, #12
 8008ece:	4611      	mov	r1, r2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fc ff32 	bl	8005d3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	74fb      	strb	r3, [r7, #19]
 8008eda:	7cfb      	ldrb	r3, [r7, #19]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7c>
 8008ee0:	7cfb      	ldrb	r3, [r7, #19]
 8008ee2:	e02f      	b.n	8008f44 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xdc>
          TfLiteEvalTensorByteLength(&eval_tensors_[i], &buffer_size));

      int value = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	61bb      	str	r3, [r7, #24]
      if (tensor->type() == tflite::TensorType_INT8) {
 8008ee8:	6978      	ldr	r0, [r7, #20]
 8008eea:	f7fc fd61 	bl	80059b0 <_ZNK6tflite6Tensor4typeEv>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b09      	cmp	r3, #9
 8008ef2:	bf0c      	ite	eq
 8008ef4:	2301      	moveq	r3, #1
 8008ef6:	2300      	movne	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00f      	beq.n	8008f1e <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xb6>
        value = tensor->quantization()->zero_point()->Get(0);
 8008efe:	6978      	ldr	r0, [r7, #20]
 8008f00:	f7fc ffa1 	bl	8005e46 <_ZNK6tflite6Tensor12quantizationEv>
 8008f04:	4603      	mov	r3, r0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fc ff71 	bl	8005dee <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe fe39 	bl	8007b88 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
      }
      memset(eval_tensors_[i].data.raw, value, buffer_size);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	4613      	mov	r3, r2
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	4413      	add	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	440b      	add	r3, r1
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	69b9      	ldr	r1, [r7, #24]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f003 fa0f 	bl	800c358 <memset>
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e798      	b.n	8008e74 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xc>
    }
  }

  return kTfLiteOk;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d20e      	bcs.n	8008f86 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	617a      	str	r2, [r7, #20]
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	613a      	str	r2, [r7, #16]
 8008f80:	7bfa      	ldrb	r2, [r7, #15]
 8008f82:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 8008f84:	e7ec      	b.n	8008f60 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 8008f86:	687b      	ldr	r3, [r7, #4]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	371c      	adds	r7, #28
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  char* current = main;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8008fb2:	e7f7      	b.n	8008fa4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00e      	beq.n	8008fe4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d20a      	bcs.n	8008fe4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	781a      	ldrb	r2, [r3, #0]
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	701a      	strb	r2, [r3, #0]
    ++current;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	617b      	str	r3, [r7, #20]
    ++to_append;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8008fe2:	e7ec      	b.n	8008fbe <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	701a      	strb	r2, [r3, #0]
  return current;
 8008fea:	697b      	ldr	r3, [r7, #20]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009010:	fb02 f201 	mul.w	r2, r2, r1
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b09      	cmp	r3, #9
 800901c:	dc04      	bgt.n	8009028 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	b2db      	uxtb	r3, r3
 8009022:	3330      	adds	r3, #48	; 0x30
 8009024:	77fb      	strb	r3, [r7, #31]
 8009026:	e003      	b.n	8009030 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	3357      	adds	r3, #87	; 0x57
 800902e:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	60ba      	str	r2, [r7, #8]
 8009036:	7ffa      	ldrb	r2, [r7, #31]
 8009038:	701a      	strb	r2, [r3, #0]
    i /= base;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009042:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d000      	beq.n	800904c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800904a:	e7dd      	b.n	8009008 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2200      	movs	r2, #0
 8009050:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 8009052:	68b9      	ldr	r1, [r7, #8]
 8009054:	69b8      	ldr	r0, [r7, #24]
 8009056:	f7ff ff79 	bl	8008f4c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800905a:	68bb      	ldr	r3, [r7, #8]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	da07      	bge.n	8009088 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	603a      	str	r2, [r7, #0]
 800907e:	222d      	movs	r2, #45	; 0x2d
 8009080:	701a      	strb	r2, [r3, #0]
    u = -u;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	425b      	negs	r3, r3
 8009086:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8009088:	220a      	movs	r2, #10
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff ffb3 	bl	8008ff8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8009092:	4603      	mov	r3, r0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800909c:	b580      	push	{r7, lr}
 800909e:	b090      	sub	sp, #64	; 0x40
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 80090a8:	f107 0310 	add.w	r3, r7, #16
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff ffd8 	bl	8009064 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 80090b4:	f107 0310 	add.w	r3, r7, #16
 80090b8:	461a      	mov	r2, r3
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f7ff ff69 	bl	8008f94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80090c2:	4603      	mov	r3, r0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3740      	adds	r7, #64	; 0x40
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b090      	sub	sp, #64	; 0x40
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 80090da:	f107 0310 	add.w	r3, r7, #16
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff ff88 	bl	8008ff8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 80090e8:	f107 0310 	add.w	r3, r7, #16
 80090ec:	461a      	mov	r2, r3
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7ff ff4f 	bl	8008f94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80090f6:	4603      	mov	r3, r0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3740      	adds	r7, #64	; 0x40
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 8009100:	b590      	push	{r4, r7, lr}
 8009102:	b09b      	sub	sp, #108	; 0x6c
 8009104:	af00      	add	r7, sp, #0
 8009106:	ed87 0a01 	vstr	s0, [r7, #4]
 800910a:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	332f      	adds	r3, #47	; 0x2f
 8009114:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 8009116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800911a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800911c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8009120:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 8009122:	2317      	movs	r3, #23
 8009124:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 8009126:	237f      	movs	r3, #127	; 0x7f
 8009128:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800912a:	4b69      	ldr	r3, [pc, #420]	; (80092d0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d0>)
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
 800912e:	1d3b      	adds	r3, r7, #4
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8009134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009136:	0ddb      	lsrs	r3, r3, #23
 8009138:	b2db      	uxtb	r3, r3
 800913a:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
  const uint32_t fraction = (u & fraction_mask);
 800913e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009140:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009144:	633b      	str	r3, [r7, #48]	; 0x30
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	2b00      	cmp	r3, #0
 800914a:	da05      	bge.n	8009158 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x58>
    *current = '-';
 800914c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800914e:	222d      	movs	r2, #45	; 0x2d
 8009150:	701a      	strb	r2, [r3, #0]
    current += 1;
 8009152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009154:	3301      	adds	r3, #1
 8009156:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 8009158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800915a:	2200      	movs	r2, #0
 800915c:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800915e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009160:	2b80      	cmp	r3, #128	; 0x80
 8009162:	d118      	bne.n	8009196 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
    if (fraction == 0) {
 8009164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x80>
      current = StrCatStr(current, (current_end - current), "Inf");
 800916a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800916c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	4a58      	ldr	r2, [pc, #352]	; (80092d4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 8009172:	4619      	mov	r1, r3
 8009174:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009176:	f7ff ff0d 	bl	8008f94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800917a:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800917c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917e:	e0a2      	b.n	80092c6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 8009180:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	4a54      	ldr	r2, [pc, #336]	; (80092d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 8009188:	4619      	mov	r1, r3
 800918a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800918c:	f7ff ff02 	bl	8008f94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009190:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8009192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009194:	e097      	b.n	80092c6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 8009196:	230d      	movs	r3, #13
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800919a:	4b50      	ldr	r3, [pc, #320]	; (80092dc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800919c:	f107 040c 	add.w	r4, r7, #12
 80091a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80091a2:	c407      	stmia	r4!, {r0, r1, r2}
 80091a4:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 80091aa:	2300      	movs	r3, #0
 80091ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091b0:	2b0c      	cmp	r3, #12
 80091b2:	dc0f      	bgt.n	80091d4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd4>
    scaled_fraction += (fraction >> scale_shifts[i]);
 80091b4:	f107 020c 	add.w	r2, r7, #12
 80091b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ba:	4413      	add	r3, r2
 80091bc:	f993 3000 	ldrsb.w	r3, [r3]
 80091c0:	461a      	mov	r2, r3
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	40d3      	lsrs	r3, r2
 80091c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091c8:	4413      	add	r3, r2
 80091ca:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 80091cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ce:	3301      	adds	r3, #1
 80091d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091d2:	e7ec      	b.n	80091ae <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xae>
  }
  *current = '1';
 80091d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091d6:	2231      	movs	r2, #49	; 0x31
 80091d8:	701a      	strb	r2, [r3, #0]
  current += 1;
 80091da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091dc:	3301      	adds	r3, #1
 80091de:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 80091e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091e2:	222e      	movs	r2, #46	; 0x2e
 80091e4:	701a      	strb	r2, [r3, #0]
  current += 1;
 80091e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091e8:	3301      	adds	r3, #1
 80091ea:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 80091ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ee:	2200      	movs	r2, #0
 80091f0:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 80091f2:	2307      	movs	r3, #7
 80091f4:	62bb      	str	r3, [r7, #40]	; 0x28

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 80091f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	2b07      	cmp	r3, #7
 80091fe:	dc01      	bgt.n	8009204 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>
    return current;
 8009200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009202:	e060      	b.n	80092c6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8009204:	2301      	movs	r3, #1
 8009206:	65bb      	str	r3, [r7, #88]	; 0x58
 8009208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800920a:	2b06      	cmp	r3, #6
 800920c:	dc08      	bgt.n	8009220 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x120>
    *(current + i) = '0';
 800920e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009210:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009212:	4413      	add	r3, r2
 8009214:	2230      	movs	r2, #48	; 0x30
 8009216:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8009218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800921a:	3301      	adds	r3, #1
 800921c:	65bb      	str	r3, [r7, #88]	; 0x58
 800921e:	e7f3      	b.n	8009208 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 8009220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009222:	627b      	str	r3, [r7, #36]	; 0x24
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 8009224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009228:	1ad1      	subs	r1, r2, r3
 800922a:	230a      	movs	r3, #10
 800922c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800922e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009230:	f7ff ff4c 	bl	80090cc <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 8009234:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 8009236:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	623b      	str	r3, [r7, #32]
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	f1c3 0307 	rsb	r3, r3, #7
 8009244:	61fb      	str	r3, [r7, #28]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 8009246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009248:	2230      	movs	r2, #48	; 0x30
 800924a:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepent zeros.
  for (int i = 0; i < fraction_digits; i++) {
 800924c:	2300      	movs	r3, #0
 800924e:	657b      	str	r3, [r7, #84]	; 0x54
 8009250:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	429a      	cmp	r2, r3
 8009256:	da0f      	bge.n	8009278 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x178>
    current--;
 8009258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800925a:	3b01      	subs	r3, #1
 800925c:	667b      	str	r3, [r7, #100]	; 0x64
    *(current + leading_zeros) = *current;
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009262:	4413      	add	r3, r2
 8009264:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009266:	7812      	ldrb	r2, [r2, #0]
 8009268:	701a      	strb	r2, [r3, #0]
    *current = '0';
 800926a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800926c:	2230      	movs	r2, #48	; 0x30
 800926e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < fraction_digits; i++) {
 8009270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009272:	3301      	adds	r3, #1
 8009274:	657b      	str	r3, [r7, #84]	; 0x54
 8009276:	e7eb      	b.n	8009250 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x150>
  }
  current += kMaxFractionalDigits;
 8009278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927a:	3307      	adds	r3, #7
 800927c:	667b      	str	r3, [r7, #100]	; 0x64

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800927e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009280:	3b01      	subs	r3, #1
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b30      	cmp	r3, #48	; 0x30
 8009286:	d108      	bne.n	800929a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19a>
 8009288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800928a:	3b01      	subs	r3, #1
 800928c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928e:	429a      	cmp	r2, r3
 8009290:	d203      	bcs.n	800929a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19a>
    current--;
 8009292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009294:	3b01      	subs	r3, #1
 8009296:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8009298:	e7f1      	b.n	800927e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17e>
  }
  *current = 0;
 800929a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800929c:	2200      	movs	r2, #0
 800929e:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 80092a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	4a0e      	ldr	r2, [pc, #56]	; (80092e0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 80092a8:	4619      	mov	r1, r3
 80092aa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80092ac:	f7ff fe72 	bl	8008f94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80092b0:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 80092b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ba:	4619      	mov	r1, r3
 80092bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80092be:	f7ff feed 	bl	800909c <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 80092c2:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 80092c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	376c      	adds	r7, #108	; 0x6c
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd90      	pop	{r4, r7, pc}
 80092ce:	bf00      	nop
 80092d0:	007fffff 	.word	0x007fffff
 80092d4:	08012314 	.word	0x08012314
 80092d8:	08012318 	.word	0x08012318
 80092dc:	08012320 	.word	0x08012320
 80092e0:	0801231c 	.word	0x0801231c

080092e4 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	6838      	ldr	r0, [r7, #0]
 80092f2:	f7ff feb7 	bl	8009064 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 80092f6:	4602      	mov	r2, r0
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	1ad3      	subs	r3, r2, r3
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800930e:	220a      	movs	r2, #10
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	6838      	ldr	r0, [r7, #0]
 8009314:	f7ff fe70 	bl	8008ff8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8009318:	4602      	mov	r2, r0
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	1ad3      	subs	r3, r2, r3
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8009330:	2210      	movs	r2, #16
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	6838      	ldr	r0, [r7, #0]
 8009336:	f7ff fe5f 	bl	8008ff8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800933a:	4602      	mov	r2, r0
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	1ad3      	subs	r3, r2, r3
}
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	ed97 0a00 	vldr	s0, [r7]
 800935a:	f7ff fed1 	bl	8009100 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800935e:	4602      	mov	r2, r0
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	1ad3      	subs	r3, r2, r3
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800936c:	b590      	push	{r4, r7, lr}
 800936e:	b08b      	sub	sp, #44	; 0x2c
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	3b01      	subs	r3, #1
 8009386:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8130 	beq.w	80095f2 <MicroVsnprintf+0x286>
 8009392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	429a      	cmp	r2, r3
 8009398:	f280 812b 	bge.w	80095f2 <MicroVsnprintf+0x286>
    if (*current == '%') {
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b25      	cmp	r3, #37	; 0x25
 80093a2:	f040 811a 	bne.w	80095da <MicroVsnprintf+0x26e>
      current++;
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	3301      	adds	r3, #1
 80093aa:	623b      	str	r3, [r7, #32]
      switch (*current) {
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b25      	cmp	r3, #37	; 0x25
 80093b2:	f000 80e0 	beq.w	8009576 <MicroVsnprintf+0x20a>
 80093b6:	2b25      	cmp	r3, #37	; 0x25
 80093b8:	dbe6      	blt.n	8009388 <MicroVsnprintf+0x1c>
 80093ba:	2b78      	cmp	r3, #120	; 0x78
 80093bc:	dce4      	bgt.n	8009388 <MicroVsnprintf+0x1c>
 80093be:	2b64      	cmp	r3, #100	; 0x64
 80093c0:	dbe2      	blt.n	8009388 <MicroVsnprintf+0x1c>
 80093c2:	3b64      	subs	r3, #100	; 0x64
 80093c4:	2b14      	cmp	r3, #20
 80093c6:	d8df      	bhi.n	8009388 <MicroVsnprintf+0x1c>
 80093c8:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <MicroVsnprintf+0x64>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	08009425 	.word	0x08009425
 80093d4:	08009389 	.word	0x08009389
 80093d8:	0800950b 	.word	0x0800950b
 80093dc:	08009389 	.word	0x08009389
 80093e0:	08009389 	.word	0x08009389
 80093e4:	08009389 	.word	0x08009389
 80093e8:	08009389 	.word	0x08009389
 80093ec:	08009389 	.word	0x08009389
 80093f0:	08009389 	.word	0x08009389
 80093f4:	08009389 	.word	0x08009389
 80093f8:	08009389 	.word	0x08009389
 80093fc:	08009389 	.word	0x08009389
 8009400:	08009389 	.word	0x08009389
 8009404:	08009389 	.word	0x08009389
 8009408:	08009389 	.word	0x08009389
 800940c:	0800958f 	.word	0x0800958f
 8009410:	08009389 	.word	0x08009389
 8009414:	08009467 	.word	0x08009467
 8009418:	08009389 	.word	0x08009389
 800941c:	08009389 	.word	0x08009389
 8009420:	080094a9 	.word	0x080094a9
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b0a      	cmp	r3, #10
 800942c:	dc09      	bgt.n	8009442 <MicroVsnprintf+0xd6>
            output[output_index++] = '\0';
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	627a      	str	r2, [r7, #36]	; 0x24
 8009434:	461a      	mov	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4413      	add	r3, r2
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	e0e0      	b.n	8009604 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	18d0      	adds	r0, r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	1d1a      	adds	r2, r3, #4
 800944c:	603a      	str	r2, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4619      	mov	r1, r3
 8009452:	f7ff ff47 	bl	80092e4 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 8009456:	4602      	mov	r2, r0
          output_index +=
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	4413      	add	r3, r2
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	3301      	adds	r3, #1
 8009462:	623b      	str	r3, [r7, #32]
          break;
 8009464:	e0c4      	b.n	80095f0 <MicroVsnprintf+0x284>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	2b0a      	cmp	r3, #10
 800946e:	dc09      	bgt.n	8009484 <MicroVsnprintf+0x118>
            output[output_index++] = '\0';
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	627a      	str	r2, [r7, #36]	; 0x24
 8009476:	461a      	mov	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	2200      	movs	r2, #0
 800947e:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	e0bf      	b.n	8009604 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	18d0      	adds	r0, r2, r3
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	1d1a      	adds	r2, r3, #4
 800948e:	603a      	str	r2, [r7, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4619      	mov	r1, r3
 8009494:	f7ff ff36 	bl	8009304 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 8009498:	4602      	mov	r2, r0
          output_index +=
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	4413      	add	r3, r2
 800949e:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	3301      	adds	r3, #1
 80094a4:	623b      	str	r3, [r7, #32]
          break;
 80094a6:	e0a3      	b.n	80095f0 <MicroVsnprintf+0x284>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	2b09      	cmp	r3, #9
 80094b0:	dc09      	bgt.n	80094c6 <MicroVsnprintf+0x15a>
            output[output_index++] = '\0';
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	627a      	str	r2, [r7, #36]	; 0x24
 80094b8:	461a      	mov	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4413      	add	r3, r2
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]
            return output_index;
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	e09e      	b.n	8009604 <MicroVsnprintf+0x298>
          }
          output[output_index++] = '0';
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	627a      	str	r2, [r7, #36]	; 0x24
 80094cc:	461a      	mov	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4413      	add	r3, r2
 80094d2:	2230      	movs	r2, #48	; 0x30
 80094d4:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	627a      	str	r2, [r7, #36]	; 0x24
 80094dc:	461a      	mov	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4413      	add	r3, r2
 80094e2:	2278      	movs	r2, #120	; 0x78
 80094e4:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	18d0      	adds	r0, r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	1d1a      	adds	r2, r3, #4
 80094f0:	603a      	str	r2, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4619      	mov	r1, r3
 80094f6:	f7ff ff16 	bl	8009326 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 80094fa:	4602      	mov	r2, r0
          output_index +=
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	4413      	add	r3, r2
 8009500:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	3301      	adds	r3, #1
 8009506:	623b      	str	r3, [r7, #32]
          break;
 8009508:	e072      	b.n	80095f0 <MicroVsnprintf+0x284>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800950a:	69ba      	ldr	r2, [r7, #24]
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	ee07 3a90 	vmov	s15, r3
 8009514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009518:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800951c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009524:	d509      	bpl.n	800953a <MicroVsnprintf+0x1ce>
            output[output_index++] = '\0';
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	627a      	str	r2, [r7, #36]	; 0x24
 800952c:	461a      	mov	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	4413      	add	r3, r2
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	e064      	b.n	8009604 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	18d4      	adds	r4, r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	3307      	adds	r3, #7
 8009544:	f023 0307 	bic.w	r3, r3, #7
 8009548:	f103 0208 	add.w	r2, r3, #8
 800954c:	603a      	str	r2, [r7, #0]
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	4610      	mov	r0, r2
 8009554:	4619      	mov	r1, r3
 8009556:	f7f7 fb37 	bl	8000bc8 <__aeabi_d2f>
 800955a:	4603      	mov	r3, r0
 800955c:	ee00 3a10 	vmov	s0, r3
 8009560:	4620      	mov	r0, r4
 8009562:	f7ff fef1 	bl	8009348 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 8009566:	4602      	mov	r2, r0
          output_index +=
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	4413      	add	r3, r2
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	3301      	adds	r3, #1
 8009572:	623b      	str	r3, [r7, #32]
          break;
 8009574:	e03c      	b.n	80095f0 <MicroVsnprintf+0x284>
        case '%':
          output[output_index++] = *current++;
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	1c5a      	adds	r2, r3, #1
 800957a:	623a      	str	r2, [r7, #32]
 800957c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800957e:	1c51      	adds	r1, r2, #1
 8009580:	6279      	str	r1, [r7, #36]	; 0x24
 8009582:	4611      	mov	r1, r2
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	440a      	add	r2, r1
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	7013      	strb	r3, [r2, #0]
          break;
 800958c:	e030      	b.n	80095f0 <MicroVsnprintf+0x284>
        case 's':
          char* string = va_arg(args, char*);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	1d1a      	adds	r2, r3, #4
 8009592:	603a      	str	r2, [r7, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	4413      	add	r3, r2
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	dd14      	ble.n	80095d2 <MicroVsnprintf+0x266>
                 string[string_idx] != '\0') {
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	4413      	add	r3, r2
 80095ae:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00e      	beq.n	80095d2 <MicroVsnprintf+0x266>
            output[output_index++] = string[string_idx++];
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	61fa      	str	r2, [r7, #28]
 80095ba:	461a      	mov	r2, r3
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	441a      	add	r2, r3
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	1c59      	adds	r1, r3, #1
 80095c4:	6279      	str	r1, [r7, #36]	; 0x24
 80095c6:	4619      	mov	r1, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	440b      	add	r3, r1
 80095cc:	7812      	ldrb	r2, [r2, #0]
 80095ce:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80095d0:	e7e4      	b.n	800959c <MicroVsnprintf+0x230>
          }
          current++;
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	3301      	adds	r3, #1
 80095d6:	623b      	str	r3, [r7, #32]
 80095d8:	e6d6      	b.n	8009388 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	623a      	str	r2, [r7, #32]
 80095e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e2:	1c51      	adds	r1, r2, #1
 80095e4:	6279      	str	r1, [r7, #36]	; 0x24
 80095e6:	4611      	mov	r1, r2
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	440a      	add	r2, r1
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 80095f0:	e6ca      	b.n	8009388 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	627a      	str	r2, [r7, #36]	; 0x24
 80095f8:	461a      	mov	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4413      	add	r3, r2
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
  return output_index;
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009604:	4618      	mov	r0, r3
 8009606:	372c      	adds	r7, #44	; 0x2c
 8009608:	46bd      	mov	sp, r7
 800960a:	bd90      	pop	{r4, r7, pc}

0800960c <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>:
  return result;
}

// Converts a float value into an unsigned eight-bit quantized value.
uint8_t FloatToAsymmetricQuantizedUInt8(const float value, const float scale,
                                        const int zero_point) {
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	ed87 0a03 	vstr	s0, [r7, #12]
 8009616:	edc7 0a02 	vstr	s1, [r7, #8]
 800961a:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 800961c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009620:	edd7 7a02 	vldr	s15, [r7, #8]
 8009624:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009628:	eeb0 0a66 	vmov.f32	s0, s13
 800962c:	f7fb fddf 	bl	80051ee <_ZSt5roundf>
 8009630:	eeb0 7a40 	vmov.f32	s14, s0
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800963e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009646:	ee17 3a90 	vmov	r3, s15
 800964a:	617b      	str	r3, [r7, #20]
  if (result < kAsymmetricUInt8Min) {
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2b00      	cmp	r3, #0
 8009650:	da01      	bge.n	8009656 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi+0x4a>
    result = kAsymmetricUInt8Min;
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]
  }
  if (result > kAsymmetricUInt8Max) {
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2bff      	cmp	r3, #255	; 0xff
 800965a:	dd01      	ble.n	8009660 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi+0x54>
    result = kAsymmetricUInt8Max;
 800965c:	23ff      	movs	r3, #255	; 0xff
 800965e:	617b      	str	r3, [r7, #20]
  }
  return result;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	b2db      	uxtb	r3, r3
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>:
  }
  return result;
}

int8_t FloatToAsymmetricQuantizedInt8(const float value, const float scale,
                                      const int zero_point) {
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	ed87 0a03 	vstr	s0, [r7, #12]
 8009676:	edc7 0a02 	vstr	s1, [r7, #8]
 800967a:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 800967c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009680:	edd7 7a02 	vldr	s15, [r7, #8]
 8009684:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009688:	eeb0 0a66 	vmov.f32	s0, s13
 800968c:	f7fb fdaf 	bl	80051ee <_ZSt5roundf>
 8009690:	eeb0 7a40 	vmov.f32	s14, s0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800969e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80096a6:	ee17 3a90 	vmov	r3, s15
 80096aa:	617b      	str	r3, [r7, #20]
  if (result < kAsymmetricInt8Min) {
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80096b2:	da02      	bge.n	80096ba <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi+0x4e>
    result = kAsymmetricInt8Min;
 80096b4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80096b8:	617b      	str	r3, [r7, #20]
  }
  if (result > kAsymmetricInt8Max) {
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b7f      	cmp	r3, #127	; 0x7f
 80096be:	dd01      	ble.n	80096c4 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi+0x58>
    result = kAsymmetricInt8Max;
 80096c0:	237f      	movs	r3, #127	; 0x7f
 80096c2:	617b      	str	r3, [r7, #20]
  }
  return result;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	b25b      	sxtb	r3, r3
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
 80096da:	4a11      	ldr	r2, [pc, #68]	; (8009720 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	605a      	str	r2, [r3, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	609a      	str	r2, [r3, #8]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	68da      	ldr	r2, [r3, #12]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	60da      	str	r2, [r3, #12]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	611a      	str	r2, [r3, #16]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	695a      	ldr	r2, [r3, #20]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	615a      	str	r2, [r3, #20]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	699a      	ldr	r2, [r3, #24]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	619a      	str	r2, [r3, #24]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	08012be8 	.word	0x08012be8

08009724 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8009732:	4a0e      	ldr	r2, [pc, #56]	; (800976c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	605a      	str	r2, [r3, #4]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	609a      	str	r2, [r3, #8]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	60da      	str	r2, [r3, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	611a      	str	r2, [r3, #16]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	615a      	str	r2, [r3, #20]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	619a      	str	r2, [r3, #24]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	08012be8 	.word	0x08012be8

08009770 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	4413      	add	r3, r2
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	68b9      	ldr	r1, [r7, #8]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f7ff ffcb 	bl	8009724 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8009798:	b590      	push	{r4, r7, lr}
 800979a:	b08d      	sub	sp, #52	; 0x34
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 80097aa:	f002 fd31 	bl	800c210 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 80097b4:	f002 fd2c 	bl	800c210 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 80097b8:	f107 0010 	add.w	r0, r7, #16
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	68f9      	ldr	r1, [r7, #12]
 80097c2:	f7ff ffd5 	bl	8009770 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 80097c6:	f107 0310 	add.w	r3, r7, #16
 80097ca:	2204      	movs	r2, #4
 80097cc:	211c      	movs	r1, #28
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 f860 	bl	8009894 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 80097d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	4619      	mov	r1, r3
 80097da:	201c      	movs	r0, #28
 80097dc:	f7fa fe3b 	bl	8004456 <_ZnwjPv>
 80097e0:	4604      	mov	r4, r0
 80097e2:	f107 0310 	add.w	r3, r7, #16
 80097e6:	4619      	mov	r1, r3
 80097e8:	4620      	mov	r0, r4
 80097ea:	f7ff ff71 	bl	80096d0 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 80097ee:	f107 0310 	add.w	r3, r7, #16
 80097f2:	4618      	mov	r0, r3
 80097f4:	f000 f806 	bl	8009804 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 80097f8:	4623      	mov	r3, r4
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3734      	adds	r7, #52	; 0x34
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd90      	pop	{r4, r7, pc}
	...

08009804 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	4a04      	ldr	r2, [pc, #16]	; (8009820 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	08012be8 	.word	0x08012be8

08009824 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff ffe9 	bl	8009804 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8009832:	211c      	movs	r1, #28
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f002 fc03 	bl	800c040 <_ZdlPvj>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	429a      	cmp	r2, r3
 800985a:	d007      	beq.n	800986c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x28>
    TF_LITE_REPORT_ERROR(
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	490b      	ldr	r1, [pc, #44]	; (8009890 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x4c>)
 8009862:	4618      	mov	r0, r3
 8009864:	f7fa fdc4 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Called AllocateFromHead() after AllocateTemp() without resetting temp "
        "allocations with ResetTempAllocations()");
    return nullptr;
 8009868:	2300      	movs	r3, #0
 800986a:	e00d      	b.n	8009888 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x44>
  }

  uint8_t* ret = AllocateTemp(size, alignment);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3310      	adds	r3, #16
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	68b9      	ldr	r1, [r7, #8]
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	4798      	blx	r3
 800987c:	6178      	str	r0, [r7, #20]
  head_ = temp_;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	699a      	ldr	r2, [r3, #24]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	611a      	str	r2, [r3, #16]
  return ret;
 8009886:	697b      	ldr	r3, [r7, #20]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	08012344 	.word	0x08012344

08009894 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	695a      	ldr	r2, [r3, #20]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	425b      	negs	r3, r3
 80098a8:	4413      	add	r3, r2
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fc f961 	bl	8005b74 <_ZN6tflite16AlignPointerDownEPhj>
 80098b2:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d212      	bcs.n	80098e4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6858      	ldr	r0, [r3, #4]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	1ad2      	subs	r2, r2, r3
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	4613      	mov	r3, r2
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	4906      	ldr	r1, [pc, #24]	; (80098f4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 80098dc:	f7fa fd88 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 80098e0:	2300      	movs	r3, #0
 80098e2:	e003      	b.n	80098ec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	615a      	str	r2, [r3, #20]
  return aligned_result;
 80098ea:	697b      	ldr	r3, [r7, #20]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	080123b4 	.word	0x080123b4

080098f8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	4618      	mov	r0, r3
 800990c:	f7fc f919 	bl	8005b42 <_ZN6tflite14AlignPointerUpEPhj>
 8009910:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	695a      	ldr	r2, [r3, #20]
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	429a      	cmp	r2, r3
 8009922:	d20c      	bcs.n	800993e <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6858      	ldr	r0, [r3, #4]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	4907      	ldr	r1, [pc, #28]	; (8009954 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 8009936:	f7fa fd5b 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 800993a:	2300      	movs	r3, #0
 800993c:	e005      	b.n	800994a <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	441a      	add	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	619a      	str	r2, [r3, #24]
  return aligned_result;
 8009948:	697b      	ldr	r3, [r7, #20]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	080123b4 	.word	0x080123b4

08009958 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691a      	ldr	r2, [r3, #16]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	619a      	str	r2, [r3, #24]
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	4618      	mov	r0, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  return tail_ - head_;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	695a      	ldr	r2, [r3, #20]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	1ad3      	subs	r3, r2, r3
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 80099c2:	b480      	push	{r7}
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099ca:	4618      	mov	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80099dc:	ee07 3a90 	vmov	s15, r3
 80099e0:	eeb0 0a67 	vmov.f32	s0, s15
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 80099ec:	b5b0      	push	{r4, r5, r7, lr}
 80099ee:	b08c      	sub	sp, #48	; 0x30
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d107      	bne.n	8009a0e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 80099fe:	f7ff ffe0 	bl	80099c2 <_ZNSt14numeric_limitsIlE3minEv>
 8009a02:	4602      	mov	r2, r0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d101      	bne.n	8009a0e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e000      	b.n	8009a10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	461a      	mov	r2, r3
 8009a18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8009a1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8009a28:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	fb02 f203 	mul.w	r2, r2, r3
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	6a39      	ldr	r1, [r7, #32]
 8009a38:	fb01 f303 	mul.w	r3, r1, r3
 8009a3c:	18d1      	adds	r1, r2, r3
 8009a3e:	6a3a      	ldr	r2, [r7, #32]
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	fba2 2303 	umull	r2, r3, r2, r3
 8009a46:	4419      	add	r1, r3
 8009a48:	460b      	mov	r3, r1
 8009a4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009a4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009a52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009a56:	2a00      	cmp	r2, #0
 8009a58:	f173 0300 	sbcs.w	r3, r3, #0
 8009a5c:	db02      	blt.n	8009a64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8009a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a62:	e000      	b.n	8009a66 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 8009a64:	4b18      	ldr	r3, [pc, #96]	; (8009ac8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8009a66:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8009a70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009a74:	1884      	adds	r4, r0, r2
 8009a76:	eb41 0503 	adc.w	r5, r1, r3
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	2a00      	cmp	r2, #0
 8009a80:	f173 0100 	sbcs.w	r1, r3, #0
 8009a84:	da06      	bge.n	8009a94 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8009a86:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8009a8a:	f04f 0100 	mov.w	r1, #0
 8009a8e:	1812      	adds	r2, r2, r0
 8009a90:	eb41 0303 	adc.w	r3, r1, r3
 8009a94:	f04f 0000 	mov.w	r0, #0
 8009a98:	f04f 0100 	mov.w	r1, #0
 8009a9c:	0fd0      	lsrs	r0, r2, #31
 8009a9e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8009aa2:	17d9      	asrs	r1, r3, #31
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d003      	beq.n	8009abc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8009ab4:	f7fb fbab 	bl	800520e <_ZNSt14numeric_limitsIlE3maxEv>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	e000      	b.n	8009abe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 8009abc:	68bb      	ldr	r3, [r7, #8]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3730      	adds	r7, #48	; 0x30
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	c0000001 	.word	0xc0000001

08009acc <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	da01      	bge.n	8009ae0 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8009adc:	f002 fb98 	bl	800c210 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	db01      	blt.n	8009aee <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8009aea:	f002 fb91 	bl	800c210 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b05      	cmp	r3, #5
 8009af4:	dd06      	ble.n	8009b04 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	e004      	b.n	8009b0e <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	685b      	ldr	r3, [r3, #4]
  }
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b05      	cmp	r3, #5
 8009b24:	dd02      	ble.n	8009b2c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	e001      	b.n	8009b30 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3304      	adds	r3, #4
  }
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8009b44:	2301      	movs	r3, #1
 8009b46:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff ffe4 	bl	8009b16 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8009b4e:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8009b50:	2300      	movs	r3, #0
 8009b52:	613b      	str	r3, [r7, #16]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	da0c      	bge.n	8009b78 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	fb02 f303 	mul.w	r3, r2, r3
 8009b6e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	3301      	adds	r3, #1
 8009b74:	613b      	str	r3, [r7, #16]
 8009b76:	e7ed      	b.n	8009b54 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8009b78:	697b      	ldr	r3, [r7, #20]
  }
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8009b82:	b590      	push	{r4, r7, lr}
 8009b84:	b085      	sub	sp, #20
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7fb ff56 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009b92:	4604      	mov	r4, r0
 8009b94:	6838      	ldr	r0, [r7, #0]
 8009b96:	f7fb ff52 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d001      	beq.n	8009ba4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8009ba0:	f002 fb36 	bl	800c210 <abort>
  const int dims_count = shape.DimensionsCount();
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7fb ff4a 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009baa:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	da11      	bge.n	8009bdc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009bb8:	68f9      	ldr	r1, [r7, #12]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff ff86 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	68f9      	ldr	r1, [r7, #12]
 8009bc4:	6838      	ldr	r0, [r7, #0]
 8009bc6:	f7ff ff81 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d001      	beq.n	8009bd4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8009bd0:	f002 fb1e 	bl	800c210 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	e7e9      	b.n	8009bb0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff ffad 	bl	8009b3c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8009be2:	4603      	mov	r3, r0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd90      	pop	{r4, r7, pc}

08009bec <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009bfe:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dc02      	bgt.n	8009c0c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	425b      	negs	r3, r3
 8009c0a:	e000      	b.n	8009c0e <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	fa02 f303 	lsl.w	r3, r2, r3
 8009c18:	68b9      	ldr	r1, [r7, #8]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fee6 	bl	80099ec <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8009c20:	4603      	mov	r3, r0
 8009c22:	6939      	ldr	r1, [r7, #16]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 fac3 	bl	800a1b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8009c2a:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	; 0x28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff ff9c 	bl	8009b82 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8009c4a:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	da1d      	bge.n	8009c94 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	4413      	add	r3, r2
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8009c64:	f04f 0300 	mov.w	r3, #0
 8009c68:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8009c6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c76:	d501      	bpl.n	8009c7c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	e000      	b.n	8009c7e <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	4413      	add	r3, r2
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	3301      	adds	r3, #1
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
 8009c92:	e7dd      	b.n	8009c50 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8009c94:	bf00      	nop
 8009c96:	3728      	adds	r7, #40	; 0x28
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff ff68 	bl	8009b82 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8009cb2:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	da2a      	bge.n	8009d16 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8009ccc:	4b14      	ldr	r3, [pc, #80]	; (8009d20 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8009cce:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8009cd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8009cda:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8009cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce6:	dd01      	ble.n	8009cec <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	e009      	b.n	8009d00 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8009cec:	edd7 7a07 	vldr	s15, [r7, #28]
 8009cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf8:	d501      	bpl.n	8009cfe <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	e000      	b.n	8009d00 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	4413      	add	r3, r2
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	3301      	adds	r3, #1
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
 8009d14:	e7d0      	b.n	8009cb8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8009d16:	bf00      	nop
 8009d18:	3728      	adds	r7, #40	; 0x28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	40c00000 	.word	0x40c00000

08009d24 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8009d38:	f002 fa6a 	bl	800c210 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	211c      	movs	r1, #28
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	4798      	blx	r3
 8009d46:	4603      	mov	r3, r0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8009d62:	f002 fa55 	bl	800c210 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7fb fb7e 	bl	8005472 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8009d76:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8009d78:	2200      	movs	r2, #0
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7fb fb9e 	bl	80054be <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8009d82:	60f8      	str	r0, [r7, #12]

  if (input->type == kTfLiteInt8) {
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b09      	cmp	r3, #9
 8009d8a:	d105      	bne.n	8009d98 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x48>
    CalculateReluOpData<int8_t>(input, output, data);
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	68f9      	ldr	r1, [r7, #12]
 8009d90:	6938      	ldr	r0, [r7, #16]
 8009d92:	f000 fa81 	bl	800a298 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8009d96:	e008      	b.n	8009daa <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
  } else if (input->type == kTfLiteUInt8) {
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d104      	bne.n	8009daa <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
    CalculateReluOpData<uint8_t>(input, output, data);
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	68f9      	ldr	r1, [r7, #12]
 8009da4:	6938      	ldr	r0, [r7, #16]
 8009da6:	f000 fb19 	bl	800a3dc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8009db4:	b590      	push	{r4, r7, lr}
 8009db6:	b0ad      	sub	sp, #180	; 0xb4
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8009dc6:	f002 fa23 	bl	800c210 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f001 fcf9 	bl	800b7ce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009ddc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8009de0:	2200      	movs	r2, #0
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fd12 	bl	800b80e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8009dea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8009dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009df2:	7a1b      	ldrb	r3, [r3, #8]
 8009df4:	2b09      	cmp	r3, #9
 8009df6:	d032      	beq.n	8009e5e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8009df8:	2b09      	cmp	r3, #9
 8009dfa:	f300 808c 	bgt.w	8009f16 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d002      	beq.n	8009e08 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d059      	beq.n	8009eba <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 8009e06:	e086      	b.n	8009f16 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8009e08:	f107 030c 	add.w	r3, r7, #12
 8009e0c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009e10:	4618      	mov	r0, r3
 8009e12:	f001 fd1c 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8009e16:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009e1a:	f000 fb81 	bl	800a520 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8009e1e:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 8009e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e24:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f001 fd10 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8009e2e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8009e32:	f000 fb84 	bl	800a53e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009e3c:	f107 000c 	add.w	r0, r7, #12
 8009e40:	4621      	mov	r1, r4
 8009e42:	f7ff fef7 	bl	8009c34 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 8009e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fb fde1 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fb fddc 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	e069      	b.n	8009f32 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8009e5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009e62:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 fcf1 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8009e6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009e70:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 fcea 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8009e7a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009e7e:	f000 fb6f 	bl	800a560 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8009e82:	4604      	mov	r4, r0
 8009e84:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8009e88:	f000 fb79 	bl	800a57e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009e92:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	4623      	mov	r3, r4
 8009e9a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009e9e:	f000 fb7f 	bl	800a5a0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 8009ea2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fb fdb3 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8009eac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fb fdae 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e03b      	b.n	8009f32 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8009eba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009ebe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fcc3 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8009ec8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009ecc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 fcbc 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8009ed6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009eda:	f000 fbad 	bl	800a638 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8009ede:	4604      	mov	r4, r0
 8009ee0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8009ee4:	f000 fbb7 	bl	800a656 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8009eee:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	4623      	mov	r3, r4
 8009ef6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009efa:	f000 fbbd 	bl	800a678 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 8009efe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fb fd85 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8009f08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fb fd80 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e00d      	b.n	8009f32 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	695c      	ldr	r4, [r3, #20]
 8009f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f1e:	7a1b      	ldrb	r3, [r3, #8]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fa fa01 	bl	8004328 <TfLiteTypeGetName>
 8009f26:	4603      	mov	r3, r0
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4904      	ldr	r1, [pc, #16]	; (8009f3c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8009f30:	2301      	movs	r3, #1
    }
  }
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	37ac      	adds	r7, #172	; 0xac
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd90      	pop	{r4, r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	080123f8 	.word	0x080123f8

08009f40 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 8009f54:	f002 f95c 	bl	800c210 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	2104      	movs	r1, #4
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	4798      	blx	r3
 8009f62:	4603      	mov	r3, r0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8009f7e:	f002 f947 	bl	800c210 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009f88:	2200      	movs	r2, #0
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7fb fa70 	bl	8005472 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8009f92:	60b8      	str	r0, [r7, #8]

  if (input->type == kTfLiteInt8) {
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b09      	cmp	r3, #9
 8009f9a:	d115      	bne.n	8009fc8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    data->six_int8 = FloatToAsymmetricQuantizedInt8(6.0f, input->params.scale,
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToAsymmetricQuantizedInt8(6.0f, input->params.scale,
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	eef0 0a67 	vmov.f32	s1, s15
 8009fac:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8009fb0:	f7ff fb5c 	bl	800966c <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	b25a      	sxtb	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	705a      	strb	r2, [r3, #1]
 8009fc6:	e018      	b.n	8009ffa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
  } else if (input->type == kTfLiteUInt8) {
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d114      	bne.n	8009ffa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
    data->six_uint8 = FloatToAsymmetricQuantizedUInt8(6.0f, input->params.scale,
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	edd3 7a03 	vldr	s15, [r3, #12]
                                                      input->params.zero_point);
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToAsymmetricQuantizedUInt8(6.0f, input->params.scale,
 8009fda:	4618      	mov	r0, r3
 8009fdc:	eef0 0a67 	vmov.f32	s1, s15
 8009fe0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8009fe4:	f7ff fb12 	bl	800960c <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	461a      	mov	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 800a004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a006:	b0ad      	sub	sp, #180	; 0xb4
 800a008:	af02      	add	r7, sp, #8
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800a016:	f002 f8fb 	bl	800c210 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800a022:	2200      	movs	r2, #0
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 fbd1 	bl	800b7ce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800a02c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800a030:	2200      	movs	r2, #0
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fbea 	bl	800b80e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800a03a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 800a03e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a042:	7a1b      	ldrb	r3, [r3, #8]
 800a044:	2b09      	cmp	r3, #9
 800a046:	d032      	beq.n	800a0ae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 800a048:	2b09      	cmp	r3, #9
 800a04a:	f300 809c 	bgt.w	800a186 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d002      	beq.n	800a058 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 800a052:	2b03      	cmp	r3, #3
 800a054:	d062      	beq.n	800a11c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 800a056:	e096      	b.n	800a186 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 800a058:	f107 030c 	add.w	r3, r7, #12
 800a05c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a060:	4618      	mov	r0, r3
 800a062:	f001 fbf4 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800a066:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a06a:	f000 fa59 	bl	800a520 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800a06e:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 800a070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a074:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a078:	4618      	mov	r0, r3
 800a07a:	f001 fbe8 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 800a07e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a082:	f000 fa5c 	bl	800a53e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800a086:	4603      	mov	r3, r0
 800a088:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a08c:	f107 000c 	add.w	r0, r7, #12
 800a090:	4621      	mov	r1, r4
 800a092:	f7ff fe03 	bl	8009c9c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 800a096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fb fcb9 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 800a0a0:	f107 030c 	add.w	r3, r7, #12
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fb fcb4 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	e079      	b.n	800a1a2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800a0ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0b2:	f993 4001 	ldrsb.w	r4, [r3, #1]
 800a0b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0ba:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 800a0be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a0c2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 fbc1 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800a0cc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a0d0:	f000 fa46 	bl	800a560 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800a0d4:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 800a0d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a0da:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f001 fbb5 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800a0e4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a0e8:	f000 fa49 	bl	800a57e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a0f2:	9301      	str	r3, [sp, #4]
 800a0f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	4633      	mov	r3, r6
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 fb05 	bl	800a70e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 800a104:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fb fc82 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 800a10e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a112:	4618      	mov	r0, r3
 800a114:	f7fb fc7d 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 800a118:	2300      	movs	r3, #0
 800a11a:	e042      	b.n	800a1a2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800a11c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a120:	78dc      	ldrb	r4, [r3, #3]
 800a122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a126:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 800a128:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a12c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a130:	4618      	mov	r0, r3
 800a132:	f001 fb8c 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800a136:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a13a:	f000 fa7d 	bl	800a638 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800a13e:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 800a140:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a144:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a148:	4618      	mov	r0, r3
 800a14a:	f001 fb80 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800a14e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a152:	f000 fa80 	bl	800a656 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800a156:	4603      	mov	r3, r0
 800a158:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4633      	mov	r3, r6
 800a166:	4629      	mov	r1, r5
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fb0f 	bl	800a78c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 800a16e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a172:	4618      	mov	r0, r3
 800a174:	f7fb fc4d 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 800a178:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fb fc48 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 800a182:	2300      	movs	r3, #0
 800a184:	e00d      	b.n	800a1a2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	695c      	ldr	r4, [r3, #20]
 800a18a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a18e:	7a1b      	ldrb	r3, [r3, #8]
 800a190:	4618      	mov	r0, r3
 800a192:	f7fa f8c9 	bl	8004328 <TfLiteTypeGetName>
 800a196:	4603      	mov	r3, r0
 800a198:	461a      	mov	r2, r3
 800a19a:	4904      	ldr	r1, [pc, #16]	; (800a1ac <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800a1a0:	2301      	movs	r3, #1
    }
  }
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	37ac      	adds	r7, #172	; 0xac
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	080123f8 	.word	0x080123f8

0800a1b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800a1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1b2:	b089      	sub	sp, #36	; 0x24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	da06      	bge.n	800a1ce <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800a1c0:	4b31      	ldr	r3, [pc, #196]	; (800a288 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800a1c2:	4a32      	ldr	r2, [pc, #200]	; (800a28c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800a1c4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800a1c8:	4831      	ldr	r0, [pc, #196]	; (800a290 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800a1ca:	f002 f829 	bl	800c220 <__assert_func>
  assert(exponent <= 31);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	291f      	cmp	r1, #31
 800a1d2:	dd06      	ble.n	800a1e2 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800a1d4:	4b2f      	ldr	r3, [pc, #188]	; (800a294 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800a1d6:	4a2d      	ldr	r2, [pc, #180]	; (800a28c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800a1d8:	f240 1167 	movw	r1, #359	; 0x167
 800a1dc:	482c      	ldr	r0, [pc, #176]	; (800a290 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800a1de:	f002 f81f 	bl	800c220 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800a1e2:	f04f 0001 	mov.w	r0, #1
 800a1e6:	f04f 0100 	mov.w	r1, #0
 800a1ea:	683c      	ldr	r4, [r7, #0]
 800a1ec:	f1a4 0620 	sub.w	r6, r4, #32
 800a1f0:	f1c4 0520 	rsb	r5, r4, #32
 800a1f4:	fa01 f304 	lsl.w	r3, r1, r4
 800a1f8:	fa00 f606 	lsl.w	r6, r0, r6
 800a1fc:	4333      	orrs	r3, r6
 800a1fe:	fa20 f505 	lsr.w	r5, r0, r5
 800a202:	432b      	orrs	r3, r5
 800a204:	fa00 f204 	lsl.w	r2, r0, r4
 800a208:	4613      	mov	r3, r2
 800a20a:	3b01      	subs	r3, #1
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 faf5 	bl	800a7fc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a212:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800a214:	2000      	movs	r0, #0
 800a216:	f000 faf1 	bl	800a7fc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a21a:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800a21c:	2001      	movs	r0, #1
 800a21e:	f000 faed 	bl	800a7fc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a222:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800a224:	69f9      	ldr	r1, [r7, #28]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 faf3 	bl	800a812 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a22c:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800a22e:	2101      	movs	r1, #1
 800a230:	69f8      	ldr	r0, [r7, #28]
 800a232:	f000 fafc 	bl	800a82e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800a236:	4604      	mov	r4, r0
 800a238:	69b9      	ldr	r1, [r7, #24]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fb06 	bl	800a84c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800a240:	4603      	mov	r3, r0
 800a242:	6979      	ldr	r1, [r7, #20]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fae4 	bl	800a812 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a24a:	4603      	mov	r3, r0
 800a24c:	4619      	mov	r1, r3
 800a24e:	4620      	mov	r0, r4
 800a250:	f000 fb10 	bl	800a874 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800a254:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 fae8 	bl	800a82e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800a25e:	4604      	mov	r4, r0
 800a260:	68f9      	ldr	r1, [r7, #12]
 800a262:	6938      	ldr	r0, [r7, #16]
 800a264:	f000 fb14 	bl	800a890 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800a268:	4603      	mov	r3, r0
 800a26a:	6979      	ldr	r1, [r7, #20]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 fad0 	bl	800a812 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a272:	4603      	mov	r3, r0
 800a274:	4619      	mov	r1, r3
 800a276:	4620      	mov	r0, r4
 800a278:	f000 fafc 	bl	800a874 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800a27c:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3724      	adds	r7, #36	; 0x24
 800a282:	46bd      	mov	sp, r7
 800a284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a286:	bf00      	nop
 800a288:	08012464 	.word	0x08012464
 800a28c:	08012474 	.word	0x08012474
 800a290:	080124d0 	.word	0x080124d0
 800a294:	08012558 	.word	0x08012558

0800a298 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b099      	sub	sp, #100	; 0x64
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 800a2aa:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a2ae:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	ed93 7a03 	vldr	s14, [r3, #12]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 800a2c0:	ee16 0a90 	vmov	r0, s13
 800a2c4:	f7f6 f950 	bl	8000568 <__aeabi_f2d>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 800a2d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2d4:	68f9      	ldr	r1, [r7, #12]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fb fc15 	bl	8005b06 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800a2dc:	f107 0310 	add.w	r3, r7, #16
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fb fc0f 	bl	8005b06 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f103 0214 	add.w	r2, r3, #20
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3318      	adds	r3, #24
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800a2fa:	f7fa ff91 	bl	8005220 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 800a2fe:	f7fb f86f 	bl	80053e0 <_ZNSt14numeric_limitsIaE3minEv>
 800a302:	4603      	mov	r3, r0
 800a304:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a310:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a314:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a318:	eeb0 0a66 	vmov.f32	s0, s13
 800a31c:	f001 ff52 	bl	800c1c4 <roundf>
 800a320:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 800a324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a328:	ee17 3a90 	vmov	r3, s15
 800a32c:	4423      	add	r3, r4
 800a32e:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800a330:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a334:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a338:	4611      	mov	r1, r2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fb fb02 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 800a340:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 800a348:	f7ff fb44 	bl	80099d4 <_ZNSt14numeric_limitsIfE8infinityEv>
 800a34c:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 800a350:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a354:	eef4 7a47 	vcmp.f32	s15, s14
 800a358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35c:	d103      	bne.n	800a366 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800a35e:	f7fb f848 	bl	80053f2 <_ZNSt14numeric_limitsIaE3maxEv>
 800a362:	4603      	mov	r3, r0
 800a364:	e022      	b.n	800a3ac <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 800a366:	f7fb f844 	bl	80053f2 <_ZNSt14numeric_limitsIaE3maxEv>
 800a36a:	4603      	mov	r3, r0
 800a36c:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	edd3 7a03 	vldr	s15, [r3, #12]
 800a378:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a37c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a380:	eeb0 0a66 	vmov.f32	s0, s13
 800a384:	f001 ff1e 	bl	800c1c4 <roundf>
 800a388:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 800a38c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a390:	ee17 3a90 	vmov	r3, s15
 800a394:	4423      	add	r3, r4
 800a396:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 800a398:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a39c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fb fae2 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 800a3a8:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	691a      	ldr	r2, [r3, #16]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	691a      	ldr	r2, [r3, #16]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 800a3c0:	f107 0310 	add.w	r3, r7, #16
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fb fb24 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 800a3ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fb fb1f 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800a3d4:	bf00      	nop
 800a3d6:	3764      	adds	r7, #100	; 0x64
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd90      	pop	{r4, r7, pc}

0800a3dc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 800a3dc:	b590      	push	{r4, r7, lr}
 800a3de:	b099      	sub	sp, #100	; 0x64
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 800a3e8:	f04f 0300 	mov.w	r3, #0
 800a3ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 800a3ee:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a3f2:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	ed93 7a03 	vldr	s14, [r3, #12]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	edd3 7a03 	vldr	s15, [r3, #12]
 800a400:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 800a404:	ee16 0a90 	vmov	r0, s13
 800a408:	f7f6 f8ae 	bl	8000568 <__aeabi_f2d>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 800a414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a418:	68f9      	ldr	r1, [r7, #12]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fb fb73 	bl	8005b06 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800a420:	f107 0310 	add.w	r3, r7, #16
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	4618      	mov	r0, r3
 800a428:	f7fb fb6d 	bl	8005b06 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f103 0214 	add.w	r2, r3, #20
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	3318      	adds	r3, #24
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800a43e:	f7fa feef 	bl	8005220 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 800a442:	f7fa ffde 	bl	8005402 <_ZNSt14numeric_limitsIhE3minEv>
 800a446:	4603      	mov	r3, r0
 800a448:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	edd3 7a03 	vldr	s15, [r3, #12]
 800a454:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a458:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a45c:	eeb0 0a66 	vmov.f32	s0, s13
 800a460:	f001 feb0 	bl	800c1c4 <roundf>
 800a464:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 800a468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a46c:	ee17 3a90 	vmov	r3, s15
 800a470:	4423      	add	r3, r4
 800a472:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800a474:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fb fa60 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 800a484:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 800a48c:	f7ff faa2 	bl	80099d4 <_ZNSt14numeric_limitsIfE8infinityEv>
 800a490:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 800a494:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a498:	eef4 7a47 	vcmp.f32	s15, s14
 800a49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a0:	d103      	bne.n	800a4aa <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800a4a2:	f7fa ffb6 	bl	8005412 <_ZNSt14numeric_limitsIhE3maxEv>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	e022      	b.n	800a4f0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 800a4aa:	f7fa ffb2 	bl	8005412 <_ZNSt14numeric_limitsIhE3maxEv>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a4bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a4c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a4c4:	eeb0 0a66 	vmov.f32	s0, s13
 800a4c8:	f001 fe7c 	bl	800c1c4 <roundf>
 800a4cc:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 800a4d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4d4:	ee17 3a90 	vmov	r3, s15
 800a4d8:	4423      	add	r3, r4
 800a4da:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 800a4dc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a4e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fb fa40 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 800a4ec:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	691a      	ldr	r2, [r3, #16]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	691a      	ldr	r2, [r3, #16]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 800a504:	f107 0310 	add.w	r3, r7, #16
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fb fa82 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 800a50e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a512:	4618      	mov	r0, r3
 800a514:	f7fb fa7d 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800a518:	bf00      	nop
 800a51a:	3764      	adds	r7, #100	; 0x64
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd90      	pop	{r4, r7, pc}

0800a520 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 800a52e:	f001 fe6f 	bl	800c210 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	e000      	b.n	800a554 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800a56e:	f001 fe4f 	bl	800c210 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	e000      	b.n	800a594 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b089      	sub	sp, #36	; 0x24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	68b8      	ldr	r0, [r7, #8]
 800a5b2:	f7ff fae6 	bl	8009b82 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a5b6:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
 800a5bc:	69fa      	ldr	r2, [r7, #28]
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	da35      	bge.n	800a630 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f993 3000 	ldrsb.w	r3, [r3]
 800a5ce:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	f7ff fb01 	bl	8009bec <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a5ea:	4603      	mov	r3, r0
        data.params.output_offset +
 800a5ec:	4423      	add	r3, r4
    int32_t clamped =
 800a5ee:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	f107 0210 	add.w	r2, r7, #16
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fb f9a2 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 800a600:	4603      	mov	r3, r0
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3308      	adds	r3, #8
 800a60a:	f107 0210 	add.w	r2, r7, #16
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7fb f9ab 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 800a616:	4603      	mov	r3, r0
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 800a61c:	6939      	ldr	r1, [r7, #16]
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a622:	4413      	add	r3, r2
 800a624:	b24a      	sxtb	r2, r1
 800a626:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	3301      	adds	r3, #1
 800a62c:	61fb      	str	r3, [r7, #28]
 800a62e:	e7c5      	b.n	800a5bc <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 800a630:	bf00      	nop
 800a632:	3724      	adds	r7, #36	; 0x24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd90      	pop	{r4, r7, pc}

0800a638 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 800a646:	f001 fde3 	bl	800c210 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	e000      	b.n	800a66c <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 800a678:	b590      	push	{r4, r7, lr}
 800a67a:	b089      	sub	sp, #36	; 0x24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	68b8      	ldr	r0, [r7, #8]
 800a68a:	f7ff fa7a 	bl	8009b82 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a68e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800a690:	2300      	movs	r3, #0
 800a692:	61fb      	str	r3, [r7, #28]
 800a694:	69fa      	ldr	r2, [r7, #28]
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	429a      	cmp	r2, r3
 800a69a:	da34      	bge.n	800a706 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f7ff fa96 	bl	8009bec <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a6c0:	4603      	mov	r3, r0
        data.params.output_offset +
 800a6c2:	4423      	add	r3, r4
    int32_t clamped =
 800a6c4:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	f107 0210 	add.w	r2, r7, #16
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fb f937 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	f107 0210 	add.w	r2, r7, #16
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fb f940 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 800a6f2:	6939      	ldr	r1, [r7, #16]
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f8:	4413      	add	r3, r2
 800a6fa:	b2ca      	uxtb	r2, r1
 800a6fc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	3301      	adds	r3, #1
 800a702:	61fb      	str	r3, [r7, #28]
 800a704:	e7c6      	b.n	800a694 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 800a706:	bf00      	nop
 800a708:	3724      	adds	r7, #36	; 0x24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd90      	pop	{r4, r7, pc}

0800a70e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 800a70e:	b580      	push	{r7, lr}
 800a710:	b088      	sub	sp, #32
 800a712:	af00      	add	r7, sp, #0
 800a714:	60ba      	str	r2, [r7, #8]
 800a716:	607b      	str	r3, [r7, #4]
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]
 800a71c:	460b      	mov	r3, r1
 800a71e:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a722:	68b8      	ldr	r0, [r7, #8]
 800a724:	f7ff fa2d 	bl	8009b82 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a728:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800a72a:	2300      	movs	r3, #0
 800a72c:	61fb      	str	r3, [r7, #28]
 800a72e:	69fa      	ldr	r2, [r7, #28]
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	429a      	cmp	r2, r3
 800a734:	da26      	bge.n	800a784 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	4413      	add	r3, r2
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 800a740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a744:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a748:	429a      	cmp	r2, r3
 800a74a:	dd04      	ble.n	800a756 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 800a74c:	f107 030e 	add.w	r3, r7, #14
 800a750:	f993 3000 	ldrsb.w	r3, [r3]
 800a754:	e00c      	b.n	800a770 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 800a756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a75a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a75e:	429a      	cmp	r2, r3
 800a760:	da04      	bge.n	800a76c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 800a762:	f107 030f 	add.w	r3, r7, #15
 800a766:	f993 3000 	ldrsb.w	r3, [r3]
 800a76a:	e001      	b.n	800a770 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 800a76c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a770:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a776:	4413      	add	r3, r2
 800a778:	7dba      	ldrb	r2, [r7, #22]
 800a77a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	3301      	adds	r3, #1
 800a780:	61fb      	str	r3, [r7, #28]
 800a782:	e7d4      	b.n	800a72e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 800a784:	bf00      	nop
 800a786:	3720      	adds	r7, #32
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	60ba      	str	r2, [r7, #8]
 800a794:	607b      	str	r3, [r7, #4]
 800a796:	4603      	mov	r3, r0
 800a798:	73fb      	strb	r3, [r7, #15]
 800a79a:	460b      	mov	r3, r1
 800a79c:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a79e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7a0:	68b8      	ldr	r0, [r7, #8]
 800a7a2:	f7ff f9ee 	bl	8009b82 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a7a6:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	61fb      	str	r3, [r7, #28]
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	da1f      	bge.n	800a7f4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	7dfa      	ldrb	r2, [r7, #23]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d903      	bls.n	800a7ce <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 800a7c6:	f107 030e 	add.w	r3, r7, #14
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	e008      	b.n	800a7e0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
 800a7d0:	7dfa      	ldrb	r2, [r7, #23]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d203      	bcs.n	800a7de <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 800a7d6:	f107 030f 	add.w	r3, r7, #15
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	e000      	b.n	800a7e0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7e6:	4413      	add	r3, r2
 800a7e8:	7dba      	ldrb	r2, [r7, #22]
 800a7ea:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	61fb      	str	r3, [r7, #28]
 800a7f2:	e7db      	b.n	800a7ac <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 800a7f4:	bf00      	nop
 800a7f6:	3720      	adds	r7, #32
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  return x;
 800a804:	687b      	ldr	r3, [r7, #4]
}
 800a806:	4618      	mov	r0, r3
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
  return a & b;
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	4013      	ands	r3, r2
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	fa42 f303 	asr.w	r3, r2, r3
}
 800a840:	4618      	mov	r0, r3
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	bfb4      	ite	lt
 800a85e:	2301      	movlt	r3, #1
 800a860:	2300      	movge	r3, #0
 800a862:	b2db      	uxtb	r3, r3
 800a864:	4618      	mov	r0, r3
 800a866:	f000 f827 	bl	800a8b8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800a86a:	4603      	mov	r3, r0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  return a + b;
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	4413      	add	r3, r2
}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	bfcc      	ite	gt
 800a8a2:	2301      	movgt	r3, #1
 800a8a4:	2300      	movle	r3, #0
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 f805 	bl	800a8b8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800a8ae:	4603      	mov	r3, r0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d004      	beq.n	800a8d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	f000 f807 	bl	800a8da <_ZN8gemmlowp6BitNotIlEET_S1_>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	e000      	b.n	800a8d2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  return ~a;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	43db      	mvns	r3, r3
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800a8f4:	b480      	push	{r7}
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	4b04      	ldr	r3, [pc, #16]	; (800a90c <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800a8fa:	ee07 3a90 	vmov	s15, r3
 800a8fe:	eeb0 0a67 	vmov.f32	s0, s15
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	7f7fffff 	.word	0x7f7fffff

0800a910 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 800a910:	b480      	push	{r7}
 800a912:	af00      	add	r7, sp, #0
 800a914:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800a918:	ee07 3a90 	vmov	s15, r3
 800a91c:	eeb0 0a67 	vmov.f32	s0, s15
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	ed87 0a03 	vstr	s0, [r7, #12]
 800a932:	edc7 0a02 	vstr	s1, [r7, #8]
 800a936:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800a93a:	f107 0208 	add.w	r2, r7, #8
 800a93e:	f107 030c 	add.w	r3, r7, #12
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f7fa fd0e 	bl	8005366 <_ZSt3maxIfERKT_S2_S2_>
 800a94a:	4602      	mov	r2, r0
 800a94c:	1d3b      	adds	r3, r7, #4
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f7fa fcef 	bl	8005334 <_ZSt3minIfERKT_S2_S2_>
 800a956:	4603      	mov	r3, r0
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	ee07 3a90 	vmov	s15, r3
}
 800a95e:	eeb0 0a67 	vmov.f32	s0, s15
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	4603      	mov	r3, r0
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d10b      	bne.n	800a994 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f04f 0200 	mov.w	r2, #0
 800a982:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800a984:	f7ff ffb6 	bl	800a8f4 <_ZNSt14numeric_limitsIfE3maxEv>
 800a988:	eef0 7a40 	vmov.f32	s15, s0
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800a992:	e023      	b.n	800a9dc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	2b03      	cmp	r3, #3
 800a998:	d107      	bne.n	800a9aa <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f04f 0200 	mov.w	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a0f      	ldr	r2, [pc, #60]	; (800a9e4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800a9a6:	601a      	str	r2, [r3, #0]
}
 800a9a8:	e018      	b.n	800a9dc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d107      	bne.n	800a9c0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	4a0d      	ldr	r2, [pc, #52]	; (800a9e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800a9b4:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a9bc:	601a      	str	r2, [r3, #0]
}
 800a9be:	e00d      	b.n	800a9dc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800a9c0:	f7ff ffa6 	bl	800a910 <_ZNSt14numeric_limitsIfE6lowestEv>
 800a9c4:	eef0 7a40 	vmov.f32	s15, s0
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800a9ce:	f7ff ff91 	bl	800a8f4 <_ZNSt14numeric_limitsIfE3maxEv>
 800a9d2:	eef0 7a40 	vmov.f32	s15, s0
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	edc3 7a00 	vstr	s15, [r3]
}
 800a9dc:	bf00      	nop
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	40c00000 	.word	0x40c00000
 800a9e8:	bf800000 	.word	0xbf800000

0800a9ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 800a9fa:	f001 fc09 	bl	800c210 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 800aa0a:	b590      	push	{r4, r7, lr}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	607a      	str	r2, [r7, #4]
 800aa16:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800aa18:	68b9      	ldr	r1, [r7, #8]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7ff f856 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800aa20:	4604      	mov	r4, r0
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff f851 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	429c      	cmp	r4, r3
 800aa2e:	d001      	beq.n	800aa34 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800aa30:	f001 fbee 	bl	800c210 <abort>
  return shape1.Dims(index1);
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7ff f848 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800aa3c:	4603      	mov	r3, r0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd90      	pop	{r4, r7, pc}

0800aa46 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b086      	sub	sp, #24
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7fa fff4 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aa56:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	db03      	blt.n	800aa66 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	db01      	blt.n	800aa6a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800aa66:	f001 fbd3 	bl	800c210 <abort>
  const auto* dims_data = shape.DimsData();
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff f853 	bl	8009b16 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800aa70:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800aa72:	2301      	movs	r3, #1
 800aa74:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800aa76:	2300      	movs	r3, #0
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	da12      	bge.n	800aaa8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d005      	beq.n	800aa96 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	4413      	add	r3, r2
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	e000      	b.n	800aa98 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800aa96:	2301      	movs	r3, #1
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	fb03 f302 	mul.w	r3, r3, r2
 800aa9e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	613b      	str	r3, [r7, #16]
 800aaa6:	e7e8      	b.n	800aa7a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800aaa8:	697b      	ldr	r3, [r7, #20]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800aab2:	b590      	push	{r4, r7, lr}
 800aab4:	b091      	sub	sp, #68	; 0x44
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	607a      	str	r2, [r7, #4]
 800aabe:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800aacc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800aace:	f7fa ffb6 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aad2:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800aad4:	6838      	ldr	r0, [r7, #0]
 800aad6:	f7fa ffb2 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aada:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	3b01      	subs	r3, #1
 800aae0:	4619      	mov	r1, r3
 800aae2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800aae4:	f7ff ffaf 	bl	800aa46 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800aae8:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	1e99      	subs	r1, r3, #2
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aaf4:	6838      	ldr	r0, [r7, #0]
 800aaf6:	f7ff ff88 	bl	800aa0a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800aafa:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	4619      	mov	r1, r3
 800ab02:	6838      	ldr	r0, [r7, #0]
 800ab04:	f7fe ffe2 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800ab08:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	da5f      	bge.n	800abd6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ab16:	2300      	movs	r3, #0
 800ab18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	da55      	bge.n	800abce <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800ab22:	f04f 0300 	mov.w	r3, #0
 800ab26:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800ab28:	2300      	movs	r3, #0
 800ab2a:	633b      	str	r3, [r7, #48]	; 0x30
 800ab2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	da21      	bge.n	800ab78 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800ab34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	fb02 f203 	mul.w	r2, r2, r3
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	4413      	add	r3, r2
 800ab46:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	fb02 f203 	mul.w	r2, r2, r3
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	4413      	add	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab5a:	4413      	add	r3, r2
 800ab5c:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800ab60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab64:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab6c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	3301      	adds	r3, #1
 800ab74:	633b      	str	r3, [r7, #48]	; 0x30
 800ab76:	e7d9      	b.n	800ab2c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800ab78:	f04f 0300 	mov.w	r3, #0
 800ab7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800ab7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d005      	beq.n	800ab90 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800ab84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab8a:	4413      	add	r3, r2
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800ab90:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ab98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aba0:	fb02 f203 	mul.w	r2, r2, r3
 800aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba6:	4413      	add	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abac:	18d4      	adds	r4, r2, r3
 800abae:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800abb2:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800abb6:	eeb0 0a67 	vmov.f32	s0, s15
 800abba:	f7ff feb5 	bl	800a928 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800abbe:	eef0 7a40 	vmov.f32	s15, s0
 800abc2:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	3301      	adds	r3, #1
 800abca:	63bb      	str	r3, [r7, #56]	; 0x38
 800abcc:	e7a5      	b.n	800ab1a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800abce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd0:	3301      	adds	r3, #1
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd4:	e79b      	b.n	800ab0e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800abd6:	bf00      	nop
 800abd8:	3744      	adds	r7, #68	; 0x44
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd90      	pop	{r4, r7, pc}

0800abde <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 800abde:	b580      	push	{r7, lr}
 800abe0:	b096      	sub	sp, #88	; 0x58
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
 800abea:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	695b      	ldr	r3, [r3, #20]
 800ac0e:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800ac16:	6838      	ldr	r0, [r7, #0]
 800ac18:	f7fa ff11 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	dc01      	bgt.n	800ac26 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 800ac22:	f001 faf5 	bl	800c210 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800ac26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac28:	f7fa ff09 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	dc01      	bgt.n	800ac36 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 800ac32:	f001 faed 	bl	800c210 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	dd01      	ble.n	800ac42 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 800ac3e:	f001 fae7 	bl	800c210 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800ac42:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac44:	f7fa fefb 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ac48:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800ac4a:	6838      	ldr	r0, [r7, #0]
 800ac4c:	f7fa fef7 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ac50:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800ac52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac54:	3b01      	subs	r3, #1
 800ac56:	4619      	mov	r1, r3
 800ac58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac5a:	f7ff fef4 	bl	800aa46 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800ac5e:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800ac60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac62:	1e99      	subs	r1, r3, #2
 800ac64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac66:	3b01      	subs	r3, #1
 800ac68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac6a:	6838      	ldr	r0, [r7, #0]
 800ac6c:	f7ff fecd 	bl	800aa0a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ac70:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac74:	3b01      	subs	r3, #1
 800ac76:	4619      	mov	r1, r3
 800ac78:	6838      	ldr	r0, [r7, #0]
 800ac7a:	f7fe ff27 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800ac7e:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800ac80:	2300      	movs	r3, #0
 800ac82:	657b      	str	r3, [r7, #84]	; 0x54
 800ac84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	da73      	bge.n	800ad74 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	653b      	str	r3, [r7, #80]	; 0x50
 800ac90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac94:	429a      	cmp	r2, r3
 800ac96:	da69      	bge.n	800ad6c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	429a      	cmp	r2, r3
 800aca6:	da24      	bge.n	800acf2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 800aca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acac:	fb02 f203 	mul.w	r2, r2, r3
 800acb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb2:	4413      	add	r3, r2
 800acb4:	461a      	mov	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4413      	add	r3, r2
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800acbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc2:	fb02 f203 	mul.w	r2, r2, r3
 800acc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc8:	4413      	add	r3, r2
 800acca:	461a      	mov	r2, r3
 800accc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acce:	4413      	add	r3, r2
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800acd4:	69fa      	ldr	r2, [r7, #28]
 800acd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acd8:	4413      	add	r3, r2
 800acda:	6a39      	ldr	r1, [r7, #32]
 800acdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acde:	440a      	add	r2, r1
 800ace0:	fb02 f203 	mul.w	r2, r2, r3
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	4413      	add	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800acea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acec:	3301      	adds	r3, #1
 800acee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acf0:	e7d6      	b.n	800aca0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 800acf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d007      	beq.n	800ad08 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 800acf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acfe:	4413      	add	r3, r2
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	4413      	add	r3, r2
 800ad06:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe ff6c 	bl	8009bec <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800ad14:	4603      	mov	r3, r0
 800ad16:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad1c:	4413      	add	r3, r2
 800ad1e:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 800ad20:	f107 0218 	add.w	r2, r7, #24
 800ad24:	f107 0310 	add.w	r3, r7, #16
 800ad28:	4611      	mov	r1, r2
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fa fe0a 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 800ad30:	4603      	mov	r3, r0
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 800ad36:	f107 0214 	add.w	r2, r7, #20
 800ad3a:	f107 0310 	add.w	r3, r7, #16
 800ad3e:	4611      	mov	r1, r2
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fa fe13 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 800ad46:	4603      	mov	r3, r0
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 800ad4c:	6939      	ldr	r1, [r7, #16]
 800ad4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad52:	fb02 f203 	mul.w	r2, r2, r3
 800ad56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad58:	4413      	add	r3, r2
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad5e:	4413      	add	r3, r2
 800ad60:	b2ca      	uxtb	r2, r1
 800ad62:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ad64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad66:	3301      	adds	r3, #1
 800ad68:	653b      	str	r3, [r7, #80]	; 0x50
 800ad6a:	e791      	b.n	800ac90 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 800ad6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad6e:	3301      	adds	r3, #1
 800ad70:	657b      	str	r3, [r7, #84]	; 0x54
 800ad72:	e787      	b.n	800ac84 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 800ad74:	bf00      	nop
 800ad76:	3758      	adds	r7, #88	; 0x58
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b098      	sub	sp, #96	; 0x60
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	653b      	str	r3, [r7, #80]	; 0x50
  const int32_t filter_offset = params.weights_offset;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32_t output_offset = params.output_offset;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t output_multiplier = params.output_multiplier;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_activation_min = params.quantized_activation_min;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800adb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	429a      	cmp	r2, r3
 800adba:	dd01      	ble.n	800adc0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 800adbc:	f001 fa28 	bl	800c210 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 800adc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 800adc6:	f001 fa23 	bl	800c210 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800adca:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800adcc:	f7fa fe37 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800add0:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800add2:	6838      	ldr	r0, [r7, #0]
 800add4:	f7fa fe33 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800add8:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800addc:	3b01      	subs	r3, #1
 800adde:	4619      	mov	r1, r3
 800ade0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ade2:	f7ff fe30 	bl	800aa46 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800ade6:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	1e99      	subs	r1, r3, #2
 800adec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adee:	3b01      	subs	r3, #1
 800adf0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800adf2:	6838      	ldr	r0, [r7, #0]
 800adf4:	f7ff fe09 	bl	800aa0a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800adf8:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	3b01      	subs	r3, #1
 800adfe:	4619      	mov	r1, r3
 800ae00:	6838      	ldr	r0, [r7, #0]
 800ae02:	f7fe fe63 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800ae06:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800ae08:	2300      	movs	r3, #0
 800ae0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae10:	429a      	cmp	r2, r3
 800ae12:	da7c      	bge.n	800af0e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ae14:	2300      	movs	r3, #0
 800ae16:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	da72      	bge.n	800af06 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32_t accum = bias_data[out_c];
 800ae20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ae26:	4413      	add	r3, r2
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	657b      	str	r3, [r7, #84]	; 0x54
 800ae30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	429a      	cmp	r2, r3
 800ae36:	da2c      	bge.n	800ae92 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800ae38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae3c:	fb02 f203 	mul.w	r2, r2, r3
 800ae40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae42:	4413      	add	r3, r2
 800ae44:	461a      	mov	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4413      	add	r3, r2
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	4413      	add	r3, r2
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	847b      	strh	r3, [r7, #34]	; 0x22
        int16_t filter_val =
            filter_data[out_c * accum_depth + d] + filter_offset;
 800ae58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5c:	fb02 f203 	mul.w	r2, r2, r3
 800ae60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae62:	4413      	add	r3, r2
 800ae64:	461a      	mov	r2, r3
 800ae66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae68:	4413      	add	r3, r2
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	4413      	add	r3, r2
 800ae74:	b29b      	uxth	r3, r3
        int16_t filter_val =
 800ae76:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 800ae78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ae7c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ae80:	fb02 f203 	mul.w	r2, r2, r3
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	4413      	add	r3, r2
 800ae88:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800ae8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	657b      	str	r3, [r7, #84]	; 0x54
 800ae90:	e7ce      	b.n	800ae30 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32_t accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fe fea7 	bl	8009bec <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800ae9e:	4603      	mov	r3, r0
      accum =
 800aea0:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16_t, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 800aea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	61bb      	str	r3, [r7, #24]
 800aeaa:	f107 0218 	add.w	r2, r7, #24
 800aeae:	f107 0314 	add.w	r3, r7, #20
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fa fd45 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 800aeba:	4603      	mov	r3, r0
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 800aec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	61fb      	str	r3, [r7, #28]
 800aec8:	f107 021c 	add.w	r2, r7, #28
 800aecc:	f107 0314 	add.w	r3, r7, #20
 800aed0:	4611      	mov	r1, r2
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fa fd4a 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 800aed8:	4603      	mov	r3, r0
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee2:	4413      	add	r3, r2
 800aee4:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 800aee6:	6979      	ldr	r1, [r7, #20]
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aeec:	fb02 f203 	mul.w	r2, r2, r3
 800aef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aef2:	4413      	add	r3, r2
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aef8:	4413      	add	r3, r2
 800aefa:	b20a      	sxth	r2, r1
 800aefc:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800aefe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af00:	3301      	adds	r3, #1
 800af02:	65bb      	str	r3, [r7, #88]	; 0x58
 800af04:	e788      	b.n	800ae18 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 800af06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af08:	3301      	adds	r3, #1
 800af0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af0c:	e77e      	b.n	800ae0c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 800af0e:	bf00      	nop
 800af10:	3760      	adds	r7, #96	; 0x60
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800af16:	b580      	push	{r7, lr}
 800af18:	b096      	sub	sp, #88	; 0x58
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
 800af22:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800af4e:	6838      	ldr	r0, [r7, #0]
 800af50:	f7fa fd75 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800af54:	4603      	mov	r3, r0
 800af56:	2b01      	cmp	r3, #1
 800af58:	dc01      	bgt.n	800af5e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800af5a:	f001 f959 	bl	800c210 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800af5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af60:	f7fa fd6d 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800af64:	4603      	mov	r3, r0
 800af66:	2b02      	cmp	r3, #2
 800af68:	d001      	beq.n	800af6e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800af6a:	f001 f951 	bl	800c210 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	429a      	cmp	r2, r3
 800af74:	dd01      	ble.n	800af7a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800af76:	f001 f94b 	bl	800c210 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800af7a:	6838      	ldr	r0, [r7, #0]
 800af7c:	f7fa fd5f 	bl	8005a3e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800af80:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800af82:	2100      	movs	r1, #0
 800af84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af86:	f7fe fda1 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800af8a:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800af8c:	2101      	movs	r1, #1
 800af8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af90:	f7fe fd9c 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800af94:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800af96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af98:	3b02      	subs	r3, #2
 800af9a:	4619      	mov	r1, r3
 800af9c:	6838      	ldr	r0, [r7, #0]
 800af9e:	f7fe fd95 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800afa2:	4602      	mov	r2, r0
 800afa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa6:	4293      	cmp	r3, r2
 800afa8:	dd01      	ble.n	800afae <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 800afaa:	f001 f931 	bl	800c210 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800afae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb0:	3b01      	subs	r3, #1
 800afb2:	4619      	mov	r1, r3
 800afb4:	6838      	ldr	r0, [r7, #0]
 800afb6:	f7fe fd89 	bl	8009acc <_ZNK6tflite12RuntimeShape4DimsEi>
 800afba:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 800afbc:	2300      	movs	r3, #0
 800afbe:	657b      	str	r3, [r7, #84]	; 0x54
 800afc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	429a      	cmp	r2, r3
 800afc6:	da75      	bge.n	800b0b4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800afc8:	2300      	movs	r3, #0
 800afca:	653b      	str	r3, [r7, #80]	; 0x50
 800afcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd0:	429a      	cmp	r2, r3
 800afd2:	da6b      	bge.n	800b0ac <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32_t acc = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800afd8:	2300      	movs	r3, #0
 800afda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe0:	429a      	cmp	r2, r3
 800afe2:	da26      	bge.n	800b032 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32_t input_val = input_data[b * accum_depth + d];
 800afe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afe8:	fb02 f203 	mul.w	r2, r2, r3
 800afec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afee:	4413      	add	r3, r2
 800aff0:	461a      	mov	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4413      	add	r3, r2
 800aff6:	f993 3000 	ldrsb.w	r3, [r3]
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800affc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800affe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b000:	fb02 f203 	mul.w	r2, r2, r3
 800b004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b006:	4413      	add	r3, r2
 800b008:	461a      	mov	r2, r3
 800b00a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b00c:	4413      	add	r3, r2
 800b00e:	f993 3000 	ldrsb.w	r3, [r3]
 800b012:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800b014:	6a3a      	ldr	r2, [r7, #32]
 800b016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b018:	4413      	add	r3, r2
 800b01a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b01c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b01e:	440a      	add	r2, r1
 800b020:	fb02 f203 	mul.w	r2, r2, r3
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	4413      	add	r3, r2
 800b028:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800b02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b02c:	3301      	adds	r3, #1
 800b02e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b030:	e7d4      	b.n	800afdc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 800b032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b034:	2b00      	cmp	r3, #0
 800b036:	d007      	beq.n	800b048 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 800b038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b03e:	4413      	add	r3, r2
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	4413      	add	r3, r2
 800b046:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b04c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fe fdcc 	bl	8009bec <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800b054:	4603      	mov	r3, r0
 800b056:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b05c:	4413      	add	r3, r2
 800b05e:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800b060:	f107 021c 	add.w	r2, r7, #28
 800b064:	f107 0314 	add.w	r3, r7, #20
 800b068:	4611      	mov	r1, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fa fc6a 	bl	8005944 <_ZSt3maxIlERKT_S2_S2_>
 800b070:	4603      	mov	r3, r0
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800b076:	f107 0218 	add.w	r2, r7, #24
 800b07a:	f107 0314 	add.w	r3, r7, #20
 800b07e:	4611      	mov	r1, r2
 800b080:	4618      	mov	r0, r3
 800b082:	f7fa fc73 	bl	800596c <_ZSt3minIlERKT_S2_S2_>
 800b086:	4603      	mov	r3, r0
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800b08c:	6979      	ldr	r1, [r7, #20]
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b092:	fb02 f203 	mul.w	r2, r2, r3
 800b096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b098:	4413      	add	r3, r2
 800b09a:	461a      	mov	r2, r3
 800b09c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b09e:	4413      	add	r3, r2
 800b0a0:	b24a      	sxtb	r2, r1
 800b0a2:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	653b      	str	r3, [r7, #80]	; 0x50
 800b0aa:	e78f      	b.n	800afcc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 800b0ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	657b      	str	r3, [r7, #84]	; 0x54
 800b0b2:	e785      	b.n	800afc0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 800b0b4:	bf00      	nop
 800b0b6:	3758      	adds	r7, #88	; 0x58
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08c      	sub	sp, #48	; 0x30
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	607b      	str	r3, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	72fb      	strb	r3, [r7, #11]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 800b0d4:	7abb      	ldrb	r3, [r7, #10]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d04d      	beq.n	800b176 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xba>
    double real_multiplier = 0.0;
 800b0da:	f04f 0200 	mov.w	r2, #0
 800b0de:	f04f 0300 	mov.w	r3, #0
 800b0e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b0e6:	f107 0318 	add.w	r3, r7, #24
 800b0ea:	9301      	str	r3, [sp, #4]
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f7fa fa46 	bl	8005588 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b102:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 800b10a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b10e:	e034      	b.n	800b17a <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xbe>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 800b110:	ed97 7b06 	vldr	d7, [r7, #24]
 800b114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b116:	f107 0214 	add.w	r2, r7, #20
 800b11a:	4611      	mov	r1, r2
 800b11c:	4618      	mov	r0, r3
 800b11e:	eeb0 0a47 	vmov.f32	s0, s14
 800b122:	eef0 0a67 	vmov.f32	s1, s15
 800b126:	f7fa f87b 	bl	8005220 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	425a      	negs	r2, r3
 800b12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b130:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b134:	f103 0208 	add.w	r2, r3, #8
 800b138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13a:	330c      	adds	r3, #12
 800b13c:	7af9      	ldrb	r1, [r7, #11]
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	4613      	mov	r3, r2
 800b142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7fa fba9 	bl	800589c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b14a:	4603      	mov	r3, r0
 800b14c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b150:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 800b158:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b15c:	e00d      	b.n	800b17a <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xbe>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));

    data->input_zero_point = input->params.zero_point;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	691a      	ldr	r2, [r3, #16]
 800b162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b164:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	691a      	ldr	r2, [r3, #16]
 800b16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16c:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	691a      	ldr	r2, [r3, #16]
 800b172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b174:	61da      	str	r2, [r3, #28]
  }
  return status;
 800b176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3728      	adds	r7, #40	; 0x28
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800b182:	b580      	push	{r7, lr}
 800b184:	b084      	sub	sp, #16
 800b186:	af00      	add	r7, sp, #0
 800b188:	60f8      	str	r0, [r7, #12]
 800b18a:	60b9      	str	r1, [r7, #8]
 800b18c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 800b196:	f001 f83b 	bl	800c210 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19e:	2120      	movs	r1, #32
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	4798      	blx	r3
 800b1a4:	4603      	mov	r3, r0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b1b0:	b5b0      	push	{r4, r5, r7, lr}
 800b1b2:	b08c      	sub	sp, #48	; 0x30
 800b1b4:	af04      	add	r7, sp, #16
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800b1c2:	f001 f825 	bl	800c210 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	695b      	ldr	r3, [r3, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800b1ce:	f001 f81f 	bl	800c210 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	61fb      	str	r3, [r7, #28]
  const auto params =
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b1de:	2200      	movs	r2, #0
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7fa f945 	bl	8005472 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b1e8:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7fa f93f 	bl	8005472 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b1f4:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7fa f985 	bl	800550a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800b200:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b202:	2200      	movs	r2, #0
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7fa f959 	bl	80054be <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800b20c:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d01a      	beq.n	800b250 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695c      	ldr	r4, [r3, #20]
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	4618      	mov	r0, r3
 800b224:	f7f9 f880 	bl	8004328 <TfLiteTypeGetName>
 800b228:	4605      	mov	r5, r0
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	4618      	mov	r0, r3
 800b230:	f7f9 f87a 	bl	8004328 <TfLiteTypeGetName>
 800b234:	4603      	mov	r3, r0
 800b236:	9303      	str	r3, [sp, #12]
 800b238:	9502      	str	r5, [sp, #8]
 800b23a:	4b17      	ldr	r3, [pc, #92]	; (800b298 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	4b17      	ldr	r3, [pc, #92]	; (800b29c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	2364      	movs	r3, #100	; 0x64
 800b244:	4a16      	ldr	r2, [pc, #88]	; (800b2a0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800b246:	4917      	ldr	r1, [pc, #92]	; (800b2a4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	47a0      	blx	r4
 800b24c:	2301      	movs	r3, #1
 800b24e:	e01e      	b.n	800b28e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	781a      	ldrb	r2, [r3, #0]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d006      	beq.n	800b26a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xba>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	4911      	ldr	r1, [pc, #68]	; (800b2a8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	4798      	blx	r3
 800b266:	2301      	movs	r3, #1
 800b268:	e011      	b.n	800b28e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	7819      	ldrb	r1, [r3, #0]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	781a      	ldrb	r2, [r3, #0]
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	9302      	str	r3, [sp, #8]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7ff ff19 	bl	800b0bc <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 800b28a:	4603      	mov	r3, r0
                         filter, bias, output, data);
 800b28c:	bf00      	nop
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3720      	adds	r7, #32
 800b292:	46bd      	mov	sp, r7
 800b294:	bdb0      	pop	{r4, r5, r7, pc}
 800b296:	bf00      	nop
 800b298:	080125c8 	.word	0x080125c8
 800b29c:	080125d8 	.word	0x080125d8
 800b2a0:	08012568 	.word	0x08012568
 800b2a4:	080125ac 	.word	0x080125ac
 800b2a8:	080125e4 	.word	0x080125e4

0800b2ac <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 800b2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ae:	b0ad      	sub	sp, #180	; 0xb4
 800b2b0:	af06      	add	r7, sp, #24
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	425b      	negs	r3, r3
 800b2c0:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -data.filter_zero_point;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	425b      	negs	r3, r3
 800b2c8:	617b      	str	r3, [r7, #20]
  op_params.output_offset = data.output_zero_point;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	425b      	negs	r3, r3
 800b2dc:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 800b2ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 faac 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800b2f6:	6838      	ldr	r0, [r7, #0]
 800b2f8:	f7ff f932 	bl	800a560 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b2fc:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(filter),
 800b2fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b302:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b306:	4618      	mov	r0, r3
 800b308:	f000 faa1 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800b30c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800b310:	f7ff f926 	bl	800a560 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b314:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 800b316:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b31a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 fa95 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800b324:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800b328:	f7ff fb60 	bl	800a9ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b32c:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 800b32e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b332:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fa89 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800b33c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800b340:	f7ff f91d 	bl	800a57e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800b344:	4603      	mov	r3, r0
 800b346:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b34a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b34e:	f107 0010 	add.w	r0, r7, #16
 800b352:	9304      	str	r3, [sp, #16]
 800b354:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b358:	9303      	str	r3, [sp, #12]
 800b35a:	9502      	str	r5, [sp, #8]
 800b35c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	9400      	str	r4, [sp, #0]
 800b364:	4613      	mov	r3, r2
 800b366:	4632      	mov	r2, r6
 800b368:	f7ff fdd5 	bl	800af16 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      tflite::micro::GetTensorShape(output),
 800b36c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b370:	4618      	mov	r0, r3
 800b372:	f7fa fb4e 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 800b376:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fa fb49 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 800b380:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b384:	4618      	mov	r0, r3
 800b386:	f7fa fb44 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 800b38a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fa fb3f 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
  return kTfLiteOk;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	379c      	adds	r7, #156	; 0x9c
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b3a0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteEvalTensor* input,
                           const TfLiteEvalTensor* filter,
                           const TfLiteEvalTensor* bias,
                           TfLiteEvalTensor* output) {
 800b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3a2:	b0c9      	sub	sp, #292	; 0x124
 800b3a4:	af06      	add	r7, sp, #24
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	f107 0008 	add.w	r0, r7, #8
 800b3ac:	6001      	str	r1, [r0, #0]
 800b3ae:	1d39      	adds	r1, r7, #4
 800b3b0:	600a      	str	r2, [r1, #0]
 800b3b2:	463a      	mov	r2, r7
 800b3b4:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -data.input_zero_point;
 800b3b6:	1d3b      	adds	r3, r7, #4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	425b      	negs	r3, r3
 800b3be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -data.filter_zero_point;
 800b3c2:	1d3b      	adds	r3, r7, #4
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	425b      	negs	r3, r3
 800b3ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = data.output_zero_point;
 800b3ce:	1d3b      	adds	r3, r7, #4
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	69db      	ldr	r3, [r3, #28]
 800b3d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 800b3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3dc:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 800b3de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b3e2:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 800b3e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3e8:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 800b3ea:	1d3b      	adds	r3, r7, #4
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 800b3f2:	1d3b      	adds	r3, r7, #4
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	425b      	negs	r3, r3
 800b3fa:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 800b3fc:	1d3b      	adds	r3, r7, #4
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800b404:	1d3b      	adds	r3, r7, #4
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tflite::micro::GetTensorData<uint8_t>(filter),   \
      tflite::micro::GetTensorShape(bias),             \
      tflite::micro::GetTensorData<int32_t>(bias),     \
      tflite::micro::GetTensorShape(output),           \
      tflite::micro::GetTensorData<output_data_type>(output))
  switch (output->type) {
 800b40c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b410:	7a1b      	ldrb	r3, [r3, #8]
 800b412:	2b03      	cmp	r3, #3
 800b414:	d002      	beq.n	800b41c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x7c>
 800b416:	2b07      	cmp	r3, #7
 800b418:	d058      	beq.n	800b4cc <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x12c>
 800b41a:	e0af      	b.n	800b57c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800b41c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b420:	463b      	mov	r3, r7
 800b422:	6819      	ldr	r1, [r3, #0]
 800b424:	4610      	mov	r0, r2
 800b426:	f000 fa12 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b42a:	463b      	mov	r3, r7
 800b42c:	6818      	ldr	r0, [r3, #0]
 800b42e:	f7ff f903 	bl	800a638 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800b432:	4606      	mov	r6, r0
 800b434:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b438:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 fa06 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b442:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800b446:	f7ff f8f7 	bl	800a638 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800b44a:	4604      	mov	r4, r0
 800b44c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b450:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800b454:	4618      	mov	r0, r3
 800b456:	f000 f9fa 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b45a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800b45e:	f7ff fac5 	bl	800a9ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b462:	4605      	mov	r5, r0
 800b464:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b468:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 f9ee 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b472:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800b476:	f7ff f8ee 	bl	800a656 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800b47a:	4603      	mov	r3, r0
 800b47c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b480:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b484:	f107 0014 	add.w	r0, r7, #20
 800b488:	9304      	str	r3, [sp, #16]
 800b48a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b48e:	9303      	str	r3, [sp, #12]
 800b490:	9502      	str	r5, [sp, #8]
 800b492:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	9400      	str	r4, [sp, #0]
 800b49a:	4613      	mov	r3, r2
 800b49c:	4632      	mov	r2, r6
 800b49e:	f7ff fb9e 	bl	800abde <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 800b4a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fa fab3 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
 800b4ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fa faae 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
 800b4b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fa faa9 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
 800b4c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fa faa4 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800b4ca:	e068      	b.n	800b59e <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x1fe>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 800b4cc:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800b4d0:	463b      	mov	r3, r7
 800b4d2:	6819      	ldr	r1, [r3, #0]
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f000 f9ba 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b4da:	463b      	mov	r3, r7
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f7ff f8ab 	bl	800a638 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b4e8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 f9ae 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b4f2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800b4f6:	f7ff f89f 	bl	800a638 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b500:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800b504:	4618      	mov	r0, r3
 800b506:	f000 f9a2 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b50a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800b50e:	f7ff fa6d 	bl	800a9ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b512:	4605      	mov	r5, r0
 800b514:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b518:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 f996 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b522:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800b526:	f000 f941 	bl	800b7ac <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800b530:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800b534:	f107 0014 	add.w	r0, r7, #20
 800b538:	9304      	str	r3, [sp, #16]
 800b53a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	9502      	str	r5, [sp, #8]
 800b542:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	9400      	str	r4, [sp, #0]
 800b54a:	4613      	mov	r3, r2
 800b54c:	4632      	mov	r2, r6
 800b54e:	f7ff fc15 	bl	800ad7c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 800b552:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b556:	4618      	mov	r0, r3
 800b558:	f7fa fa5b 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
 800b55c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b560:	4618      	mov	r0, r3
 800b562:	f7fa fa56 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
 800b566:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fa fa51 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
 800b570:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b574:	4618      	mov	r0, r3
 800b576:	f7fa fa4c 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800b57a:	e010      	b.n	800b59e <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x1fe>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	695c      	ldr	r4, [r3, #20]
 800b580:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b584:	7a1b      	ldrb	r3, [r3, #8]
 800b586:	4618      	mov	r0, r3
 800b588:	f7f8 fece 	bl	8004328 <TfLiteTypeGetName>
 800b58c:	4602      	mov	r2, r0
 800b58e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b592:	7a1b      	ldrb	r3, [r3, #8]
 800b594:	4905      	ldr	r1, [pc, #20]	; (800b5ac <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x20c>)
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e000      	b.n	800b5a0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x200>
  }

  return kTfLiteOk;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	0801265c 	.word	0x0801265c

0800b5b0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteEvalTensor* input,
                       const TfLiteEvalTensor* filter,
                       const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {
 800b5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5b2:	b0af      	sub	sp, #188	; 0xbc
 800b5b4:	af06      	add	r7, sp, #24
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 800b5c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b5c4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff f9cc 	bl	800a968 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 800b5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 800b5d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b5dc:	6839      	ldr	r1, [r7, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 f935 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 800b5e4:	6838      	ldr	r0, [r7, #0]
 800b5e6:	f7fe ff9b 	bl	800a520 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b5ea:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<float>(input),
      tflite::micro::GetTensorShape(filter),
 800b5ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b5f0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f000 f92a 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 800b5fa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800b5fe:	f7fe ff8f 	bl	800a520 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b602:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<float>(filter),
      tflite::micro::GetTensorShape(bias),
 800b604:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b608:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 f91e 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 800b612:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b616:	f7fe ff83 	bl	800a520 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b61a:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<float>(bias),
      tflite::micro::GetTensorShape(output),
 800b61c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b620:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800b624:	4618      	mov	r0, r3
 800b626:	f000 f912 	bl	800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 800b62a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800b62e:	f7fe ff86 	bl	800a53e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800b632:	4603      	mov	r3, r0
 800b634:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b638:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b63c:	f107 0010 	add.w	r0, r7, #16
 800b640:	9304      	str	r3, [sp, #16]
 800b642:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b646:	9303      	str	r3, [sp, #12]
 800b648:	9502      	str	r5, [sp, #8]
 800b64a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	9400      	str	r4, [sp, #0]
 800b652:	4613      	mov	r3, r2
 800b654:	4632      	mov	r2, r6
 800b656:	f7ff fa2c 	bl	800aab2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      tflite::micro::GetTensorShape(output),
 800b65a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fa f9d7 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 800b664:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fa f9d2 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 800b66e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b672:	4618      	mov	r0, r3
 800b674:	f7fa f9cd 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 800b678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fa f9c8 	bl	8005a12 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<float>(output));
  return kTfLiteOk;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	37a4      	adds	r7, #164	; 0xa4
 800b688:	46bd      	mov	sp, r7
 800b68a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b68c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800b68c:	b590      	push	{r4, r7, lr}
 800b68e:	b08d      	sub	sp, #52	; 0x34
 800b690:	af04      	add	r7, sp, #16
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800b69e:	f000 fdb7 	bl	800c210 <abort>
  const auto* params =
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	695b      	ldr	r3, [r3, #20]
 800b6a6:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f88e 	bl	800b7ce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b6b2:	61b8      	str	r0, [r7, #24]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kWeightsTensor);
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f888 	bl	800b7ce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b6be:	6178      	str	r0, [r7, #20]
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kBiasTensor);
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f882 	bl	800b7ce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b6ca:	6138      	str	r0, [r7, #16]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	6839      	ldr	r1, [r7, #0]
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f89c 	bl	800b80e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800b6d6:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 800b6e0:	f000 fd96 	bl	800c210 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	7a1b      	ldrb	r3, [r3, #8]
 800b6ee:	2b09      	cmp	r3, #9
 800b6f0:	d015      	beq.n	800b71e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 800b6f2:	2b09      	cmp	r3, #9
 800b6f4:	dc2f      	bgt.n	800b756 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d002      	beq.n	800b700 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d01d      	beq.n	800b73a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 800b6fe:	e02a      	b.n	800b756 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	781a      	ldrb	r2, [r3, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	9302      	str	r3, [sp, #8]
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff4b 	bl	800b5b0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorSA_SA_PS8_>
 800b71a:	4603      	mov	r3, r0
                       output);
 800b71c:	e029      	b.n	800b772 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	9302      	str	r3, [sp, #8]
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff fdbb 	bl	800b2ac <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
 800b736:	4603      	mov	r3, r0
                               output);
 800b738:	e01b      	b.n	800b772 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	9302      	str	r3, [sp, #8]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	9301      	str	r3, [sp, #4]
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff fe27 	bl	800b3a0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
 800b752:	4603      	mov	r3, r0
 800b754:	e00d      	b.n	800b772 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	695c      	ldr	r4, [r3, #20]
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	7a1b      	ldrb	r3, [r3, #8]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7f8 fde2 	bl	8004328 <TfLiteTypeGetName>
 800b764:	4602      	mov	r2, r0
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	7a1b      	ldrb	r3, [r3, #8]
 800b76a:	4904      	ldr	r1, [pc, #16]	; (800b77c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800b770:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 800b772:	4618      	mov	r0, r3
 800b774:	3724      	adds	r7, #36	; 0x24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd90      	pop	{r4, r7, pc}
 800b77a:	bf00      	nop
 800b77c:	0801265c 	.word	0x0801265c

0800b780 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
 800b780:	b4b0      	push	{r4, r5, r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a07      	ldr	r2, [pc, #28]	; (800b7a8 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x28>)
 800b78c:	461c      	mov	r4, r3
 800b78e:	4615      	mov	r5, r2
 800b790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b794:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bcb0      	pop	{r4, r5, r7}
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	08012678 	.word	0x08012678

0800b7ac <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	e000      	b.n	800b7c2 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

namespace tflite {
namespace micro {

const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	60f8      	str	r0, [r7, #12]
 800b7d6:	60b9      	str	r1, [r7, #8]
 800b7d8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800b7e0:	f000 fd16 	bl	800c210 <abort>
  TFLITE_DCHECK(node != nullptr);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800b7ea:	f000 fd11 	bl	800c210 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	6819      	ldr	r1, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	440b      	add	r3, r1
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	4619      	mov	r1, r3
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	4790      	blx	r2
 800b804:	4603      	mov	r3, r0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	60f8      	str	r0, [r7, #12]
 800b816:	60b9      	str	r1, [r7, #8]
 800b818:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800b820:	f000 fcf6 	bl	800c210 <abort>
  TFLITE_DCHECK(node != nullptr);
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800b82a:	f000 fcf1 	bl	800c210 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	6859      	ldr	r1, [r3, #4]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	440b      	add	r3, r1
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	4619      	mov	r1, r3
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	4790      	blx	r2
 800b844:	4603      	mov	r3, r0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800b84e:	b580      	push	{r7, lr}
 800b850:	b086      	sub	sp, #24
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d103      	bne.n	800b866 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
    return RuntimeShape();
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7fa f8b6 	bl	80059d0 <_ZN6tflite12RuntimeShapeC1Ev>
 800b864:	e00d      	b.n	800b882 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x34>
  }
  TfLiteIntArray* dims = tensor->dims;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	3304      	adds	r3, #4
 800b876:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	6939      	ldr	r1, [r7, #16]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7fa f8b5 	bl	80059ec <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	4a04      	ldr	r2, [pc, #16]	; (800b8a8 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4618      	mov	r0, r3
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	08012c28 	.word	0x08012c28

0800b8ac <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	4a04      	ldr	r2, [pc, #16]	; (800b8c8 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	08012c28 	.word	0x08012c28

0800b8cc <_ZN6tflite13MemoryPlannerD0Ev>:
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7ff ffe9 	bl	800b8ac <_ZN6tflite13MemoryPlannerD1Ev>
 800b8da:	2104      	movs	r1, #4
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fbaf 	bl	800c040 <_ZdlPvj>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800b8f2:	2328      	movs	r3, #40	; 0x28
 800b8f4:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800b8f6:	2328      	movs	r3, #40	; 0x28
  }
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800b904:	b480      	push	{r7}
 800b906:	b089      	sub	sp, #36	; 0x24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800b910:	2300      	movs	r3, #0
 800b912:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800b914:	2301      	movs	r3, #1
 800b916:	61bb      	str	r3, [r7, #24]
 800b918:	69ba      	ldr	r2, [r7, #24]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	da4c      	bge.n	800b9ba <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b926:	3b01      	subs	r3, #1
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4413      	add	r3, r2
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	68f9      	ldr	r1, [r7, #12]
 800b936:	440b      	add	r3, r1
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	da39      	bge.n	800b9b2 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b944:	3b01      	subs	r3, #1
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	441a      	add	r2, r3
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b95e:	3b01      	subs	r3, #1
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	68f9      	ldr	r1, [r7, #12]
 800b964:	440b      	add	r3, r1
 800b966:	6812      	ldr	r2, [r2, #0]
 800b968:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	4413      	add	r3, r2
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b97c:	3b01      	subs	r3, #1
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	4413      	add	r3, r2
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	441a      	add	r2, r3
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b996:	3b01      	subs	r3, #1
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	68b9      	ldr	r1, [r7, #8]
 800b99c:	440b      	add	r3, r1
 800b99e:	6812      	ldr	r2, [r2, #0]
 800b9a0:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	61bb      	str	r3, [r7, #24]
 800b9b8:	e7ae      	b.n	800b918 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 800b9ba:	7ffb      	ldrb	r3, [r7, #31]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d000      	beq.n	800b9c2 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 800b9c0:	e7a6      	b.n	800b910 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800b9c2:	bf00      	nop
 800b9c4:	3724      	adds	r7, #36	; 0x24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
	...

0800b9d0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b087      	sub	sp, #28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff ff54 	bl	800b88c <_ZN6tflite13MemoryPlannerC1Ev>
 800b9e4:	4a22      	ldr	r2, [pc, #136]	; (800ba70 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	601a      	str	r2, [r3, #0]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	609a      	str	r2, [r3, #8]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800b9f8:	687c      	ldr	r4, [r7, #4]
 800b9fa:	f7ff ff77 	bl	800b8ec <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	fbb4 f3f3 	udiv	r3, r4, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	697a      	ldr	r2, [r7, #20]
 800ba12:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	011b      	lsls	r3, r3, #4
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	697a      	ldr	r2, [r7, #20]
 800ba24:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4413      	add	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	4413      	add	r3, r2
 800ba42:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4613      	mov	r3, r2
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	461a      	mov	r2, r3
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd90      	pop	{r4, r7, pc}
 800ba70:	08012c08 	.word	0x08012c08

0800ba74 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	4a05      	ldr	r2, [pc, #20]	; (800ba94 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7ff ff11 	bl	800b8ac <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	08012c08 	.word	0x08012c08

0800ba98 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
}
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ffe7 	bl	800ba74 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800baa6:	212c      	movs	r1, #44	; 0x2c
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fac9 	bl	800c040 <_ZdlPvj>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
 800bac4:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	689a      	ldr	r2, [r3, #8]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	429a      	cmp	r2, r3
 800bad0:	db08      	blt.n	800bae4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	461a      	mov	r2, r3
 800bad8:	4913      	ldr	r1, [pc, #76]	; (800bb28 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 800bada:	68b8      	ldr	r0, [r7, #8]
 800badc:	f7f8 fc88 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e01d      	b.n	800bb20 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68da      	ldr	r2, [r3, #12]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	011b      	lsls	r3, r3, #4
 800baee:	4413      	add	r3, r2
 800baf0:	617b      	str	r3, [r7, #20]
  current->size = size;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	6a3a      	ldr	r2, [r7, #32]
 800bb02:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0a:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3718      	adds	r7, #24
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	0801279c 	.word	0x0801279c

0800bb2c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800bb2c:	b590      	push	{r4, r7, lr}
 800bb2e:	b089      	sub	sp, #36	; 0x24
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	68da      	ldr	r2, [r3, #12]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	011b      	lsls	r3, r3, #4
 800bb44:	4413      	add	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	681c      	ldr	r4, [r3, #0]
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	68b9      	ldr	r1, [r7, #8]
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	47a0      	blx	r4
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	bf14      	ite	ne
 800bb64:	2301      	movne	r3, #1
 800bb66:	2300      	moveq	r3, #0
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e003      	b.n	800bb7a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb76:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	371c      	adds	r7, #28
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd90      	pop	{r4, r7, pc}

0800bb82 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800bb82:	b480      	push	{r7}
 800bb84:	b087      	sub	sp, #28
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	60f8      	str	r0, [r7, #12]
 800bb8a:	60b9      	str	r1, [r7, #8]
 800bb8c:	607a      	str	r2, [r7, #4]
 800bb8e:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800bb9a:	4413      	add	r3, r2
 800bb9c:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	da01      	bge.n	800bbac <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	e007      	b.n	800bbbc <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	dd01      	ble.n	800bbba <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e000      	b.n	800bbbc <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800bbba:	2301      	movs	r3, #1
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	371c      	adds	r7, #28
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10b      	bne.n	800bbf8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	699a      	ldr	r2, [r3, #24]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	460b      	mov	r3, r1
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	440b      	add	r3, r1
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	613b      	str	r3, [r7, #16]
 800bbf6:	e011      	b.n	800bc1c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc00:	d101      	bne.n	800bc06 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800bc02:	2300      	movs	r3, #0
 800bc04:	e029      	b.n	800bc5a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	699a      	ldr	r2, [r3, #24]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	460b      	mov	r3, r1
 800bc12:	005b      	lsls	r3, r3, #1
 800bc14:	440b      	add	r3, r1
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	6939      	ldr	r1, [r7, #16]
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7ff ffad 	bl	800bb82 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	617b      	str	r3, [r7, #20]
      break;
 800bc32:	e011      	b.n	800bc58 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3c:	d00b      	beq.n	800bc56 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	699a      	ldr	r2, [r3, #24]
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	4619      	mov	r1, r3
 800bc48:	460b      	mov	r3, r1
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	440b      	add	r3, r1
 800bc4e:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800bc50:	4413      	add	r3, r2
 800bc52:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800bc54:	e7e2      	b.n	800bc1c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800bc56:	bf00      	nop
  } while (true);
  return result;
 800bc58:	697b      	ldr	r3, [r7, #20]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b098      	sub	sp, #96	; 0x60
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc70:	f083 0301 	eor.w	r3, r3, #1
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f040 815f 	bne.w	800bf3a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 815a 	beq.w	800bf3a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800bc98:	2300      	movs	r3, #0
 800bc9a:	657b      	str	r3, [r7, #84]	; 0x54
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bca2:	429a      	cmp	r2, r3
 800bca4:	da4d      	bge.n	800bd42 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68da      	ldr	r2, [r3, #12]
 800bcaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcac:	011b      	lsls	r3, r3, #4
 800bcae:	4413      	add	r3, r2
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d11e      	bne.n	800bcf6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 800bcb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	68da      	ldr	r2, [r3, #12]
 800bcc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcc4:	011b      	lsls	r3, r3, #4
 800bcc6:	441a      	add	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6919      	ldr	r1, [r3, #16]
 800bccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	440b      	add	r3, r1
 800bcd2:	6812      	ldr	r2, [r2, #0]
 800bcd4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	695a      	ldr	r2, [r3, #20]
 800bcda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bce2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	e021      	b.n	800bd3a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	68da      	ldr	r2, [r3, #12]
 800bcfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcfc:	011b      	lsls	r3, r3, #4
 800bcfe:	441a      	add	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6919      	ldr	r1, [r3, #16]
 800bd04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	440b      	add	r3, r1
 800bd0a:	6812      	ldr	r2, [r2, #0]
 800bd0c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	695a      	ldr	r2, [r3, #20]
 800bd12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4413      	add	r3, r2
 800bd18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd1a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	68da      	ldr	r2, [r3, #12]
 800bd20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd22:	011b      	lsls	r3, r3, #4
 800bd24:	441a      	add	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	440b      	add	r3, r1
 800bd30:	6852      	ldr	r2, [r2, #4]
 800bd32:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800bd34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd36:	3301      	adds	r3, #1
 800bd38:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800bd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	657b      	str	r3, [r7, #84]	; 0x54
 800bd40:	e7ac      	b.n	800bc9c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	691a      	ldr	r2, [r3, #16]
 800bd46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	695a      	ldr	r2, [r3, #20]
 800bd50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd52:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800bd54:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800bd5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f7ff fdd0 	bl	800b904 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	699a      	ldr	r2, [r3, #24]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	005b      	lsls	r3, r3, #1
 800bd7e:	440b      	add	r3, r1
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800bd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd88:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8c:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 800bd96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd9a:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68da      	ldr	r2, [r3, #12]
 800bda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	4413      	add	r3, r2
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdac:	d106      	bne.n	800bdbc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdca:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800bdcc:	2301      	movs	r3, #1
 800bdce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	f280 80b0 	bge.w	800bf3c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	695a      	ldr	r2, [r3, #20]
 800bde0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68da      	ldr	r2, [r3, #12]
 800bdee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf0:	011b      	lsls	r3, r3, #4
 800bdf2:	4413      	add	r3, r2
 800bdf4:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800bdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be14:	d12d      	bne.n	800be72 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800be16:	2300      	movs	r3, #0
 800be18:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 800be1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff fed1 	bl	800bbc8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800be26:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 800be28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d012      	beq.n	800be54 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68da      	ldr	r2, [r3, #12]
 800be32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800be38:	4413      	add	r3, r2
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800be3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be42:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800be44:	4413      	add	r3, r2
 800be46:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800be48:	6a3a      	ldr	r2, [r7, #32]
 800be4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be4c:	429a      	cmp	r2, r3
 800be4e:	dd01      	ble.n	800be54 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00f      	beq.n	800be7a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 800be64:	69fa      	ldr	r2, [r7, #28]
 800be66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be68:	429a      	cmp	r2, r3
 800be6a:	da08      	bge.n	800be7e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 800be6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6e:	647b      	str	r3, [r7, #68]	; 0x44
      }
 800be70:	e7d3      	b.n	800be1a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	64bb      	str	r3, [r7, #72]	; 0x48
 800be78:	e002      	b.n	800be80 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800be7a:	bf00      	nop
 800be7c:	e000      	b.n	800be80 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800be7e:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be8c:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	699a      	ldr	r2, [r3, #24]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	4619      	mov	r1, r3
 800be98:	460b      	mov	r3, r1
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	440b      	add	r3, r1
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bea8:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800beae:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	69db      	ldr	r3, [r3, #28]
 800beba:	1c5a      	adds	r2, r3, #1
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 800bec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bec6:	429a      	cmp	r2, r3
 800bec8:	da09      	bge.n	800bede <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1a      	ldr	r2, [r3, #32]
 800bed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed4:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	621a      	str	r2, [r3, #32]
 800bedc:	e029      	b.n	800bf32 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 800bede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee0:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800bee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beee:	d107      	bne.n	800bf00 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 800bef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	f04f 32ff 	mov.w	r2, #4294967295
 800befc:	609a      	str	r2, [r3, #8]
          break;
 800befe:	e018      	b.n	800bf32 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6999      	ldr	r1, [r3, #24]
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	4613      	mov	r3, r2
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	da07      	bge.n	800bf2c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 800bf1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf1e:	689a      	ldr	r2, [r3, #8]
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800bf24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf26:	697a      	ldr	r2, [r7, #20]
 800bf28:	609a      	str	r2, [r3, #8]
          break;
 800bf2a:	e002      	b.n	800bf32 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	643b      	str	r3, [r7, #64]	; 0x40
      }
 800bf30:	e7d7      	b.n	800bee2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 800bf32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf34:	3301      	adds	r3, #1
 800bf36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf38:	e74a      	b.n	800bdd0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 800bf3a:	bf00      	nop
    }
  }
}
 800bf3c:	3760      	adds	r7, #96	; 0x60
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b086      	sub	sp, #24
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff fe89 	bl	800bc62 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	e035      	b.n	800bfc8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699a      	ldr	r2, [r3, #24]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a1b      	ldr	r3, [r3, #32]
 800bf64:	4619      	mov	r1, r3
 800bf66:	460b      	mov	r3, r1
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	440b      	add	r3, r1
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	613b      	str	r3, [r7, #16]
  while (entry) {
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d024      	beq.n	800bfc6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68da      	ldr	r2, [r3, #12]
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 800bf86:	4413      	add	r3, r2
 800bf88:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4413      	add	r3, r2
 800bf94:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d901      	bls.n	800bfa2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfaa:	d00b      	beq.n	800bfc4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	699a      	ldr	r2, [r3, #24]
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	440b      	add	r3, r1
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	617b      	str	r3, [r7, #20]
  while (entry) {
 800bfc2:	e7d8      	b.n	800bf76 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 800bfc4:	bf00      	nop
  }
  return max_size;
 800bfc6:	693b      	ldr	r3, [r7, #16]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f7ff fe33 	bl	800bc62 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	db04      	blt.n	800c00c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	db08      	blt.n	800c01e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	4909      	ldr	r1, [pc, #36]	; (800c038 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 800c014:	68b8      	ldr	r0, [r7, #8]
 800c016:	f7f8 f9eb 	bl	80043f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e008      	b.n	800c030 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	0801282c 	.word	0x0801282c

0800c03c <_ZdlPv>:
 800c03c:	f000 b95c 	b.w	800c2f8 <free>

0800c040 <_ZdlPvj>:
 800c040:	f7ff bffc 	b.w	800c03c <_ZdlPv>

0800c044 <_ZdaPv>:
 800c044:	f7ff bffa 	b.w	800c03c <_ZdlPv>

0800c048 <__cxa_guard_acquire>:
 800c048:	6803      	ldr	r3, [r0, #0]
 800c04a:	07db      	lsls	r3, r3, #31
 800c04c:	d406      	bmi.n	800c05c <__cxa_guard_acquire+0x14>
 800c04e:	7843      	ldrb	r3, [r0, #1]
 800c050:	b103      	cbz	r3, 800c054 <__cxa_guard_acquire+0xc>
 800c052:	deff      	udf	#255	; 0xff
 800c054:	2301      	movs	r3, #1
 800c056:	7043      	strb	r3, [r0, #1]
 800c058:	4618      	mov	r0, r3
 800c05a:	4770      	bx	lr
 800c05c:	2000      	movs	r0, #0
 800c05e:	4770      	bx	lr

0800c060 <__cxa_guard_release>:
 800c060:	2301      	movs	r3, #1
 800c062:	6003      	str	r3, [r0, #0]
 800c064:	4770      	bx	lr

0800c066 <_Znwj>:
 800c066:	2801      	cmp	r0, #1
 800c068:	bf38      	it	cc
 800c06a:	2001      	movcc	r0, #1
 800c06c:	b510      	push	{r4, lr}
 800c06e:	4604      	mov	r4, r0
 800c070:	4620      	mov	r0, r4
 800c072:	f000 f939 	bl	800c2e8 <malloc>
 800c076:	b930      	cbnz	r0, 800c086 <_Znwj+0x20>
 800c078:	f000 f81e 	bl	800c0b8 <_ZSt15get_new_handlerv>
 800c07c:	b908      	cbnz	r0, 800c082 <_Znwj+0x1c>
 800c07e:	f000 f8c7 	bl	800c210 <abort>
 800c082:	4780      	blx	r0
 800c084:	e7f4      	b.n	800c070 <_Znwj+0xa>
 800c086:	bd10      	pop	{r4, pc}

0800c088 <_Znaj>:
 800c088:	f7ff bfed 	b.w	800c066 <_Znwj>

0800c08c <__cxa_pure_virtual>:
 800c08c:	b508      	push	{r3, lr}
 800c08e:	f000 f80d 	bl	800c0ac <_ZSt9terminatev>

0800c092 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c092:	b508      	push	{r3, lr}
 800c094:	4780      	blx	r0
 800c096:	f000 f8bb 	bl	800c210 <abort>
	...

0800c09c <_ZSt13get_terminatev>:
 800c09c:	4b02      	ldr	r3, [pc, #8]	; (800c0a8 <_ZSt13get_terminatev+0xc>)
 800c09e:	6818      	ldr	r0, [r3, #0]
 800c0a0:	f3bf 8f5b 	dmb	ish
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	20000bc0 	.word	0x20000bc0

0800c0ac <_ZSt9terminatev>:
 800c0ac:	b508      	push	{r3, lr}
 800c0ae:	f7ff fff5 	bl	800c09c <_ZSt13get_terminatev>
 800c0b2:	f7ff ffee 	bl	800c092 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800c0b8 <_ZSt15get_new_handlerv>:
 800c0b8:	4b02      	ldr	r3, [pc, #8]	; (800c0c4 <_ZSt15get_new_handlerv+0xc>)
 800c0ba:	6818      	ldr	r0, [r3, #0]
 800c0bc:	f3bf 8f5b 	dmb	ish
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	2000177c 	.word	0x2000177c

0800c0c8 <frexp>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	ec55 4b10 	vmov	r4, r5, d0
 800c0d0:	6001      	str	r1, [r0, #0]
 800c0d2:	4916      	ldr	r1, [pc, #88]	; (800c12c <frexp+0x64>)
 800c0d4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800c0d8:	428a      	cmp	r2, r1
 800c0da:	4606      	mov	r6, r0
 800c0dc:	462b      	mov	r3, r5
 800c0de:	dc22      	bgt.n	800c126 <frexp+0x5e>
 800c0e0:	ee10 1a10 	vmov	r1, s0
 800c0e4:	4311      	orrs	r1, r2
 800c0e6:	d01e      	beq.n	800c126 <frexp+0x5e>
 800c0e8:	4911      	ldr	r1, [pc, #68]	; (800c130 <frexp+0x68>)
 800c0ea:	4029      	ands	r1, r5
 800c0ec:	b969      	cbnz	r1, 800c10a <frexp+0x42>
 800c0ee:	4b11      	ldr	r3, [pc, #68]	; (800c134 <frexp+0x6c>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	ee10 0a10 	vmov	r0, s0
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	f7f4 fa8e 	bl	8000618 <__aeabi_dmul>
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c102:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c106:	4604      	mov	r4, r0
 800c108:	6031      	str	r1, [r6, #0]
 800c10a:	6831      	ldr	r1, [r6, #0]
 800c10c:	1512      	asrs	r2, r2, #20
 800c10e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c112:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800c116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c11a:	440a      	add	r2, r1
 800c11c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800c120:	6032      	str	r2, [r6, #0]
 800c122:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800c126:	ec45 4b10 	vmov	d0, r4, r5
 800c12a:	bd70      	pop	{r4, r5, r6, pc}
 800c12c:	7fefffff 	.word	0x7fefffff
 800c130:	7ff00000 	.word	0x7ff00000
 800c134:	43500000 	.word	0x43500000

0800c138 <round>:
 800c138:	ec51 0b10 	vmov	r0, r1, d0
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c142:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c146:	2c13      	cmp	r4, #19
 800c148:	ee10 2a10 	vmov	r2, s0
 800c14c:	460b      	mov	r3, r1
 800c14e:	dc19      	bgt.n	800c184 <round+0x4c>
 800c150:	2c00      	cmp	r4, #0
 800c152:	da09      	bge.n	800c168 <round+0x30>
 800c154:	3401      	adds	r4, #1
 800c156:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c15a:	d103      	bne.n	800c164 <round+0x2c>
 800c15c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c160:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c164:	2100      	movs	r1, #0
 800c166:	e028      	b.n	800c1ba <round+0x82>
 800c168:	4d15      	ldr	r5, [pc, #84]	; (800c1c0 <round+0x88>)
 800c16a:	4125      	asrs	r5, r4
 800c16c:	ea01 0605 	and.w	r6, r1, r5
 800c170:	4332      	orrs	r2, r6
 800c172:	d00e      	beq.n	800c192 <round+0x5a>
 800c174:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c178:	fa42 f404 	asr.w	r4, r2, r4
 800c17c:	4423      	add	r3, r4
 800c17e:	ea23 0305 	bic.w	r3, r3, r5
 800c182:	e7ef      	b.n	800c164 <round+0x2c>
 800c184:	2c33      	cmp	r4, #51	; 0x33
 800c186:	dd07      	ble.n	800c198 <round+0x60>
 800c188:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c18c:	d101      	bne.n	800c192 <round+0x5a>
 800c18e:	f7f4 f88d 	bl	80002ac <__adddf3>
 800c192:	ec41 0b10 	vmov	d0, r0, r1
 800c196:	bd70      	pop	{r4, r5, r6, pc}
 800c198:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c19c:	f04f 35ff 	mov.w	r5, #4294967295
 800c1a0:	40f5      	lsrs	r5, r6
 800c1a2:	4228      	tst	r0, r5
 800c1a4:	d0f5      	beq.n	800c192 <round+0x5a>
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c1ac:	fa01 f404 	lsl.w	r4, r1, r4
 800c1b0:	1912      	adds	r2, r2, r4
 800c1b2:	bf28      	it	cs
 800c1b4:	185b      	addcs	r3, r3, r1
 800c1b6:	ea22 0105 	bic.w	r1, r2, r5
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	4619      	mov	r1, r3
 800c1be:	e7e8      	b.n	800c192 <round+0x5a>
 800c1c0:	000fffff 	.word	0x000fffff

0800c1c4 <roundf>:
 800c1c4:	ee10 0a10 	vmov	r0, s0
 800c1c8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c1cc:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800c1d0:	2a16      	cmp	r2, #22
 800c1d2:	dc15      	bgt.n	800c200 <roundf+0x3c>
 800c1d4:	2a00      	cmp	r2, #0
 800c1d6:	da08      	bge.n	800c1ea <roundf+0x26>
 800c1d8:	3201      	adds	r2, #1
 800c1da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c1de:	d101      	bne.n	800c1e4 <roundf+0x20>
 800c1e0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c1e4:	ee00 3a10 	vmov	s0, r3
 800c1e8:	4770      	bx	lr
 800c1ea:	4908      	ldr	r1, [pc, #32]	; (800c20c <roundf+0x48>)
 800c1ec:	4111      	asrs	r1, r2
 800c1ee:	4208      	tst	r0, r1
 800c1f0:	d0fa      	beq.n	800c1e8 <roundf+0x24>
 800c1f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1f6:	4113      	asrs	r3, r2
 800c1f8:	4403      	add	r3, r0
 800c1fa:	ea23 0301 	bic.w	r3, r3, r1
 800c1fe:	e7f1      	b.n	800c1e4 <roundf+0x20>
 800c200:	2a80      	cmp	r2, #128	; 0x80
 800c202:	d1f1      	bne.n	800c1e8 <roundf+0x24>
 800c204:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	007fffff 	.word	0x007fffff

0800c210 <abort>:
 800c210:	b508      	push	{r3, lr}
 800c212:	2006      	movs	r0, #6
 800c214:	f000 ff4e 	bl	800d0b4 <raise>
 800c218:	2001      	movs	r0, #1
 800c21a:	f7f5 fda1 	bl	8001d60 <_exit>
	...

0800c220 <__assert_func>:
 800c220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c222:	4614      	mov	r4, r2
 800c224:	461a      	mov	r2, r3
 800c226:	4b09      	ldr	r3, [pc, #36]	; (800c24c <__assert_func+0x2c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4605      	mov	r5, r0
 800c22c:	68d8      	ldr	r0, [r3, #12]
 800c22e:	b14c      	cbz	r4, 800c244 <__assert_func+0x24>
 800c230:	4b07      	ldr	r3, [pc, #28]	; (800c250 <__assert_func+0x30>)
 800c232:	9100      	str	r1, [sp, #0]
 800c234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c238:	4906      	ldr	r1, [pc, #24]	; (800c254 <__assert_func+0x34>)
 800c23a:	462b      	mov	r3, r5
 800c23c:	f000 f81a 	bl	800c274 <fiprintf>
 800c240:	f7ff ffe6 	bl	800c210 <abort>
 800c244:	4b04      	ldr	r3, [pc, #16]	; (800c258 <__assert_func+0x38>)
 800c246:	461c      	mov	r4, r3
 800c248:	e7f3      	b.n	800c232 <__assert_func+0x12>
 800c24a:	bf00      	nop
 800c24c:	20000bc4 	.word	0x20000bc4
 800c250:	08012c40 	.word	0x08012c40
 800c254:	08012c4d 	.word	0x08012c4d
 800c258:	08012c7b 	.word	0x08012c7b

0800c25c <atexit>:
 800c25c:	2300      	movs	r3, #0
 800c25e:	4601      	mov	r1, r0
 800c260:	461a      	mov	r2, r3
 800c262:	4618      	mov	r0, r3
 800c264:	f001 b834 	b.w	800d2d0 <__register_exitproc>

0800c268 <__errno>:
 800c268:	4b01      	ldr	r3, [pc, #4]	; (800c270 <__errno+0x8>)
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000bc4 	.word	0x20000bc4

0800c274 <fiprintf>:
 800c274:	b40e      	push	{r1, r2, r3}
 800c276:	b503      	push	{r0, r1, lr}
 800c278:	4601      	mov	r1, r0
 800c27a:	ab03      	add	r3, sp, #12
 800c27c:	4805      	ldr	r0, [pc, #20]	; (800c294 <fiprintf+0x20>)
 800c27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c282:	6800      	ldr	r0, [r0, #0]
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	f000 f943 	bl	800c510 <_vfiprintf_r>
 800c28a:	b002      	add	sp, #8
 800c28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c290:	b003      	add	sp, #12
 800c292:	4770      	bx	lr
 800c294:	20000bc4 	.word	0x20000bc4

0800c298 <__libc_init_array>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	4d0d      	ldr	r5, [pc, #52]	; (800c2d0 <__libc_init_array+0x38>)
 800c29c:	4c0d      	ldr	r4, [pc, #52]	; (800c2d4 <__libc_init_array+0x3c>)
 800c29e:	1b64      	subs	r4, r4, r5
 800c2a0:	10a4      	asrs	r4, r4, #2
 800c2a2:	2600      	movs	r6, #0
 800c2a4:	42a6      	cmp	r6, r4
 800c2a6:	d109      	bne.n	800c2bc <__libc_init_array+0x24>
 800c2a8:	4d0b      	ldr	r5, [pc, #44]	; (800c2d8 <__libc_init_array+0x40>)
 800c2aa:	4c0c      	ldr	r4, [pc, #48]	; (800c2dc <__libc_init_array+0x44>)
 800c2ac:	f002 fefa 	bl	800f0a4 <_init>
 800c2b0:	1b64      	subs	r4, r4, r5
 800c2b2:	10a4      	asrs	r4, r4, #2
 800c2b4:	2600      	movs	r6, #0
 800c2b6:	42a6      	cmp	r6, r4
 800c2b8:	d105      	bne.n	800c2c6 <__libc_init_array+0x2e>
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c0:	4798      	blx	r3
 800c2c2:	3601      	adds	r6, #1
 800c2c4:	e7ee      	b.n	800c2a4 <__libc_init_array+0xc>
 800c2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ca:	4798      	blx	r3
 800c2cc:	3601      	adds	r6, #1
 800c2ce:	e7f2      	b.n	800c2b6 <__libc_init_array+0x1e>
 800c2d0:	08013030 	.word	0x08013030
 800c2d4:	08013030 	.word	0x08013030
 800c2d8:	08013030 	.word	0x08013030
 800c2dc:	08013034 	.word	0x08013034

0800c2e0 <__retarget_lock_init_recursive>:
 800c2e0:	4770      	bx	lr

0800c2e2 <__retarget_lock_acquire_recursive>:
 800c2e2:	4770      	bx	lr

0800c2e4 <__retarget_lock_release>:
 800c2e4:	4770      	bx	lr

0800c2e6 <__retarget_lock_release_recursive>:
 800c2e6:	4770      	bx	lr

0800c2e8 <malloc>:
 800c2e8:	4b02      	ldr	r3, [pc, #8]	; (800c2f4 <malloc+0xc>)
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	6818      	ldr	r0, [r3, #0]
 800c2ee:	f000 b88b 	b.w	800c408 <_malloc_r>
 800c2f2:	bf00      	nop
 800c2f4:	20000bc4 	.word	0x20000bc4

0800c2f8 <free>:
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <free+0xc>)
 800c2fa:	4601      	mov	r1, r0
 800c2fc:	6818      	ldr	r0, [r3, #0]
 800c2fe:	f000 b833 	b.w	800c368 <_free_r>
 800c302:	bf00      	nop
 800c304:	20000bc4 	.word	0x20000bc4

0800c308 <memcpy>:
 800c308:	440a      	add	r2, r1
 800c30a:	4291      	cmp	r1, r2
 800c30c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c310:	d100      	bne.n	800c314 <memcpy+0xc>
 800c312:	4770      	bx	lr
 800c314:	b510      	push	{r4, lr}
 800c316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c31e:	4291      	cmp	r1, r2
 800c320:	d1f9      	bne.n	800c316 <memcpy+0xe>
 800c322:	bd10      	pop	{r4, pc}

0800c324 <memmove>:
 800c324:	4288      	cmp	r0, r1
 800c326:	b510      	push	{r4, lr}
 800c328:	eb01 0402 	add.w	r4, r1, r2
 800c32c:	d902      	bls.n	800c334 <memmove+0x10>
 800c32e:	4284      	cmp	r4, r0
 800c330:	4623      	mov	r3, r4
 800c332:	d807      	bhi.n	800c344 <memmove+0x20>
 800c334:	1e43      	subs	r3, r0, #1
 800c336:	42a1      	cmp	r1, r4
 800c338:	d008      	beq.n	800c34c <memmove+0x28>
 800c33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c33e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c342:	e7f8      	b.n	800c336 <memmove+0x12>
 800c344:	4402      	add	r2, r0
 800c346:	4601      	mov	r1, r0
 800c348:	428a      	cmp	r2, r1
 800c34a:	d100      	bne.n	800c34e <memmove+0x2a>
 800c34c:	bd10      	pop	{r4, pc}
 800c34e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c356:	e7f7      	b.n	800c348 <memmove+0x24>

0800c358 <memset>:
 800c358:	4402      	add	r2, r0
 800c35a:	4603      	mov	r3, r0
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d100      	bne.n	800c362 <memset+0xa>
 800c360:	4770      	bx	lr
 800c362:	f803 1b01 	strb.w	r1, [r3], #1
 800c366:	e7f9      	b.n	800c35c <memset+0x4>

0800c368 <_free_r>:
 800c368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c36a:	2900      	cmp	r1, #0
 800c36c:	d048      	beq.n	800c400 <_free_r+0x98>
 800c36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c372:	9001      	str	r0, [sp, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	f1a1 0404 	sub.w	r4, r1, #4
 800c37a:	bfb8      	it	lt
 800c37c:	18e4      	addlt	r4, r4, r3
 800c37e:	f002 f8a3 	bl	800e4c8 <__malloc_lock>
 800c382:	4a20      	ldr	r2, [pc, #128]	; (800c404 <_free_r+0x9c>)
 800c384:	9801      	ldr	r0, [sp, #4]
 800c386:	6813      	ldr	r3, [r2, #0]
 800c388:	4615      	mov	r5, r2
 800c38a:	b933      	cbnz	r3, 800c39a <_free_r+0x32>
 800c38c:	6063      	str	r3, [r4, #4]
 800c38e:	6014      	str	r4, [r2, #0]
 800c390:	b003      	add	sp, #12
 800c392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c396:	f002 b89d 	b.w	800e4d4 <__malloc_unlock>
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	d90b      	bls.n	800c3b6 <_free_r+0x4e>
 800c39e:	6821      	ldr	r1, [r4, #0]
 800c3a0:	1862      	adds	r2, r4, r1
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	bf04      	itt	eq
 800c3a6:	681a      	ldreq	r2, [r3, #0]
 800c3a8:	685b      	ldreq	r3, [r3, #4]
 800c3aa:	6063      	str	r3, [r4, #4]
 800c3ac:	bf04      	itt	eq
 800c3ae:	1852      	addeq	r2, r2, r1
 800c3b0:	6022      	streq	r2, [r4, #0]
 800c3b2:	602c      	str	r4, [r5, #0]
 800c3b4:	e7ec      	b.n	800c390 <_free_r+0x28>
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	b10b      	cbz	r3, 800c3c0 <_free_r+0x58>
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	d9fa      	bls.n	800c3b6 <_free_r+0x4e>
 800c3c0:	6811      	ldr	r1, [r2, #0]
 800c3c2:	1855      	adds	r5, r2, r1
 800c3c4:	42a5      	cmp	r5, r4
 800c3c6:	d10b      	bne.n	800c3e0 <_free_r+0x78>
 800c3c8:	6824      	ldr	r4, [r4, #0]
 800c3ca:	4421      	add	r1, r4
 800c3cc:	1854      	adds	r4, r2, r1
 800c3ce:	42a3      	cmp	r3, r4
 800c3d0:	6011      	str	r1, [r2, #0]
 800c3d2:	d1dd      	bne.n	800c390 <_free_r+0x28>
 800c3d4:	681c      	ldr	r4, [r3, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	6053      	str	r3, [r2, #4]
 800c3da:	4421      	add	r1, r4
 800c3dc:	6011      	str	r1, [r2, #0]
 800c3de:	e7d7      	b.n	800c390 <_free_r+0x28>
 800c3e0:	d902      	bls.n	800c3e8 <_free_r+0x80>
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	6003      	str	r3, [r0, #0]
 800c3e6:	e7d3      	b.n	800c390 <_free_r+0x28>
 800c3e8:	6825      	ldr	r5, [r4, #0]
 800c3ea:	1961      	adds	r1, r4, r5
 800c3ec:	428b      	cmp	r3, r1
 800c3ee:	bf04      	itt	eq
 800c3f0:	6819      	ldreq	r1, [r3, #0]
 800c3f2:	685b      	ldreq	r3, [r3, #4]
 800c3f4:	6063      	str	r3, [r4, #4]
 800c3f6:	bf04      	itt	eq
 800c3f8:	1949      	addeq	r1, r1, r5
 800c3fa:	6021      	streq	r1, [r4, #0]
 800c3fc:	6054      	str	r4, [r2, #4]
 800c3fe:	e7c7      	b.n	800c390 <_free_r+0x28>
 800c400:	b003      	add	sp, #12
 800c402:	bd30      	pop	{r4, r5, pc}
 800c404:	20001780 	.word	0x20001780

0800c408 <_malloc_r>:
 800c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40a:	1ccd      	adds	r5, r1, #3
 800c40c:	f025 0503 	bic.w	r5, r5, #3
 800c410:	3508      	adds	r5, #8
 800c412:	2d0c      	cmp	r5, #12
 800c414:	bf38      	it	cc
 800c416:	250c      	movcc	r5, #12
 800c418:	2d00      	cmp	r5, #0
 800c41a:	4606      	mov	r6, r0
 800c41c:	db01      	blt.n	800c422 <_malloc_r+0x1a>
 800c41e:	42a9      	cmp	r1, r5
 800c420:	d903      	bls.n	800c42a <_malloc_r+0x22>
 800c422:	230c      	movs	r3, #12
 800c424:	6033      	str	r3, [r6, #0]
 800c426:	2000      	movs	r0, #0
 800c428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c42a:	f002 f84d 	bl	800e4c8 <__malloc_lock>
 800c42e:	4921      	ldr	r1, [pc, #132]	; (800c4b4 <_malloc_r+0xac>)
 800c430:	680a      	ldr	r2, [r1, #0]
 800c432:	4614      	mov	r4, r2
 800c434:	b99c      	cbnz	r4, 800c45e <_malloc_r+0x56>
 800c436:	4f20      	ldr	r7, [pc, #128]	; (800c4b8 <_malloc_r+0xb0>)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	b923      	cbnz	r3, 800c446 <_malloc_r+0x3e>
 800c43c:	4621      	mov	r1, r4
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 fe00 	bl	800d044 <_sbrk_r>
 800c444:	6038      	str	r0, [r7, #0]
 800c446:	4629      	mov	r1, r5
 800c448:	4630      	mov	r0, r6
 800c44a:	f000 fdfb 	bl	800d044 <_sbrk_r>
 800c44e:	1c43      	adds	r3, r0, #1
 800c450:	d123      	bne.n	800c49a <_malloc_r+0x92>
 800c452:	230c      	movs	r3, #12
 800c454:	6033      	str	r3, [r6, #0]
 800c456:	4630      	mov	r0, r6
 800c458:	f002 f83c 	bl	800e4d4 <__malloc_unlock>
 800c45c:	e7e3      	b.n	800c426 <_malloc_r+0x1e>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	1b5b      	subs	r3, r3, r5
 800c462:	d417      	bmi.n	800c494 <_malloc_r+0x8c>
 800c464:	2b0b      	cmp	r3, #11
 800c466:	d903      	bls.n	800c470 <_malloc_r+0x68>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	441c      	add	r4, r3
 800c46c:	6025      	str	r5, [r4, #0]
 800c46e:	e004      	b.n	800c47a <_malloc_r+0x72>
 800c470:	6863      	ldr	r3, [r4, #4]
 800c472:	42a2      	cmp	r2, r4
 800c474:	bf0c      	ite	eq
 800c476:	600b      	streq	r3, [r1, #0]
 800c478:	6053      	strne	r3, [r2, #4]
 800c47a:	4630      	mov	r0, r6
 800c47c:	f002 f82a 	bl	800e4d4 <__malloc_unlock>
 800c480:	f104 000b 	add.w	r0, r4, #11
 800c484:	1d23      	adds	r3, r4, #4
 800c486:	f020 0007 	bic.w	r0, r0, #7
 800c48a:	1ac2      	subs	r2, r0, r3
 800c48c:	d0cc      	beq.n	800c428 <_malloc_r+0x20>
 800c48e:	1a1b      	subs	r3, r3, r0
 800c490:	50a3      	str	r3, [r4, r2]
 800c492:	e7c9      	b.n	800c428 <_malloc_r+0x20>
 800c494:	4622      	mov	r2, r4
 800c496:	6864      	ldr	r4, [r4, #4]
 800c498:	e7cc      	b.n	800c434 <_malloc_r+0x2c>
 800c49a:	1cc4      	adds	r4, r0, #3
 800c49c:	f024 0403 	bic.w	r4, r4, #3
 800c4a0:	42a0      	cmp	r0, r4
 800c4a2:	d0e3      	beq.n	800c46c <_malloc_r+0x64>
 800c4a4:	1a21      	subs	r1, r4, r0
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f000 fdcc 	bl	800d044 <_sbrk_r>
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	d1dd      	bne.n	800c46c <_malloc_r+0x64>
 800c4b0:	e7cf      	b.n	800c452 <_malloc_r+0x4a>
 800c4b2:	bf00      	nop
 800c4b4:	20001780 	.word	0x20001780
 800c4b8:	20001784 	.word	0x20001784

0800c4bc <__sfputc_r>:
 800c4bc:	6893      	ldr	r3, [r2, #8]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	b410      	push	{r4}
 800c4c4:	6093      	str	r3, [r2, #8]
 800c4c6:	da08      	bge.n	800c4da <__sfputc_r+0x1e>
 800c4c8:	6994      	ldr	r4, [r2, #24]
 800c4ca:	42a3      	cmp	r3, r4
 800c4cc:	db01      	blt.n	800c4d2 <__sfputc_r+0x16>
 800c4ce:	290a      	cmp	r1, #10
 800c4d0:	d103      	bne.n	800c4da <__sfputc_r+0x1e>
 800c4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4d6:	f000 be3b 	b.w	800d150 <__swbuf_r>
 800c4da:	6813      	ldr	r3, [r2, #0]
 800c4dc:	1c58      	adds	r0, r3, #1
 800c4de:	6010      	str	r0, [r2, #0]
 800c4e0:	7019      	strb	r1, [r3, #0]
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <__sfputs_r>:
 800c4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ec:	4606      	mov	r6, r0
 800c4ee:	460f      	mov	r7, r1
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	18d5      	adds	r5, r2, r3
 800c4f4:	42ac      	cmp	r4, r5
 800c4f6:	d101      	bne.n	800c4fc <__sfputs_r+0x12>
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	e007      	b.n	800c50c <__sfputs_r+0x22>
 800c4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c500:	463a      	mov	r2, r7
 800c502:	4630      	mov	r0, r6
 800c504:	f7ff ffda 	bl	800c4bc <__sfputc_r>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d1f3      	bne.n	800c4f4 <__sfputs_r+0xa>
 800c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c510 <_vfiprintf_r>:
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	460d      	mov	r5, r1
 800c516:	b09d      	sub	sp, #116	; 0x74
 800c518:	4614      	mov	r4, r2
 800c51a:	4698      	mov	r8, r3
 800c51c:	4606      	mov	r6, r0
 800c51e:	b118      	cbz	r0, 800c528 <_vfiprintf_r+0x18>
 800c520:	6983      	ldr	r3, [r0, #24]
 800c522:	b90b      	cbnz	r3, 800c528 <_vfiprintf_r+0x18>
 800c524:	f001 feca 	bl	800e2bc <__sinit>
 800c528:	4b89      	ldr	r3, [pc, #548]	; (800c750 <_vfiprintf_r+0x240>)
 800c52a:	429d      	cmp	r5, r3
 800c52c:	d11b      	bne.n	800c566 <_vfiprintf_r+0x56>
 800c52e:	6875      	ldr	r5, [r6, #4]
 800c530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c532:	07d9      	lsls	r1, r3, #31
 800c534:	d405      	bmi.n	800c542 <_vfiprintf_r+0x32>
 800c536:	89ab      	ldrh	r3, [r5, #12]
 800c538:	059a      	lsls	r2, r3, #22
 800c53a:	d402      	bmi.n	800c542 <_vfiprintf_r+0x32>
 800c53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c53e:	f7ff fed0 	bl	800c2e2 <__retarget_lock_acquire_recursive>
 800c542:	89ab      	ldrh	r3, [r5, #12]
 800c544:	071b      	lsls	r3, r3, #28
 800c546:	d501      	bpl.n	800c54c <_vfiprintf_r+0x3c>
 800c548:	692b      	ldr	r3, [r5, #16]
 800c54a:	b9eb      	cbnz	r3, 800c588 <_vfiprintf_r+0x78>
 800c54c:	4629      	mov	r1, r5
 800c54e:	4630      	mov	r0, r6
 800c550:	f000 fe50 	bl	800d1f4 <__swsetup_r>
 800c554:	b1c0      	cbz	r0, 800c588 <_vfiprintf_r+0x78>
 800c556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c558:	07dc      	lsls	r4, r3, #31
 800c55a:	d50e      	bpl.n	800c57a <_vfiprintf_r+0x6a>
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	b01d      	add	sp, #116	; 0x74
 800c562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c566:	4b7b      	ldr	r3, [pc, #492]	; (800c754 <_vfiprintf_r+0x244>)
 800c568:	429d      	cmp	r5, r3
 800c56a:	d101      	bne.n	800c570 <_vfiprintf_r+0x60>
 800c56c:	68b5      	ldr	r5, [r6, #8]
 800c56e:	e7df      	b.n	800c530 <_vfiprintf_r+0x20>
 800c570:	4b79      	ldr	r3, [pc, #484]	; (800c758 <_vfiprintf_r+0x248>)
 800c572:	429d      	cmp	r5, r3
 800c574:	bf08      	it	eq
 800c576:	68f5      	ldreq	r5, [r6, #12]
 800c578:	e7da      	b.n	800c530 <_vfiprintf_r+0x20>
 800c57a:	89ab      	ldrh	r3, [r5, #12]
 800c57c:	0598      	lsls	r0, r3, #22
 800c57e:	d4ed      	bmi.n	800c55c <_vfiprintf_r+0x4c>
 800c580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c582:	f7ff feb0 	bl	800c2e6 <__retarget_lock_release_recursive>
 800c586:	e7e9      	b.n	800c55c <_vfiprintf_r+0x4c>
 800c588:	2300      	movs	r3, #0
 800c58a:	9309      	str	r3, [sp, #36]	; 0x24
 800c58c:	2320      	movs	r3, #32
 800c58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c592:	f8cd 800c 	str.w	r8, [sp, #12]
 800c596:	2330      	movs	r3, #48	; 0x30
 800c598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c75c <_vfiprintf_r+0x24c>
 800c59c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5a0:	f04f 0901 	mov.w	r9, #1
 800c5a4:	4623      	mov	r3, r4
 800c5a6:	469a      	mov	sl, r3
 800c5a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ac:	b10a      	cbz	r2, 800c5b2 <_vfiprintf_r+0xa2>
 800c5ae:	2a25      	cmp	r2, #37	; 0x25
 800c5b0:	d1f9      	bne.n	800c5a6 <_vfiprintf_r+0x96>
 800c5b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c5b6:	d00b      	beq.n	800c5d0 <_vfiprintf_r+0xc0>
 800c5b8:	465b      	mov	r3, fp
 800c5ba:	4622      	mov	r2, r4
 800c5bc:	4629      	mov	r1, r5
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f7ff ff93 	bl	800c4ea <__sfputs_r>
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	f000 80aa 	beq.w	800c71e <_vfiprintf_r+0x20e>
 800c5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5cc:	445a      	add	r2, fp
 800c5ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f000 80a2 	beq.w	800c71e <_vfiprintf_r+0x20e>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5e4:	f10a 0a01 	add.w	sl, sl, #1
 800c5e8:	9304      	str	r3, [sp, #16]
 800c5ea:	9307      	str	r3, [sp, #28]
 800c5ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c5f2:	4654      	mov	r4, sl
 800c5f4:	2205      	movs	r2, #5
 800c5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5fa:	4858      	ldr	r0, [pc, #352]	; (800c75c <_vfiprintf_r+0x24c>)
 800c5fc:	f7f3 fe00 	bl	8000200 <memchr>
 800c600:	9a04      	ldr	r2, [sp, #16]
 800c602:	b9d8      	cbnz	r0, 800c63c <_vfiprintf_r+0x12c>
 800c604:	06d1      	lsls	r1, r2, #27
 800c606:	bf44      	itt	mi
 800c608:	2320      	movmi	r3, #32
 800c60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c60e:	0713      	lsls	r3, r2, #28
 800c610:	bf44      	itt	mi
 800c612:	232b      	movmi	r3, #43	; 0x2b
 800c614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c618:	f89a 3000 	ldrb.w	r3, [sl]
 800c61c:	2b2a      	cmp	r3, #42	; 0x2a
 800c61e:	d015      	beq.n	800c64c <_vfiprintf_r+0x13c>
 800c620:	9a07      	ldr	r2, [sp, #28]
 800c622:	4654      	mov	r4, sl
 800c624:	2000      	movs	r0, #0
 800c626:	f04f 0c0a 	mov.w	ip, #10
 800c62a:	4621      	mov	r1, r4
 800c62c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c630:	3b30      	subs	r3, #48	; 0x30
 800c632:	2b09      	cmp	r3, #9
 800c634:	d94e      	bls.n	800c6d4 <_vfiprintf_r+0x1c4>
 800c636:	b1b0      	cbz	r0, 800c666 <_vfiprintf_r+0x156>
 800c638:	9207      	str	r2, [sp, #28]
 800c63a:	e014      	b.n	800c666 <_vfiprintf_r+0x156>
 800c63c:	eba0 0308 	sub.w	r3, r0, r8
 800c640:	fa09 f303 	lsl.w	r3, r9, r3
 800c644:	4313      	orrs	r3, r2
 800c646:	9304      	str	r3, [sp, #16]
 800c648:	46a2      	mov	sl, r4
 800c64a:	e7d2      	b.n	800c5f2 <_vfiprintf_r+0xe2>
 800c64c:	9b03      	ldr	r3, [sp, #12]
 800c64e:	1d19      	adds	r1, r3, #4
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	9103      	str	r1, [sp, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	bfbb      	ittet	lt
 800c658:	425b      	neglt	r3, r3
 800c65a:	f042 0202 	orrlt.w	r2, r2, #2
 800c65e:	9307      	strge	r3, [sp, #28]
 800c660:	9307      	strlt	r3, [sp, #28]
 800c662:	bfb8      	it	lt
 800c664:	9204      	strlt	r2, [sp, #16]
 800c666:	7823      	ldrb	r3, [r4, #0]
 800c668:	2b2e      	cmp	r3, #46	; 0x2e
 800c66a:	d10c      	bne.n	800c686 <_vfiprintf_r+0x176>
 800c66c:	7863      	ldrb	r3, [r4, #1]
 800c66e:	2b2a      	cmp	r3, #42	; 0x2a
 800c670:	d135      	bne.n	800c6de <_vfiprintf_r+0x1ce>
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	1d1a      	adds	r2, r3, #4
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	9203      	str	r2, [sp, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bfb8      	it	lt
 800c67e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c682:	3402      	adds	r4, #2
 800c684:	9305      	str	r3, [sp, #20]
 800c686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c76c <_vfiprintf_r+0x25c>
 800c68a:	7821      	ldrb	r1, [r4, #0]
 800c68c:	2203      	movs	r2, #3
 800c68e:	4650      	mov	r0, sl
 800c690:	f7f3 fdb6 	bl	8000200 <memchr>
 800c694:	b140      	cbz	r0, 800c6a8 <_vfiprintf_r+0x198>
 800c696:	2340      	movs	r3, #64	; 0x40
 800c698:	eba0 000a 	sub.w	r0, r0, sl
 800c69c:	fa03 f000 	lsl.w	r0, r3, r0
 800c6a0:	9b04      	ldr	r3, [sp, #16]
 800c6a2:	4303      	orrs	r3, r0
 800c6a4:	3401      	adds	r4, #1
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ac:	482c      	ldr	r0, [pc, #176]	; (800c760 <_vfiprintf_r+0x250>)
 800c6ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6b2:	2206      	movs	r2, #6
 800c6b4:	f7f3 fda4 	bl	8000200 <memchr>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d03f      	beq.n	800c73c <_vfiprintf_r+0x22c>
 800c6bc:	4b29      	ldr	r3, [pc, #164]	; (800c764 <_vfiprintf_r+0x254>)
 800c6be:	bb1b      	cbnz	r3, 800c708 <_vfiprintf_r+0x1f8>
 800c6c0:	9b03      	ldr	r3, [sp, #12]
 800c6c2:	3307      	adds	r3, #7
 800c6c4:	f023 0307 	bic.w	r3, r3, #7
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	9303      	str	r3, [sp, #12]
 800c6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ce:	443b      	add	r3, r7
 800c6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d2:	e767      	b.n	800c5a4 <_vfiprintf_r+0x94>
 800c6d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6d8:	460c      	mov	r4, r1
 800c6da:	2001      	movs	r0, #1
 800c6dc:	e7a5      	b.n	800c62a <_vfiprintf_r+0x11a>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	3401      	adds	r4, #1
 800c6e2:	9305      	str	r3, [sp, #20]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	f04f 0c0a 	mov.w	ip, #10
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6f0:	3a30      	subs	r2, #48	; 0x30
 800c6f2:	2a09      	cmp	r2, #9
 800c6f4:	d903      	bls.n	800c6fe <_vfiprintf_r+0x1ee>
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d0c5      	beq.n	800c686 <_vfiprintf_r+0x176>
 800c6fa:	9105      	str	r1, [sp, #20]
 800c6fc:	e7c3      	b.n	800c686 <_vfiprintf_r+0x176>
 800c6fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c702:	4604      	mov	r4, r0
 800c704:	2301      	movs	r3, #1
 800c706:	e7f0      	b.n	800c6ea <_vfiprintf_r+0x1da>
 800c708:	ab03      	add	r3, sp, #12
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	462a      	mov	r2, r5
 800c70e:	4b16      	ldr	r3, [pc, #88]	; (800c768 <_vfiprintf_r+0x258>)
 800c710:	a904      	add	r1, sp, #16
 800c712:	4630      	mov	r0, r6
 800c714:	f000 f8cc 	bl	800c8b0 <_printf_float>
 800c718:	4607      	mov	r7, r0
 800c71a:	1c78      	adds	r0, r7, #1
 800c71c:	d1d6      	bne.n	800c6cc <_vfiprintf_r+0x1bc>
 800c71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c720:	07d9      	lsls	r1, r3, #31
 800c722:	d405      	bmi.n	800c730 <_vfiprintf_r+0x220>
 800c724:	89ab      	ldrh	r3, [r5, #12]
 800c726:	059a      	lsls	r2, r3, #22
 800c728:	d402      	bmi.n	800c730 <_vfiprintf_r+0x220>
 800c72a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c72c:	f7ff fddb 	bl	800c2e6 <__retarget_lock_release_recursive>
 800c730:	89ab      	ldrh	r3, [r5, #12]
 800c732:	065b      	lsls	r3, r3, #25
 800c734:	f53f af12 	bmi.w	800c55c <_vfiprintf_r+0x4c>
 800c738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c73a:	e711      	b.n	800c560 <_vfiprintf_r+0x50>
 800c73c:	ab03      	add	r3, sp, #12
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	462a      	mov	r2, r5
 800c742:	4b09      	ldr	r3, [pc, #36]	; (800c768 <_vfiprintf_r+0x258>)
 800c744:	a904      	add	r1, sp, #16
 800c746:	4630      	mov	r0, r6
 800c748:	f000 fb56 	bl	800cdf8 <_printf_i>
 800c74c:	e7e4      	b.n	800c718 <_vfiprintf_r+0x208>
 800c74e:	bf00      	nop
 800c750:	08012d7c 	.word	0x08012d7c
 800c754:	08012d9c 	.word	0x08012d9c
 800c758:	08012d5c 	.word	0x08012d5c
 800c75c:	08012c80 	.word	0x08012c80
 800c760:	08012c8a 	.word	0x08012c8a
 800c764:	0800c8b1 	.word	0x0800c8b1
 800c768:	0800c4eb 	.word	0x0800c4eb
 800c76c:	08012c86 	.word	0x08012c86

0800c770 <__cvt>:
 800c770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c774:	ec55 4b10 	vmov	r4, r5, d0
 800c778:	2d00      	cmp	r5, #0
 800c77a:	460e      	mov	r6, r1
 800c77c:	4619      	mov	r1, r3
 800c77e:	462b      	mov	r3, r5
 800c780:	bfbb      	ittet	lt
 800c782:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c786:	461d      	movlt	r5, r3
 800c788:	2300      	movge	r3, #0
 800c78a:	232d      	movlt	r3, #45	; 0x2d
 800c78c:	700b      	strb	r3, [r1, #0]
 800c78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c790:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c794:	4691      	mov	r9, r2
 800c796:	f023 0820 	bic.w	r8, r3, #32
 800c79a:	bfbc      	itt	lt
 800c79c:	4622      	movlt	r2, r4
 800c79e:	4614      	movlt	r4, r2
 800c7a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7a4:	d005      	beq.n	800c7b2 <__cvt+0x42>
 800c7a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c7aa:	d100      	bne.n	800c7ae <__cvt+0x3e>
 800c7ac:	3601      	adds	r6, #1
 800c7ae:	2102      	movs	r1, #2
 800c7b0:	e000      	b.n	800c7b4 <__cvt+0x44>
 800c7b2:	2103      	movs	r1, #3
 800c7b4:	ab03      	add	r3, sp, #12
 800c7b6:	9301      	str	r3, [sp, #4]
 800c7b8:	ab02      	add	r3, sp, #8
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	ec45 4b10 	vmov	d0, r4, r5
 800c7c0:	4653      	mov	r3, sl
 800c7c2:	4632      	mov	r2, r6
 800c7c4:	f000 fe74 	bl	800d4b0 <_dtoa_r>
 800c7c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c7cc:	4607      	mov	r7, r0
 800c7ce:	d102      	bne.n	800c7d6 <__cvt+0x66>
 800c7d0:	f019 0f01 	tst.w	r9, #1
 800c7d4:	d022      	beq.n	800c81c <__cvt+0xac>
 800c7d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7da:	eb07 0906 	add.w	r9, r7, r6
 800c7de:	d110      	bne.n	800c802 <__cvt+0x92>
 800c7e0:	783b      	ldrb	r3, [r7, #0]
 800c7e2:	2b30      	cmp	r3, #48	; 0x30
 800c7e4:	d10a      	bne.n	800c7fc <__cvt+0x8c>
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7f4 f97b 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7f2:	b918      	cbnz	r0, 800c7fc <__cvt+0x8c>
 800c7f4:	f1c6 0601 	rsb	r6, r6, #1
 800c7f8:	f8ca 6000 	str.w	r6, [sl]
 800c7fc:	f8da 3000 	ldr.w	r3, [sl]
 800c800:	4499      	add	r9, r3
 800c802:	2200      	movs	r2, #0
 800c804:	2300      	movs	r3, #0
 800c806:	4620      	mov	r0, r4
 800c808:	4629      	mov	r1, r5
 800c80a:	f7f4 f96d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c80e:	b108      	cbz	r0, 800c814 <__cvt+0xa4>
 800c810:	f8cd 900c 	str.w	r9, [sp, #12]
 800c814:	2230      	movs	r2, #48	; 0x30
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	454b      	cmp	r3, r9
 800c81a:	d307      	bcc.n	800c82c <__cvt+0xbc>
 800c81c:	9b03      	ldr	r3, [sp, #12]
 800c81e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c820:	1bdb      	subs	r3, r3, r7
 800c822:	4638      	mov	r0, r7
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	b004      	add	sp, #16
 800c828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82c:	1c59      	adds	r1, r3, #1
 800c82e:	9103      	str	r1, [sp, #12]
 800c830:	701a      	strb	r2, [r3, #0]
 800c832:	e7f0      	b.n	800c816 <__cvt+0xa6>

0800c834 <__exponent>:
 800c834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c836:	4603      	mov	r3, r0
 800c838:	2900      	cmp	r1, #0
 800c83a:	bfb8      	it	lt
 800c83c:	4249      	neglt	r1, r1
 800c83e:	f803 2b02 	strb.w	r2, [r3], #2
 800c842:	bfb4      	ite	lt
 800c844:	222d      	movlt	r2, #45	; 0x2d
 800c846:	222b      	movge	r2, #43	; 0x2b
 800c848:	2909      	cmp	r1, #9
 800c84a:	7042      	strb	r2, [r0, #1]
 800c84c:	dd2a      	ble.n	800c8a4 <__exponent+0x70>
 800c84e:	f10d 0407 	add.w	r4, sp, #7
 800c852:	46a4      	mov	ip, r4
 800c854:	270a      	movs	r7, #10
 800c856:	46a6      	mov	lr, r4
 800c858:	460a      	mov	r2, r1
 800c85a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c85e:	fb07 1516 	mls	r5, r7, r6, r1
 800c862:	3530      	adds	r5, #48	; 0x30
 800c864:	2a63      	cmp	r2, #99	; 0x63
 800c866:	f104 34ff 	add.w	r4, r4, #4294967295
 800c86a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c86e:	4631      	mov	r1, r6
 800c870:	dcf1      	bgt.n	800c856 <__exponent+0x22>
 800c872:	3130      	adds	r1, #48	; 0x30
 800c874:	f1ae 0502 	sub.w	r5, lr, #2
 800c878:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c87c:	1c44      	adds	r4, r0, #1
 800c87e:	4629      	mov	r1, r5
 800c880:	4561      	cmp	r1, ip
 800c882:	d30a      	bcc.n	800c89a <__exponent+0x66>
 800c884:	f10d 0209 	add.w	r2, sp, #9
 800c888:	eba2 020e 	sub.w	r2, r2, lr
 800c88c:	4565      	cmp	r5, ip
 800c88e:	bf88      	it	hi
 800c890:	2200      	movhi	r2, #0
 800c892:	4413      	add	r3, r2
 800c894:	1a18      	subs	r0, r3, r0
 800c896:	b003      	add	sp, #12
 800c898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c89a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c89e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c8a2:	e7ed      	b.n	800c880 <__exponent+0x4c>
 800c8a4:	2330      	movs	r3, #48	; 0x30
 800c8a6:	3130      	adds	r1, #48	; 0x30
 800c8a8:	7083      	strb	r3, [r0, #2]
 800c8aa:	70c1      	strb	r1, [r0, #3]
 800c8ac:	1d03      	adds	r3, r0, #4
 800c8ae:	e7f1      	b.n	800c894 <__exponent+0x60>

0800c8b0 <_printf_float>:
 800c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	ed2d 8b02 	vpush	{d8}
 800c8b8:	b08d      	sub	sp, #52	; 0x34
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c8c0:	4616      	mov	r6, r2
 800c8c2:	461f      	mov	r7, r3
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	f001 fd97 	bl	800e3f8 <_localeconv_r>
 800c8ca:	f8d0 a000 	ldr.w	sl, [r0]
 800c8ce:	4650      	mov	r0, sl
 800c8d0:	f7f3 fc88 	bl	80001e4 <strlen>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8d8:	6823      	ldr	r3, [r4, #0]
 800c8da:	9305      	str	r3, [sp, #20]
 800c8dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c8e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c8e4:	3307      	adds	r3, #7
 800c8e6:	f023 0307 	bic.w	r3, r3, #7
 800c8ea:	f103 0208 	add.w	r2, r3, #8
 800c8ee:	f8c8 2000 	str.w	r2, [r8]
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c902:	9307      	str	r3, [sp, #28]
 800c904:	f8cd 8018 	str.w	r8, [sp, #24]
 800c908:	ee08 0a10 	vmov	s16, r0
 800c90c:	4b9f      	ldr	r3, [pc, #636]	; (800cb8c <_printf_float+0x2dc>)
 800c90e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c912:	f04f 32ff 	mov.w	r2, #4294967295
 800c916:	f7f4 f919 	bl	8000b4c <__aeabi_dcmpun>
 800c91a:	bb88      	cbnz	r0, 800c980 <_printf_float+0xd0>
 800c91c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c920:	4b9a      	ldr	r3, [pc, #616]	; (800cb8c <_printf_float+0x2dc>)
 800c922:	f04f 32ff 	mov.w	r2, #4294967295
 800c926:	f7f4 f8f3 	bl	8000b10 <__aeabi_dcmple>
 800c92a:	bb48      	cbnz	r0, 800c980 <_printf_float+0xd0>
 800c92c:	2200      	movs	r2, #0
 800c92e:	2300      	movs	r3, #0
 800c930:	4640      	mov	r0, r8
 800c932:	4649      	mov	r1, r9
 800c934:	f7f4 f8e2 	bl	8000afc <__aeabi_dcmplt>
 800c938:	b110      	cbz	r0, 800c940 <_printf_float+0x90>
 800c93a:	232d      	movs	r3, #45	; 0x2d
 800c93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c940:	4b93      	ldr	r3, [pc, #588]	; (800cb90 <_printf_float+0x2e0>)
 800c942:	4894      	ldr	r0, [pc, #592]	; (800cb94 <_printf_float+0x2e4>)
 800c944:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c948:	bf94      	ite	ls
 800c94a:	4698      	movls	r8, r3
 800c94c:	4680      	movhi	r8, r0
 800c94e:	2303      	movs	r3, #3
 800c950:	6123      	str	r3, [r4, #16]
 800c952:	9b05      	ldr	r3, [sp, #20]
 800c954:	f023 0204 	bic.w	r2, r3, #4
 800c958:	6022      	str	r2, [r4, #0]
 800c95a:	f04f 0900 	mov.w	r9, #0
 800c95e:	9700      	str	r7, [sp, #0]
 800c960:	4633      	mov	r3, r6
 800c962:	aa0b      	add	r2, sp, #44	; 0x2c
 800c964:	4621      	mov	r1, r4
 800c966:	4628      	mov	r0, r5
 800c968:	f000 f9d8 	bl	800cd1c <_printf_common>
 800c96c:	3001      	adds	r0, #1
 800c96e:	f040 8090 	bne.w	800ca92 <_printf_float+0x1e2>
 800c972:	f04f 30ff 	mov.w	r0, #4294967295
 800c976:	b00d      	add	sp, #52	; 0x34
 800c978:	ecbd 8b02 	vpop	{d8}
 800c97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c980:	4642      	mov	r2, r8
 800c982:	464b      	mov	r3, r9
 800c984:	4640      	mov	r0, r8
 800c986:	4649      	mov	r1, r9
 800c988:	f7f4 f8e0 	bl	8000b4c <__aeabi_dcmpun>
 800c98c:	b140      	cbz	r0, 800c9a0 <_printf_float+0xf0>
 800c98e:	464b      	mov	r3, r9
 800c990:	2b00      	cmp	r3, #0
 800c992:	bfbc      	itt	lt
 800c994:	232d      	movlt	r3, #45	; 0x2d
 800c996:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c99a:	487f      	ldr	r0, [pc, #508]	; (800cb98 <_printf_float+0x2e8>)
 800c99c:	4b7f      	ldr	r3, [pc, #508]	; (800cb9c <_printf_float+0x2ec>)
 800c99e:	e7d1      	b.n	800c944 <_printf_float+0x94>
 800c9a0:	6863      	ldr	r3, [r4, #4]
 800c9a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c9a6:	9206      	str	r2, [sp, #24]
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	d13f      	bne.n	800ca2c <_printf_float+0x17c>
 800c9ac:	2306      	movs	r3, #6
 800c9ae:	6063      	str	r3, [r4, #4]
 800c9b0:	9b05      	ldr	r3, [sp, #20]
 800c9b2:	6861      	ldr	r1, [r4, #4]
 800c9b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	9303      	str	r3, [sp, #12]
 800c9bc:	ab0a      	add	r3, sp, #40	; 0x28
 800c9be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c9c2:	ab09      	add	r3, sp, #36	; 0x24
 800c9c4:	ec49 8b10 	vmov	d0, r8, r9
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	6022      	str	r2, [r4, #0]
 800c9cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f7ff fecd 	bl	800c770 <__cvt>
 800c9d6:	9b06      	ldr	r3, [sp, #24]
 800c9d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9da:	2b47      	cmp	r3, #71	; 0x47
 800c9dc:	4680      	mov	r8, r0
 800c9de:	d108      	bne.n	800c9f2 <_printf_float+0x142>
 800c9e0:	1cc8      	adds	r0, r1, #3
 800c9e2:	db02      	blt.n	800c9ea <_printf_float+0x13a>
 800c9e4:	6863      	ldr	r3, [r4, #4]
 800c9e6:	4299      	cmp	r1, r3
 800c9e8:	dd41      	ble.n	800ca6e <_printf_float+0x1be>
 800c9ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800c9ee:	fa5f fb8b 	uxtb.w	fp, fp
 800c9f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9f6:	d820      	bhi.n	800ca3a <_printf_float+0x18a>
 800c9f8:	3901      	subs	r1, #1
 800c9fa:	465a      	mov	r2, fp
 800c9fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca00:	9109      	str	r1, [sp, #36]	; 0x24
 800ca02:	f7ff ff17 	bl	800c834 <__exponent>
 800ca06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca08:	1813      	adds	r3, r2, r0
 800ca0a:	2a01      	cmp	r2, #1
 800ca0c:	4681      	mov	r9, r0
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	dc02      	bgt.n	800ca18 <_printf_float+0x168>
 800ca12:	6822      	ldr	r2, [r4, #0]
 800ca14:	07d2      	lsls	r2, r2, #31
 800ca16:	d501      	bpl.n	800ca1c <_printf_float+0x16c>
 800ca18:	3301      	adds	r3, #1
 800ca1a:	6123      	str	r3, [r4, #16]
 800ca1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d09c      	beq.n	800c95e <_printf_float+0xae>
 800ca24:	232d      	movs	r3, #45	; 0x2d
 800ca26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca2a:	e798      	b.n	800c95e <_printf_float+0xae>
 800ca2c:	9a06      	ldr	r2, [sp, #24]
 800ca2e:	2a47      	cmp	r2, #71	; 0x47
 800ca30:	d1be      	bne.n	800c9b0 <_printf_float+0x100>
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1bc      	bne.n	800c9b0 <_printf_float+0x100>
 800ca36:	2301      	movs	r3, #1
 800ca38:	e7b9      	b.n	800c9ae <_printf_float+0xfe>
 800ca3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca3e:	d118      	bne.n	800ca72 <_printf_float+0x1c2>
 800ca40:	2900      	cmp	r1, #0
 800ca42:	6863      	ldr	r3, [r4, #4]
 800ca44:	dd0b      	ble.n	800ca5e <_printf_float+0x1ae>
 800ca46:	6121      	str	r1, [r4, #16]
 800ca48:	b913      	cbnz	r3, 800ca50 <_printf_float+0x1a0>
 800ca4a:	6822      	ldr	r2, [r4, #0]
 800ca4c:	07d0      	lsls	r0, r2, #31
 800ca4e:	d502      	bpl.n	800ca56 <_printf_float+0x1a6>
 800ca50:	3301      	adds	r3, #1
 800ca52:	440b      	add	r3, r1
 800ca54:	6123      	str	r3, [r4, #16]
 800ca56:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca58:	f04f 0900 	mov.w	r9, #0
 800ca5c:	e7de      	b.n	800ca1c <_printf_float+0x16c>
 800ca5e:	b913      	cbnz	r3, 800ca66 <_printf_float+0x1b6>
 800ca60:	6822      	ldr	r2, [r4, #0]
 800ca62:	07d2      	lsls	r2, r2, #31
 800ca64:	d501      	bpl.n	800ca6a <_printf_float+0x1ba>
 800ca66:	3302      	adds	r3, #2
 800ca68:	e7f4      	b.n	800ca54 <_printf_float+0x1a4>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e7f2      	b.n	800ca54 <_printf_float+0x1a4>
 800ca6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca74:	4299      	cmp	r1, r3
 800ca76:	db05      	blt.n	800ca84 <_printf_float+0x1d4>
 800ca78:	6823      	ldr	r3, [r4, #0]
 800ca7a:	6121      	str	r1, [r4, #16]
 800ca7c:	07d8      	lsls	r0, r3, #31
 800ca7e:	d5ea      	bpl.n	800ca56 <_printf_float+0x1a6>
 800ca80:	1c4b      	adds	r3, r1, #1
 800ca82:	e7e7      	b.n	800ca54 <_printf_float+0x1a4>
 800ca84:	2900      	cmp	r1, #0
 800ca86:	bfd4      	ite	le
 800ca88:	f1c1 0202 	rsble	r2, r1, #2
 800ca8c:	2201      	movgt	r2, #1
 800ca8e:	4413      	add	r3, r2
 800ca90:	e7e0      	b.n	800ca54 <_printf_float+0x1a4>
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	055a      	lsls	r2, r3, #21
 800ca96:	d407      	bmi.n	800caa8 <_printf_float+0x1f8>
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	4642      	mov	r2, r8
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	4628      	mov	r0, r5
 800caa0:	47b8      	blx	r7
 800caa2:	3001      	adds	r0, #1
 800caa4:	d12c      	bne.n	800cb00 <_printf_float+0x250>
 800caa6:	e764      	b.n	800c972 <_printf_float+0xc2>
 800caa8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800caac:	f240 80e0 	bls.w	800cc70 <_printf_float+0x3c0>
 800cab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cab4:	2200      	movs	r2, #0
 800cab6:	2300      	movs	r3, #0
 800cab8:	f7f4 f816 	bl	8000ae8 <__aeabi_dcmpeq>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d034      	beq.n	800cb2a <_printf_float+0x27a>
 800cac0:	4a37      	ldr	r2, [pc, #220]	; (800cba0 <_printf_float+0x2f0>)
 800cac2:	2301      	movs	r3, #1
 800cac4:	4631      	mov	r1, r6
 800cac6:	4628      	mov	r0, r5
 800cac8:	47b8      	blx	r7
 800caca:	3001      	adds	r0, #1
 800cacc:	f43f af51 	beq.w	800c972 <_printf_float+0xc2>
 800cad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cad4:	429a      	cmp	r2, r3
 800cad6:	db02      	blt.n	800cade <_printf_float+0x22e>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	07d8      	lsls	r0, r3, #31
 800cadc:	d510      	bpl.n	800cb00 <_printf_float+0x250>
 800cade:	ee18 3a10 	vmov	r3, s16
 800cae2:	4652      	mov	r2, sl
 800cae4:	4631      	mov	r1, r6
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	f43f af41 	beq.w	800c972 <_printf_float+0xc2>
 800caf0:	f04f 0800 	mov.w	r8, #0
 800caf4:	f104 091a 	add.w	r9, r4, #26
 800caf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cafa:	3b01      	subs	r3, #1
 800cafc:	4543      	cmp	r3, r8
 800cafe:	dc09      	bgt.n	800cb14 <_printf_float+0x264>
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	079b      	lsls	r3, r3, #30
 800cb04:	f100 8105 	bmi.w	800cd12 <_printf_float+0x462>
 800cb08:	68e0      	ldr	r0, [r4, #12]
 800cb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb0c:	4298      	cmp	r0, r3
 800cb0e:	bfb8      	it	lt
 800cb10:	4618      	movlt	r0, r3
 800cb12:	e730      	b.n	800c976 <_printf_float+0xc6>
 800cb14:	2301      	movs	r3, #1
 800cb16:	464a      	mov	r2, r9
 800cb18:	4631      	mov	r1, r6
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	47b8      	blx	r7
 800cb1e:	3001      	adds	r0, #1
 800cb20:	f43f af27 	beq.w	800c972 <_printf_float+0xc2>
 800cb24:	f108 0801 	add.w	r8, r8, #1
 800cb28:	e7e6      	b.n	800caf8 <_printf_float+0x248>
 800cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	dc39      	bgt.n	800cba4 <_printf_float+0x2f4>
 800cb30:	4a1b      	ldr	r2, [pc, #108]	; (800cba0 <_printf_float+0x2f0>)
 800cb32:	2301      	movs	r3, #1
 800cb34:	4631      	mov	r1, r6
 800cb36:	4628      	mov	r0, r5
 800cb38:	47b8      	blx	r7
 800cb3a:	3001      	adds	r0, #1
 800cb3c:	f43f af19 	beq.w	800c972 <_printf_float+0xc2>
 800cb40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb44:	4313      	orrs	r3, r2
 800cb46:	d102      	bne.n	800cb4e <_printf_float+0x29e>
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	07d9      	lsls	r1, r3, #31
 800cb4c:	d5d8      	bpl.n	800cb00 <_printf_float+0x250>
 800cb4e:	ee18 3a10 	vmov	r3, s16
 800cb52:	4652      	mov	r2, sl
 800cb54:	4631      	mov	r1, r6
 800cb56:	4628      	mov	r0, r5
 800cb58:	47b8      	blx	r7
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	f43f af09 	beq.w	800c972 <_printf_float+0xc2>
 800cb60:	f04f 0900 	mov.w	r9, #0
 800cb64:	f104 0a1a 	add.w	sl, r4, #26
 800cb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb6a:	425b      	negs	r3, r3
 800cb6c:	454b      	cmp	r3, r9
 800cb6e:	dc01      	bgt.n	800cb74 <_printf_float+0x2c4>
 800cb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb72:	e792      	b.n	800ca9a <_printf_float+0x1ea>
 800cb74:	2301      	movs	r3, #1
 800cb76:	4652      	mov	r2, sl
 800cb78:	4631      	mov	r1, r6
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	47b8      	blx	r7
 800cb7e:	3001      	adds	r0, #1
 800cb80:	f43f aef7 	beq.w	800c972 <_printf_float+0xc2>
 800cb84:	f109 0901 	add.w	r9, r9, #1
 800cb88:	e7ee      	b.n	800cb68 <_printf_float+0x2b8>
 800cb8a:	bf00      	nop
 800cb8c:	7fefffff 	.word	0x7fefffff
 800cb90:	08012c91 	.word	0x08012c91
 800cb94:	08012c95 	.word	0x08012c95
 800cb98:	08012c9d 	.word	0x08012c9d
 800cb9c:	08012c99 	.word	0x08012c99
 800cba0:	08012ca1 	.word	0x08012ca1
 800cba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cba6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	bfa8      	it	ge
 800cbac:	461a      	movge	r2, r3
 800cbae:	2a00      	cmp	r2, #0
 800cbb0:	4691      	mov	r9, r2
 800cbb2:	dc37      	bgt.n	800cc24 <_printf_float+0x374>
 800cbb4:	f04f 0b00 	mov.w	fp, #0
 800cbb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbbc:	f104 021a 	add.w	r2, r4, #26
 800cbc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	eba3 0309 	sub.w	r3, r3, r9
 800cbc8:	455b      	cmp	r3, fp
 800cbca:	dc33      	bgt.n	800cc34 <_printf_float+0x384>
 800cbcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	db3b      	blt.n	800cc4c <_printf_float+0x39c>
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	07da      	lsls	r2, r3, #31
 800cbd8:	d438      	bmi.n	800cc4c <_printf_float+0x39c>
 800cbda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbdc:	9b05      	ldr	r3, [sp, #20]
 800cbde:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	eba2 0901 	sub.w	r9, r2, r1
 800cbe6:	4599      	cmp	r9, r3
 800cbe8:	bfa8      	it	ge
 800cbea:	4699      	movge	r9, r3
 800cbec:	f1b9 0f00 	cmp.w	r9, #0
 800cbf0:	dc35      	bgt.n	800cc5e <_printf_float+0x3ae>
 800cbf2:	f04f 0800 	mov.w	r8, #0
 800cbf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbfa:	f104 0a1a 	add.w	sl, r4, #26
 800cbfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc02:	1a9b      	subs	r3, r3, r2
 800cc04:	eba3 0309 	sub.w	r3, r3, r9
 800cc08:	4543      	cmp	r3, r8
 800cc0a:	f77f af79 	ble.w	800cb00 <_printf_float+0x250>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	4652      	mov	r2, sl
 800cc12:	4631      	mov	r1, r6
 800cc14:	4628      	mov	r0, r5
 800cc16:	47b8      	blx	r7
 800cc18:	3001      	adds	r0, #1
 800cc1a:	f43f aeaa 	beq.w	800c972 <_printf_float+0xc2>
 800cc1e:	f108 0801 	add.w	r8, r8, #1
 800cc22:	e7ec      	b.n	800cbfe <_printf_float+0x34e>
 800cc24:	4613      	mov	r3, r2
 800cc26:	4631      	mov	r1, r6
 800cc28:	4642      	mov	r2, r8
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	47b8      	blx	r7
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d1c0      	bne.n	800cbb4 <_printf_float+0x304>
 800cc32:	e69e      	b.n	800c972 <_printf_float+0xc2>
 800cc34:	2301      	movs	r3, #1
 800cc36:	4631      	mov	r1, r6
 800cc38:	4628      	mov	r0, r5
 800cc3a:	9205      	str	r2, [sp, #20]
 800cc3c:	47b8      	blx	r7
 800cc3e:	3001      	adds	r0, #1
 800cc40:	f43f ae97 	beq.w	800c972 <_printf_float+0xc2>
 800cc44:	9a05      	ldr	r2, [sp, #20]
 800cc46:	f10b 0b01 	add.w	fp, fp, #1
 800cc4a:	e7b9      	b.n	800cbc0 <_printf_float+0x310>
 800cc4c:	ee18 3a10 	vmov	r3, s16
 800cc50:	4652      	mov	r2, sl
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b8      	blx	r7
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d1be      	bne.n	800cbda <_printf_float+0x32a>
 800cc5c:	e689      	b.n	800c972 <_printf_float+0xc2>
 800cc5e:	9a05      	ldr	r2, [sp, #20]
 800cc60:	464b      	mov	r3, r9
 800cc62:	4442      	add	r2, r8
 800cc64:	4631      	mov	r1, r6
 800cc66:	4628      	mov	r0, r5
 800cc68:	47b8      	blx	r7
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	d1c1      	bne.n	800cbf2 <_printf_float+0x342>
 800cc6e:	e680      	b.n	800c972 <_printf_float+0xc2>
 800cc70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc72:	2a01      	cmp	r2, #1
 800cc74:	dc01      	bgt.n	800cc7a <_printf_float+0x3ca>
 800cc76:	07db      	lsls	r3, r3, #31
 800cc78:	d538      	bpl.n	800ccec <_printf_float+0x43c>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4642      	mov	r2, r8
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4628      	mov	r0, r5
 800cc82:	47b8      	blx	r7
 800cc84:	3001      	adds	r0, #1
 800cc86:	f43f ae74 	beq.w	800c972 <_printf_float+0xc2>
 800cc8a:	ee18 3a10 	vmov	r3, s16
 800cc8e:	4652      	mov	r2, sl
 800cc90:	4631      	mov	r1, r6
 800cc92:	4628      	mov	r0, r5
 800cc94:	47b8      	blx	r7
 800cc96:	3001      	adds	r0, #1
 800cc98:	f43f ae6b 	beq.w	800c972 <_printf_float+0xc2>
 800cc9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cca0:	2200      	movs	r2, #0
 800cca2:	2300      	movs	r3, #0
 800cca4:	f7f3 ff20 	bl	8000ae8 <__aeabi_dcmpeq>
 800cca8:	b9d8      	cbnz	r0, 800cce2 <_printf_float+0x432>
 800ccaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccac:	f108 0201 	add.w	r2, r8, #1
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	47b8      	blx	r7
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d10e      	bne.n	800ccda <_printf_float+0x42a>
 800ccbc:	e659      	b.n	800c972 <_printf_float+0xc2>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	4652      	mov	r2, sl
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	47b8      	blx	r7
 800ccc8:	3001      	adds	r0, #1
 800ccca:	f43f ae52 	beq.w	800c972 <_printf_float+0xc2>
 800ccce:	f108 0801 	add.w	r8, r8, #1
 800ccd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	4543      	cmp	r3, r8
 800ccd8:	dcf1      	bgt.n	800ccbe <_printf_float+0x40e>
 800ccda:	464b      	mov	r3, r9
 800ccdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cce0:	e6dc      	b.n	800ca9c <_printf_float+0x1ec>
 800cce2:	f04f 0800 	mov.w	r8, #0
 800cce6:	f104 0a1a 	add.w	sl, r4, #26
 800ccea:	e7f2      	b.n	800ccd2 <_printf_float+0x422>
 800ccec:	2301      	movs	r3, #1
 800ccee:	4642      	mov	r2, r8
 800ccf0:	e7df      	b.n	800ccb2 <_printf_float+0x402>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	464a      	mov	r2, r9
 800ccf6:	4631      	mov	r1, r6
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	47b8      	blx	r7
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	f43f ae38 	beq.w	800c972 <_printf_float+0xc2>
 800cd02:	f108 0801 	add.w	r8, r8, #1
 800cd06:	68e3      	ldr	r3, [r4, #12]
 800cd08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd0a:	1a5b      	subs	r3, r3, r1
 800cd0c:	4543      	cmp	r3, r8
 800cd0e:	dcf0      	bgt.n	800ccf2 <_printf_float+0x442>
 800cd10:	e6fa      	b.n	800cb08 <_printf_float+0x258>
 800cd12:	f04f 0800 	mov.w	r8, #0
 800cd16:	f104 0919 	add.w	r9, r4, #25
 800cd1a:	e7f4      	b.n	800cd06 <_printf_float+0x456>

0800cd1c <_printf_common>:
 800cd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd20:	4616      	mov	r6, r2
 800cd22:	4699      	mov	r9, r3
 800cd24:	688a      	ldr	r2, [r1, #8]
 800cd26:	690b      	ldr	r3, [r1, #16]
 800cd28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	bfb8      	it	lt
 800cd30:	4613      	movlt	r3, r2
 800cd32:	6033      	str	r3, [r6, #0]
 800cd34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd38:	4607      	mov	r7, r0
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	b10a      	cbz	r2, 800cd42 <_printf_common+0x26>
 800cd3e:	3301      	adds	r3, #1
 800cd40:	6033      	str	r3, [r6, #0]
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	0699      	lsls	r1, r3, #26
 800cd46:	bf42      	ittt	mi
 800cd48:	6833      	ldrmi	r3, [r6, #0]
 800cd4a:	3302      	addmi	r3, #2
 800cd4c:	6033      	strmi	r3, [r6, #0]
 800cd4e:	6825      	ldr	r5, [r4, #0]
 800cd50:	f015 0506 	ands.w	r5, r5, #6
 800cd54:	d106      	bne.n	800cd64 <_printf_common+0x48>
 800cd56:	f104 0a19 	add.w	sl, r4, #25
 800cd5a:	68e3      	ldr	r3, [r4, #12]
 800cd5c:	6832      	ldr	r2, [r6, #0]
 800cd5e:	1a9b      	subs	r3, r3, r2
 800cd60:	42ab      	cmp	r3, r5
 800cd62:	dc26      	bgt.n	800cdb2 <_printf_common+0x96>
 800cd64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd68:	1e13      	subs	r3, r2, #0
 800cd6a:	6822      	ldr	r2, [r4, #0]
 800cd6c:	bf18      	it	ne
 800cd6e:	2301      	movne	r3, #1
 800cd70:	0692      	lsls	r2, r2, #26
 800cd72:	d42b      	bmi.n	800cdcc <_printf_common+0xb0>
 800cd74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd78:	4649      	mov	r1, r9
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	47c0      	blx	r8
 800cd7e:	3001      	adds	r0, #1
 800cd80:	d01e      	beq.n	800cdc0 <_printf_common+0xa4>
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	68e5      	ldr	r5, [r4, #12]
 800cd86:	6832      	ldr	r2, [r6, #0]
 800cd88:	f003 0306 	and.w	r3, r3, #6
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	bf08      	it	eq
 800cd90:	1aad      	subeq	r5, r5, r2
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	6922      	ldr	r2, [r4, #16]
 800cd96:	bf0c      	ite	eq
 800cd98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd9c:	2500      	movne	r5, #0
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	bfc4      	itt	gt
 800cda2:	1a9b      	subgt	r3, r3, r2
 800cda4:	18ed      	addgt	r5, r5, r3
 800cda6:	2600      	movs	r6, #0
 800cda8:	341a      	adds	r4, #26
 800cdaa:	42b5      	cmp	r5, r6
 800cdac:	d11a      	bne.n	800cde4 <_printf_common+0xc8>
 800cdae:	2000      	movs	r0, #0
 800cdb0:	e008      	b.n	800cdc4 <_printf_common+0xa8>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	4652      	mov	r2, sl
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	4638      	mov	r0, r7
 800cdba:	47c0      	blx	r8
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d103      	bne.n	800cdc8 <_printf_common+0xac>
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	3501      	adds	r5, #1
 800cdca:	e7c6      	b.n	800cd5a <_printf_common+0x3e>
 800cdcc:	18e1      	adds	r1, r4, r3
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	2030      	movs	r0, #48	; 0x30
 800cdd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdd6:	4422      	add	r2, r4
 800cdd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cde0:	3302      	adds	r3, #2
 800cde2:	e7c7      	b.n	800cd74 <_printf_common+0x58>
 800cde4:	2301      	movs	r3, #1
 800cde6:	4622      	mov	r2, r4
 800cde8:	4649      	mov	r1, r9
 800cdea:	4638      	mov	r0, r7
 800cdec:	47c0      	blx	r8
 800cdee:	3001      	adds	r0, #1
 800cdf0:	d0e6      	beq.n	800cdc0 <_printf_common+0xa4>
 800cdf2:	3601      	adds	r6, #1
 800cdf4:	e7d9      	b.n	800cdaa <_printf_common+0x8e>
	...

0800cdf8 <_printf_i>:
 800cdf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	4691      	mov	r9, r2
 800ce00:	7e27      	ldrb	r7, [r4, #24]
 800ce02:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce04:	2f78      	cmp	r7, #120	; 0x78
 800ce06:	4680      	mov	r8, r0
 800ce08:	469a      	mov	sl, r3
 800ce0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce0e:	d807      	bhi.n	800ce20 <_printf_i+0x28>
 800ce10:	2f62      	cmp	r7, #98	; 0x62
 800ce12:	d80a      	bhi.n	800ce2a <_printf_i+0x32>
 800ce14:	2f00      	cmp	r7, #0
 800ce16:	f000 80d8 	beq.w	800cfca <_printf_i+0x1d2>
 800ce1a:	2f58      	cmp	r7, #88	; 0x58
 800ce1c:	f000 80a3 	beq.w	800cf66 <_printf_i+0x16e>
 800ce20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce28:	e03a      	b.n	800cea0 <_printf_i+0xa8>
 800ce2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce2e:	2b15      	cmp	r3, #21
 800ce30:	d8f6      	bhi.n	800ce20 <_printf_i+0x28>
 800ce32:	a001      	add	r0, pc, #4	; (adr r0, 800ce38 <_printf_i+0x40>)
 800ce34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ce38:	0800ce91 	.word	0x0800ce91
 800ce3c:	0800cea5 	.word	0x0800cea5
 800ce40:	0800ce21 	.word	0x0800ce21
 800ce44:	0800ce21 	.word	0x0800ce21
 800ce48:	0800ce21 	.word	0x0800ce21
 800ce4c:	0800ce21 	.word	0x0800ce21
 800ce50:	0800cea5 	.word	0x0800cea5
 800ce54:	0800ce21 	.word	0x0800ce21
 800ce58:	0800ce21 	.word	0x0800ce21
 800ce5c:	0800ce21 	.word	0x0800ce21
 800ce60:	0800ce21 	.word	0x0800ce21
 800ce64:	0800cfb1 	.word	0x0800cfb1
 800ce68:	0800ced5 	.word	0x0800ced5
 800ce6c:	0800cf93 	.word	0x0800cf93
 800ce70:	0800ce21 	.word	0x0800ce21
 800ce74:	0800ce21 	.word	0x0800ce21
 800ce78:	0800cfd3 	.word	0x0800cfd3
 800ce7c:	0800ce21 	.word	0x0800ce21
 800ce80:	0800ced5 	.word	0x0800ced5
 800ce84:	0800ce21 	.word	0x0800ce21
 800ce88:	0800ce21 	.word	0x0800ce21
 800ce8c:	0800cf9b 	.word	0x0800cf9b
 800ce90:	680b      	ldr	r3, [r1, #0]
 800ce92:	1d1a      	adds	r2, r3, #4
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	600a      	str	r2, [r1, #0]
 800ce98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cea0:	2301      	movs	r3, #1
 800cea2:	e0a3      	b.n	800cfec <_printf_i+0x1f4>
 800cea4:	6825      	ldr	r5, [r4, #0]
 800cea6:	6808      	ldr	r0, [r1, #0]
 800cea8:	062e      	lsls	r6, r5, #24
 800ceaa:	f100 0304 	add.w	r3, r0, #4
 800ceae:	d50a      	bpl.n	800cec6 <_printf_i+0xce>
 800ceb0:	6805      	ldr	r5, [r0, #0]
 800ceb2:	600b      	str	r3, [r1, #0]
 800ceb4:	2d00      	cmp	r5, #0
 800ceb6:	da03      	bge.n	800cec0 <_printf_i+0xc8>
 800ceb8:	232d      	movs	r3, #45	; 0x2d
 800ceba:	426d      	negs	r5, r5
 800cebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec0:	485e      	ldr	r0, [pc, #376]	; (800d03c <_printf_i+0x244>)
 800cec2:	230a      	movs	r3, #10
 800cec4:	e019      	b.n	800cefa <_printf_i+0x102>
 800cec6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ceca:	6805      	ldr	r5, [r0, #0]
 800cecc:	600b      	str	r3, [r1, #0]
 800cece:	bf18      	it	ne
 800ced0:	b22d      	sxthne	r5, r5
 800ced2:	e7ef      	b.n	800ceb4 <_printf_i+0xbc>
 800ced4:	680b      	ldr	r3, [r1, #0]
 800ced6:	6825      	ldr	r5, [r4, #0]
 800ced8:	1d18      	adds	r0, r3, #4
 800ceda:	6008      	str	r0, [r1, #0]
 800cedc:	0628      	lsls	r0, r5, #24
 800cede:	d501      	bpl.n	800cee4 <_printf_i+0xec>
 800cee0:	681d      	ldr	r5, [r3, #0]
 800cee2:	e002      	b.n	800ceea <_printf_i+0xf2>
 800cee4:	0669      	lsls	r1, r5, #25
 800cee6:	d5fb      	bpl.n	800cee0 <_printf_i+0xe8>
 800cee8:	881d      	ldrh	r5, [r3, #0]
 800ceea:	4854      	ldr	r0, [pc, #336]	; (800d03c <_printf_i+0x244>)
 800ceec:	2f6f      	cmp	r7, #111	; 0x6f
 800ceee:	bf0c      	ite	eq
 800cef0:	2308      	moveq	r3, #8
 800cef2:	230a      	movne	r3, #10
 800cef4:	2100      	movs	r1, #0
 800cef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cefa:	6866      	ldr	r6, [r4, #4]
 800cefc:	60a6      	str	r6, [r4, #8]
 800cefe:	2e00      	cmp	r6, #0
 800cf00:	bfa2      	ittt	ge
 800cf02:	6821      	ldrge	r1, [r4, #0]
 800cf04:	f021 0104 	bicge.w	r1, r1, #4
 800cf08:	6021      	strge	r1, [r4, #0]
 800cf0a:	b90d      	cbnz	r5, 800cf10 <_printf_i+0x118>
 800cf0c:	2e00      	cmp	r6, #0
 800cf0e:	d04d      	beq.n	800cfac <_printf_i+0x1b4>
 800cf10:	4616      	mov	r6, r2
 800cf12:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf16:	fb03 5711 	mls	r7, r3, r1, r5
 800cf1a:	5dc7      	ldrb	r7, [r0, r7]
 800cf1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf20:	462f      	mov	r7, r5
 800cf22:	42bb      	cmp	r3, r7
 800cf24:	460d      	mov	r5, r1
 800cf26:	d9f4      	bls.n	800cf12 <_printf_i+0x11a>
 800cf28:	2b08      	cmp	r3, #8
 800cf2a:	d10b      	bne.n	800cf44 <_printf_i+0x14c>
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	07df      	lsls	r7, r3, #31
 800cf30:	d508      	bpl.n	800cf44 <_printf_i+0x14c>
 800cf32:	6923      	ldr	r3, [r4, #16]
 800cf34:	6861      	ldr	r1, [r4, #4]
 800cf36:	4299      	cmp	r1, r3
 800cf38:	bfde      	ittt	le
 800cf3a:	2330      	movle	r3, #48	; 0x30
 800cf3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf44:	1b92      	subs	r2, r2, r6
 800cf46:	6122      	str	r2, [r4, #16]
 800cf48:	f8cd a000 	str.w	sl, [sp]
 800cf4c:	464b      	mov	r3, r9
 800cf4e:	aa03      	add	r2, sp, #12
 800cf50:	4621      	mov	r1, r4
 800cf52:	4640      	mov	r0, r8
 800cf54:	f7ff fee2 	bl	800cd1c <_printf_common>
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d14c      	bne.n	800cff6 <_printf_i+0x1fe>
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf60:	b004      	add	sp, #16
 800cf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf66:	4835      	ldr	r0, [pc, #212]	; (800d03c <_printf_i+0x244>)
 800cf68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	680e      	ldr	r6, [r1, #0]
 800cf70:	061f      	lsls	r7, r3, #24
 800cf72:	f856 5b04 	ldr.w	r5, [r6], #4
 800cf76:	600e      	str	r6, [r1, #0]
 800cf78:	d514      	bpl.n	800cfa4 <_printf_i+0x1ac>
 800cf7a:	07d9      	lsls	r1, r3, #31
 800cf7c:	bf44      	itt	mi
 800cf7e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf82:	6023      	strmi	r3, [r4, #0]
 800cf84:	b91d      	cbnz	r5, 800cf8e <_printf_i+0x196>
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	f023 0320 	bic.w	r3, r3, #32
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	2310      	movs	r3, #16
 800cf90:	e7b0      	b.n	800cef4 <_printf_i+0xfc>
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	f043 0320 	orr.w	r3, r3, #32
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	2378      	movs	r3, #120	; 0x78
 800cf9c:	4828      	ldr	r0, [pc, #160]	; (800d040 <_printf_i+0x248>)
 800cf9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfa2:	e7e3      	b.n	800cf6c <_printf_i+0x174>
 800cfa4:	065e      	lsls	r6, r3, #25
 800cfa6:	bf48      	it	mi
 800cfa8:	b2ad      	uxthmi	r5, r5
 800cfaa:	e7e6      	b.n	800cf7a <_printf_i+0x182>
 800cfac:	4616      	mov	r6, r2
 800cfae:	e7bb      	b.n	800cf28 <_printf_i+0x130>
 800cfb0:	680b      	ldr	r3, [r1, #0]
 800cfb2:	6826      	ldr	r6, [r4, #0]
 800cfb4:	6960      	ldr	r0, [r4, #20]
 800cfb6:	1d1d      	adds	r5, r3, #4
 800cfb8:	600d      	str	r5, [r1, #0]
 800cfba:	0635      	lsls	r5, r6, #24
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	d501      	bpl.n	800cfc4 <_printf_i+0x1cc>
 800cfc0:	6018      	str	r0, [r3, #0]
 800cfc2:	e002      	b.n	800cfca <_printf_i+0x1d2>
 800cfc4:	0671      	lsls	r1, r6, #25
 800cfc6:	d5fb      	bpl.n	800cfc0 <_printf_i+0x1c8>
 800cfc8:	8018      	strh	r0, [r3, #0]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	6123      	str	r3, [r4, #16]
 800cfce:	4616      	mov	r6, r2
 800cfd0:	e7ba      	b.n	800cf48 <_printf_i+0x150>
 800cfd2:	680b      	ldr	r3, [r1, #0]
 800cfd4:	1d1a      	adds	r2, r3, #4
 800cfd6:	600a      	str	r2, [r1, #0]
 800cfd8:	681e      	ldr	r6, [r3, #0]
 800cfda:	6862      	ldr	r2, [r4, #4]
 800cfdc:	2100      	movs	r1, #0
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7f3 f90e 	bl	8000200 <memchr>
 800cfe4:	b108      	cbz	r0, 800cfea <_printf_i+0x1f2>
 800cfe6:	1b80      	subs	r0, r0, r6
 800cfe8:	6060      	str	r0, [r4, #4]
 800cfea:	6863      	ldr	r3, [r4, #4]
 800cfec:	6123      	str	r3, [r4, #16]
 800cfee:	2300      	movs	r3, #0
 800cff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cff4:	e7a8      	b.n	800cf48 <_printf_i+0x150>
 800cff6:	6923      	ldr	r3, [r4, #16]
 800cff8:	4632      	mov	r2, r6
 800cffa:	4649      	mov	r1, r9
 800cffc:	4640      	mov	r0, r8
 800cffe:	47d0      	blx	sl
 800d000:	3001      	adds	r0, #1
 800d002:	d0ab      	beq.n	800cf5c <_printf_i+0x164>
 800d004:	6823      	ldr	r3, [r4, #0]
 800d006:	079b      	lsls	r3, r3, #30
 800d008:	d413      	bmi.n	800d032 <_printf_i+0x23a>
 800d00a:	68e0      	ldr	r0, [r4, #12]
 800d00c:	9b03      	ldr	r3, [sp, #12]
 800d00e:	4298      	cmp	r0, r3
 800d010:	bfb8      	it	lt
 800d012:	4618      	movlt	r0, r3
 800d014:	e7a4      	b.n	800cf60 <_printf_i+0x168>
 800d016:	2301      	movs	r3, #1
 800d018:	4632      	mov	r2, r6
 800d01a:	4649      	mov	r1, r9
 800d01c:	4640      	mov	r0, r8
 800d01e:	47d0      	blx	sl
 800d020:	3001      	adds	r0, #1
 800d022:	d09b      	beq.n	800cf5c <_printf_i+0x164>
 800d024:	3501      	adds	r5, #1
 800d026:	68e3      	ldr	r3, [r4, #12]
 800d028:	9903      	ldr	r1, [sp, #12]
 800d02a:	1a5b      	subs	r3, r3, r1
 800d02c:	42ab      	cmp	r3, r5
 800d02e:	dcf2      	bgt.n	800d016 <_printf_i+0x21e>
 800d030:	e7eb      	b.n	800d00a <_printf_i+0x212>
 800d032:	2500      	movs	r5, #0
 800d034:	f104 0619 	add.w	r6, r4, #25
 800d038:	e7f5      	b.n	800d026 <_printf_i+0x22e>
 800d03a:	bf00      	nop
 800d03c:	08012ca3 	.word	0x08012ca3
 800d040:	08012cb4 	.word	0x08012cb4

0800d044 <_sbrk_r>:
 800d044:	b538      	push	{r3, r4, r5, lr}
 800d046:	4d06      	ldr	r5, [pc, #24]	; (800d060 <_sbrk_r+0x1c>)
 800d048:	2300      	movs	r3, #0
 800d04a:	4604      	mov	r4, r0
 800d04c:	4608      	mov	r0, r1
 800d04e:	602b      	str	r3, [r5, #0]
 800d050:	f7f4 fefe 	bl	8001e50 <_sbrk>
 800d054:	1c43      	adds	r3, r0, #1
 800d056:	d102      	bne.n	800d05e <_sbrk_r+0x1a>
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	b103      	cbz	r3, 800d05e <_sbrk_r+0x1a>
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	bd38      	pop	{r3, r4, r5, pc}
 800d060:	20001828 	.word	0x20001828

0800d064 <_raise_r>:
 800d064:	291f      	cmp	r1, #31
 800d066:	b538      	push	{r3, r4, r5, lr}
 800d068:	4604      	mov	r4, r0
 800d06a:	460d      	mov	r5, r1
 800d06c:	d904      	bls.n	800d078 <_raise_r+0x14>
 800d06e:	2316      	movs	r3, #22
 800d070:	6003      	str	r3, [r0, #0]
 800d072:	f04f 30ff 	mov.w	r0, #4294967295
 800d076:	bd38      	pop	{r3, r4, r5, pc}
 800d078:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d07a:	b112      	cbz	r2, 800d082 <_raise_r+0x1e>
 800d07c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d080:	b94b      	cbnz	r3, 800d096 <_raise_r+0x32>
 800d082:	4620      	mov	r0, r4
 800d084:	f000 f830 	bl	800d0e8 <_getpid_r>
 800d088:	462a      	mov	r2, r5
 800d08a:	4601      	mov	r1, r0
 800d08c:	4620      	mov	r0, r4
 800d08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d092:	f000 b817 	b.w	800d0c4 <_kill_r>
 800d096:	2b01      	cmp	r3, #1
 800d098:	d00a      	beq.n	800d0b0 <_raise_r+0x4c>
 800d09a:	1c59      	adds	r1, r3, #1
 800d09c:	d103      	bne.n	800d0a6 <_raise_r+0x42>
 800d09e:	2316      	movs	r3, #22
 800d0a0:	6003      	str	r3, [r0, #0]
 800d0a2:	2001      	movs	r0, #1
 800d0a4:	e7e7      	b.n	800d076 <_raise_r+0x12>
 800d0a6:	2400      	movs	r4, #0
 800d0a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	4798      	blx	r3
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e7e0      	b.n	800d076 <_raise_r+0x12>

0800d0b4 <raise>:
 800d0b4:	4b02      	ldr	r3, [pc, #8]	; (800d0c0 <raise+0xc>)
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	6818      	ldr	r0, [r3, #0]
 800d0ba:	f7ff bfd3 	b.w	800d064 <_raise_r>
 800d0be:	bf00      	nop
 800d0c0:	20000bc4 	.word	0x20000bc4

0800d0c4 <_kill_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	4d07      	ldr	r5, [pc, #28]	; (800d0e4 <_kill_r+0x20>)
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	602b      	str	r3, [r5, #0]
 800d0d2:	f7f4 fe35 	bl	8001d40 <_kill>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	d102      	bne.n	800d0e0 <_kill_r+0x1c>
 800d0da:	682b      	ldr	r3, [r5, #0]
 800d0dc:	b103      	cbz	r3, 800d0e0 <_kill_r+0x1c>
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	bd38      	pop	{r3, r4, r5, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20001828 	.word	0x20001828

0800d0e8 <_getpid_r>:
 800d0e8:	f7f4 be22 	b.w	8001d30 <_getpid>

0800d0ec <siprintf>:
 800d0ec:	b40e      	push	{r1, r2, r3}
 800d0ee:	b500      	push	{lr}
 800d0f0:	b09c      	sub	sp, #112	; 0x70
 800d0f2:	ab1d      	add	r3, sp, #116	; 0x74
 800d0f4:	9002      	str	r0, [sp, #8]
 800d0f6:	9006      	str	r0, [sp, #24]
 800d0f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0fc:	4809      	ldr	r0, [pc, #36]	; (800d124 <siprintf+0x38>)
 800d0fe:	9107      	str	r1, [sp, #28]
 800d100:	9104      	str	r1, [sp, #16]
 800d102:	4909      	ldr	r1, [pc, #36]	; (800d128 <siprintf+0x3c>)
 800d104:	f853 2b04 	ldr.w	r2, [r3], #4
 800d108:	9105      	str	r1, [sp, #20]
 800d10a:	6800      	ldr	r0, [r0, #0]
 800d10c:	9301      	str	r3, [sp, #4]
 800d10e:	a902      	add	r1, sp, #8
 800d110:	f001 fdf4 	bl	800ecfc <_svfiprintf_r>
 800d114:	9b02      	ldr	r3, [sp, #8]
 800d116:	2200      	movs	r2, #0
 800d118:	701a      	strb	r2, [r3, #0]
 800d11a:	b01c      	add	sp, #112	; 0x70
 800d11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d120:	b003      	add	sp, #12
 800d122:	4770      	bx	lr
 800d124:	20000bc4 	.word	0x20000bc4
 800d128:	ffff0208 	.word	0xffff0208

0800d12c <strncmp>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	b16a      	cbz	r2, 800d14c <strncmp+0x20>
 800d130:	3901      	subs	r1, #1
 800d132:	1884      	adds	r4, r0, r2
 800d134:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d138:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d103      	bne.n	800d148 <strncmp+0x1c>
 800d140:	42a0      	cmp	r0, r4
 800d142:	d001      	beq.n	800d148 <strncmp+0x1c>
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1f5      	bne.n	800d134 <strncmp+0x8>
 800d148:	1a98      	subs	r0, r3, r2
 800d14a:	bd10      	pop	{r4, pc}
 800d14c:	4610      	mov	r0, r2
 800d14e:	e7fc      	b.n	800d14a <strncmp+0x1e>

0800d150 <__swbuf_r>:
 800d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d152:	460e      	mov	r6, r1
 800d154:	4614      	mov	r4, r2
 800d156:	4605      	mov	r5, r0
 800d158:	b118      	cbz	r0, 800d162 <__swbuf_r+0x12>
 800d15a:	6983      	ldr	r3, [r0, #24]
 800d15c:	b90b      	cbnz	r3, 800d162 <__swbuf_r+0x12>
 800d15e:	f001 f8ad 	bl	800e2bc <__sinit>
 800d162:	4b21      	ldr	r3, [pc, #132]	; (800d1e8 <__swbuf_r+0x98>)
 800d164:	429c      	cmp	r4, r3
 800d166:	d12b      	bne.n	800d1c0 <__swbuf_r+0x70>
 800d168:	686c      	ldr	r4, [r5, #4]
 800d16a:	69a3      	ldr	r3, [r4, #24]
 800d16c:	60a3      	str	r3, [r4, #8]
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	071a      	lsls	r2, r3, #28
 800d172:	d52f      	bpl.n	800d1d4 <__swbuf_r+0x84>
 800d174:	6923      	ldr	r3, [r4, #16]
 800d176:	b36b      	cbz	r3, 800d1d4 <__swbuf_r+0x84>
 800d178:	6923      	ldr	r3, [r4, #16]
 800d17a:	6820      	ldr	r0, [r4, #0]
 800d17c:	1ac0      	subs	r0, r0, r3
 800d17e:	6963      	ldr	r3, [r4, #20]
 800d180:	b2f6      	uxtb	r6, r6
 800d182:	4283      	cmp	r3, r0
 800d184:	4637      	mov	r7, r6
 800d186:	dc04      	bgt.n	800d192 <__swbuf_r+0x42>
 800d188:	4621      	mov	r1, r4
 800d18a:	4628      	mov	r0, r5
 800d18c:	f001 f802 	bl	800e194 <_fflush_r>
 800d190:	bb30      	cbnz	r0, 800d1e0 <__swbuf_r+0x90>
 800d192:	68a3      	ldr	r3, [r4, #8]
 800d194:	3b01      	subs	r3, #1
 800d196:	60a3      	str	r3, [r4, #8]
 800d198:	6823      	ldr	r3, [r4, #0]
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	6022      	str	r2, [r4, #0]
 800d19e:	701e      	strb	r6, [r3, #0]
 800d1a0:	6963      	ldr	r3, [r4, #20]
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	4283      	cmp	r3, r0
 800d1a6:	d004      	beq.n	800d1b2 <__swbuf_r+0x62>
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	07db      	lsls	r3, r3, #31
 800d1ac:	d506      	bpl.n	800d1bc <__swbuf_r+0x6c>
 800d1ae:	2e0a      	cmp	r6, #10
 800d1b0:	d104      	bne.n	800d1bc <__swbuf_r+0x6c>
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f000 ffed 	bl	800e194 <_fflush_r>
 800d1ba:	b988      	cbnz	r0, 800d1e0 <__swbuf_r+0x90>
 800d1bc:	4638      	mov	r0, r7
 800d1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <__swbuf_r+0x9c>)
 800d1c2:	429c      	cmp	r4, r3
 800d1c4:	d101      	bne.n	800d1ca <__swbuf_r+0x7a>
 800d1c6:	68ac      	ldr	r4, [r5, #8]
 800d1c8:	e7cf      	b.n	800d16a <__swbuf_r+0x1a>
 800d1ca:	4b09      	ldr	r3, [pc, #36]	; (800d1f0 <__swbuf_r+0xa0>)
 800d1cc:	429c      	cmp	r4, r3
 800d1ce:	bf08      	it	eq
 800d1d0:	68ec      	ldreq	r4, [r5, #12]
 800d1d2:	e7ca      	b.n	800d16a <__swbuf_r+0x1a>
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	f000 f80c 	bl	800d1f4 <__swsetup_r>
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	d0cb      	beq.n	800d178 <__swbuf_r+0x28>
 800d1e0:	f04f 37ff 	mov.w	r7, #4294967295
 800d1e4:	e7ea      	b.n	800d1bc <__swbuf_r+0x6c>
 800d1e6:	bf00      	nop
 800d1e8:	08012d7c 	.word	0x08012d7c
 800d1ec:	08012d9c 	.word	0x08012d9c
 800d1f0:	08012d5c 	.word	0x08012d5c

0800d1f4 <__swsetup_r>:
 800d1f4:	4b32      	ldr	r3, [pc, #200]	; (800d2c0 <__swsetup_r+0xcc>)
 800d1f6:	b570      	push	{r4, r5, r6, lr}
 800d1f8:	681d      	ldr	r5, [r3, #0]
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	b125      	cbz	r5, 800d20a <__swsetup_r+0x16>
 800d200:	69ab      	ldr	r3, [r5, #24]
 800d202:	b913      	cbnz	r3, 800d20a <__swsetup_r+0x16>
 800d204:	4628      	mov	r0, r5
 800d206:	f001 f859 	bl	800e2bc <__sinit>
 800d20a:	4b2e      	ldr	r3, [pc, #184]	; (800d2c4 <__swsetup_r+0xd0>)
 800d20c:	429c      	cmp	r4, r3
 800d20e:	d10f      	bne.n	800d230 <__swsetup_r+0x3c>
 800d210:	686c      	ldr	r4, [r5, #4]
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d218:	0719      	lsls	r1, r3, #28
 800d21a:	d42c      	bmi.n	800d276 <__swsetup_r+0x82>
 800d21c:	06dd      	lsls	r5, r3, #27
 800d21e:	d411      	bmi.n	800d244 <__swsetup_r+0x50>
 800d220:	2309      	movs	r3, #9
 800d222:	6033      	str	r3, [r6, #0]
 800d224:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	f04f 30ff 	mov.w	r0, #4294967295
 800d22e:	e03e      	b.n	800d2ae <__swsetup_r+0xba>
 800d230:	4b25      	ldr	r3, [pc, #148]	; (800d2c8 <__swsetup_r+0xd4>)
 800d232:	429c      	cmp	r4, r3
 800d234:	d101      	bne.n	800d23a <__swsetup_r+0x46>
 800d236:	68ac      	ldr	r4, [r5, #8]
 800d238:	e7eb      	b.n	800d212 <__swsetup_r+0x1e>
 800d23a:	4b24      	ldr	r3, [pc, #144]	; (800d2cc <__swsetup_r+0xd8>)
 800d23c:	429c      	cmp	r4, r3
 800d23e:	bf08      	it	eq
 800d240:	68ec      	ldreq	r4, [r5, #12]
 800d242:	e7e6      	b.n	800d212 <__swsetup_r+0x1e>
 800d244:	0758      	lsls	r0, r3, #29
 800d246:	d512      	bpl.n	800d26e <__swsetup_r+0x7a>
 800d248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d24a:	b141      	cbz	r1, 800d25e <__swsetup_r+0x6a>
 800d24c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d250:	4299      	cmp	r1, r3
 800d252:	d002      	beq.n	800d25a <__swsetup_r+0x66>
 800d254:	4630      	mov	r0, r6
 800d256:	f7ff f887 	bl	800c368 <_free_r>
 800d25a:	2300      	movs	r3, #0
 800d25c:	6363      	str	r3, [r4, #52]	; 0x34
 800d25e:	89a3      	ldrh	r3, [r4, #12]
 800d260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d264:	81a3      	strh	r3, [r4, #12]
 800d266:	2300      	movs	r3, #0
 800d268:	6063      	str	r3, [r4, #4]
 800d26a:	6923      	ldr	r3, [r4, #16]
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	f043 0308 	orr.w	r3, r3, #8
 800d274:	81a3      	strh	r3, [r4, #12]
 800d276:	6923      	ldr	r3, [r4, #16]
 800d278:	b94b      	cbnz	r3, 800d28e <__swsetup_r+0x9a>
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d284:	d003      	beq.n	800d28e <__swsetup_r+0x9a>
 800d286:	4621      	mov	r1, r4
 800d288:	4630      	mov	r0, r6
 800d28a:	f001 f8dd 	bl	800e448 <__smakebuf_r>
 800d28e:	89a0      	ldrh	r0, [r4, #12]
 800d290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d294:	f010 0301 	ands.w	r3, r0, #1
 800d298:	d00a      	beq.n	800d2b0 <__swsetup_r+0xbc>
 800d29a:	2300      	movs	r3, #0
 800d29c:	60a3      	str	r3, [r4, #8]
 800d29e:	6963      	ldr	r3, [r4, #20]
 800d2a0:	425b      	negs	r3, r3
 800d2a2:	61a3      	str	r3, [r4, #24]
 800d2a4:	6923      	ldr	r3, [r4, #16]
 800d2a6:	b943      	cbnz	r3, 800d2ba <__swsetup_r+0xc6>
 800d2a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2ac:	d1ba      	bne.n	800d224 <__swsetup_r+0x30>
 800d2ae:	bd70      	pop	{r4, r5, r6, pc}
 800d2b0:	0781      	lsls	r1, r0, #30
 800d2b2:	bf58      	it	pl
 800d2b4:	6963      	ldrpl	r3, [r4, #20]
 800d2b6:	60a3      	str	r3, [r4, #8]
 800d2b8:	e7f4      	b.n	800d2a4 <__swsetup_r+0xb0>
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	e7f7      	b.n	800d2ae <__swsetup_r+0xba>
 800d2be:	bf00      	nop
 800d2c0:	20000bc4 	.word	0x20000bc4
 800d2c4:	08012d7c 	.word	0x08012d7c
 800d2c8:	08012d9c 	.word	0x08012d9c
 800d2cc:	08012d5c 	.word	0x08012d5c

0800d2d0 <__register_exitproc>:
 800d2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2d4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800d390 <__register_exitproc+0xc0>
 800d2d8:	4606      	mov	r6, r0
 800d2da:	f8d8 0000 	ldr.w	r0, [r8]
 800d2de:	461f      	mov	r7, r3
 800d2e0:	460d      	mov	r5, r1
 800d2e2:	4691      	mov	r9, r2
 800d2e4:	f7fe fffd 	bl	800c2e2 <__retarget_lock_acquire_recursive>
 800d2e8:	4b25      	ldr	r3, [pc, #148]	; (800d380 <__register_exitproc+0xb0>)
 800d2ea:	681c      	ldr	r4, [r3, #0]
 800d2ec:	b934      	cbnz	r4, 800d2fc <__register_exitproc+0x2c>
 800d2ee:	4c25      	ldr	r4, [pc, #148]	; (800d384 <__register_exitproc+0xb4>)
 800d2f0:	601c      	str	r4, [r3, #0]
 800d2f2:	4b25      	ldr	r3, [pc, #148]	; (800d388 <__register_exitproc+0xb8>)
 800d2f4:	b113      	cbz	r3, 800d2fc <__register_exitproc+0x2c>
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800d2fc:	6863      	ldr	r3, [r4, #4]
 800d2fe:	2b1f      	cmp	r3, #31
 800d300:	dd07      	ble.n	800d312 <__register_exitproc+0x42>
 800d302:	f8d8 0000 	ldr.w	r0, [r8]
 800d306:	f7fe ffee 	bl	800c2e6 <__retarget_lock_release_recursive>
 800d30a:	f04f 30ff 	mov.w	r0, #4294967295
 800d30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d312:	b34e      	cbz	r6, 800d368 <__register_exitproc+0x98>
 800d314:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800d318:	b988      	cbnz	r0, 800d33e <__register_exitproc+0x6e>
 800d31a:	4b1c      	ldr	r3, [pc, #112]	; (800d38c <__register_exitproc+0xbc>)
 800d31c:	b923      	cbnz	r3, 800d328 <__register_exitproc+0x58>
 800d31e:	f8d8 0000 	ldr.w	r0, [r8]
 800d322:	f7fe ffdf 	bl	800c2e4 <__retarget_lock_release>
 800d326:	e7f0      	b.n	800d30a <__register_exitproc+0x3a>
 800d328:	f44f 7084 	mov.w	r0, #264	; 0x108
 800d32c:	f7fe ffdc 	bl	800c2e8 <malloc>
 800d330:	2800      	cmp	r0, #0
 800d332:	d0f4      	beq.n	800d31e <__register_exitproc+0x4e>
 800d334:	2300      	movs	r3, #0
 800d336:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800d33a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800d33e:	6863      	ldr	r3, [r4, #4]
 800d340:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800d344:	2201      	movs	r2, #1
 800d346:	409a      	lsls	r2, r3
 800d348:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800d34c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800d350:	4313      	orrs	r3, r2
 800d352:	2e02      	cmp	r6, #2
 800d354:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800d358:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800d35c:	bf02      	ittt	eq
 800d35e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800d362:	431a      	orreq	r2, r3
 800d364:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800d368:	6863      	ldr	r3, [r4, #4]
 800d36a:	f8d8 0000 	ldr.w	r0, [r8]
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	3302      	adds	r3, #2
 800d372:	6062      	str	r2, [r4, #4]
 800d374:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800d378:	f7fe ffb5 	bl	800c2e6 <__retarget_lock_release_recursive>
 800d37c:	2000      	movs	r0, #0
 800d37e:	e7c6      	b.n	800d30e <__register_exitproc+0x3e>
 800d380:	20001814 	.word	0x20001814
 800d384:	20001788 	.word	0x20001788
 800d388:	00000000 	.word	0x00000000
 800d38c:	0800c2e9 	.word	0x0800c2e9
 800d390:	20000c28 	.word	0x20000c28

0800d394 <quorem>:
 800d394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d398:	6903      	ldr	r3, [r0, #16]
 800d39a:	690c      	ldr	r4, [r1, #16]
 800d39c:	42a3      	cmp	r3, r4
 800d39e:	4607      	mov	r7, r0
 800d3a0:	f2c0 8081 	blt.w	800d4a6 <quorem+0x112>
 800d3a4:	3c01      	subs	r4, #1
 800d3a6:	f101 0814 	add.w	r8, r1, #20
 800d3aa:	f100 0514 	add.w	r5, r0, #20
 800d3ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3b2:	9301      	str	r3, [sp, #4]
 800d3b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3cc:	d331      	bcc.n	800d432 <quorem+0x9e>
 800d3ce:	f04f 0e00 	mov.w	lr, #0
 800d3d2:	4640      	mov	r0, r8
 800d3d4:	46ac      	mov	ip, r5
 800d3d6:	46f2      	mov	sl, lr
 800d3d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3dc:	b293      	uxth	r3, r2
 800d3de:	fb06 e303 	mla	r3, r6, r3, lr
 800d3e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	ebaa 0303 	sub.w	r3, sl, r3
 800d3ec:	0c12      	lsrs	r2, r2, #16
 800d3ee:	f8dc a000 	ldr.w	sl, [ip]
 800d3f2:	fb06 e202 	mla	r2, r6, r2, lr
 800d3f6:	fa13 f38a 	uxtah	r3, r3, sl
 800d3fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3fe:	fa1f fa82 	uxth.w	sl, r2
 800d402:	f8dc 2000 	ldr.w	r2, [ip]
 800d406:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d40a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d40e:	b29b      	uxth	r3, r3
 800d410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d414:	4581      	cmp	r9, r0
 800d416:	f84c 3b04 	str.w	r3, [ip], #4
 800d41a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d41e:	d2db      	bcs.n	800d3d8 <quorem+0x44>
 800d420:	f855 300b 	ldr.w	r3, [r5, fp]
 800d424:	b92b      	cbnz	r3, 800d432 <quorem+0x9e>
 800d426:	9b01      	ldr	r3, [sp, #4]
 800d428:	3b04      	subs	r3, #4
 800d42a:	429d      	cmp	r5, r3
 800d42c:	461a      	mov	r2, r3
 800d42e:	d32e      	bcc.n	800d48e <quorem+0xfa>
 800d430:	613c      	str	r4, [r7, #16]
 800d432:	4638      	mov	r0, r7
 800d434:	f001 fad2 	bl	800e9dc <__mcmp>
 800d438:	2800      	cmp	r0, #0
 800d43a:	db24      	blt.n	800d486 <quorem+0xf2>
 800d43c:	3601      	adds	r6, #1
 800d43e:	4628      	mov	r0, r5
 800d440:	f04f 0c00 	mov.w	ip, #0
 800d444:	f858 2b04 	ldr.w	r2, [r8], #4
 800d448:	f8d0 e000 	ldr.w	lr, [r0]
 800d44c:	b293      	uxth	r3, r2
 800d44e:	ebac 0303 	sub.w	r3, ip, r3
 800d452:	0c12      	lsrs	r2, r2, #16
 800d454:	fa13 f38e 	uxtah	r3, r3, lr
 800d458:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d45c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d460:	b29b      	uxth	r3, r3
 800d462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d466:	45c1      	cmp	r9, r8
 800d468:	f840 3b04 	str.w	r3, [r0], #4
 800d46c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d470:	d2e8      	bcs.n	800d444 <quorem+0xb0>
 800d472:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d47a:	b922      	cbnz	r2, 800d486 <quorem+0xf2>
 800d47c:	3b04      	subs	r3, #4
 800d47e:	429d      	cmp	r5, r3
 800d480:	461a      	mov	r2, r3
 800d482:	d30a      	bcc.n	800d49a <quorem+0x106>
 800d484:	613c      	str	r4, [r7, #16]
 800d486:	4630      	mov	r0, r6
 800d488:	b003      	add	sp, #12
 800d48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48e:	6812      	ldr	r2, [r2, #0]
 800d490:	3b04      	subs	r3, #4
 800d492:	2a00      	cmp	r2, #0
 800d494:	d1cc      	bne.n	800d430 <quorem+0x9c>
 800d496:	3c01      	subs	r4, #1
 800d498:	e7c7      	b.n	800d42a <quorem+0x96>
 800d49a:	6812      	ldr	r2, [r2, #0]
 800d49c:	3b04      	subs	r3, #4
 800d49e:	2a00      	cmp	r2, #0
 800d4a0:	d1f0      	bne.n	800d484 <quorem+0xf0>
 800d4a2:	3c01      	subs	r4, #1
 800d4a4:	e7eb      	b.n	800d47e <quorem+0xea>
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	e7ee      	b.n	800d488 <quorem+0xf4>
 800d4aa:	0000      	movs	r0, r0
 800d4ac:	0000      	movs	r0, r0
	...

0800d4b0 <_dtoa_r>:
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	ed2d 8b02 	vpush	{d8}
 800d4b8:	ec57 6b10 	vmov	r6, r7, d0
 800d4bc:	b095      	sub	sp, #84	; 0x54
 800d4be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4c4:	9105      	str	r1, [sp, #20]
 800d4c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4d0:	b975      	cbnz	r5, 800d4f0 <_dtoa_r+0x40>
 800d4d2:	2010      	movs	r0, #16
 800d4d4:	f7fe ff08 	bl	800c2e8 <malloc>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	6260      	str	r0, [r4, #36]	; 0x24
 800d4dc:	b920      	cbnz	r0, 800d4e8 <_dtoa_r+0x38>
 800d4de:	4bb2      	ldr	r3, [pc, #712]	; (800d7a8 <_dtoa_r+0x2f8>)
 800d4e0:	21ea      	movs	r1, #234	; 0xea
 800d4e2:	48b2      	ldr	r0, [pc, #712]	; (800d7ac <_dtoa_r+0x2fc>)
 800d4e4:	f7fe fe9c 	bl	800c220 <__assert_func>
 800d4e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4ec:	6005      	str	r5, [r0, #0]
 800d4ee:	60c5      	str	r5, [r0, #12]
 800d4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4f2:	6819      	ldr	r1, [r3, #0]
 800d4f4:	b151      	cbz	r1, 800d50c <_dtoa_r+0x5c>
 800d4f6:	685a      	ldr	r2, [r3, #4]
 800d4f8:	604a      	str	r2, [r1, #4]
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	4093      	lsls	r3, r2
 800d4fe:	608b      	str	r3, [r1, #8]
 800d500:	4620      	mov	r0, r4
 800d502:	f001 f82d 	bl	800e560 <_Bfree>
 800d506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d508:	2200      	movs	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	1e3b      	subs	r3, r7, #0
 800d50e:	bfb9      	ittee	lt
 800d510:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d514:	9303      	strlt	r3, [sp, #12]
 800d516:	2300      	movge	r3, #0
 800d518:	f8c8 3000 	strge.w	r3, [r8]
 800d51c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d520:	4ba3      	ldr	r3, [pc, #652]	; (800d7b0 <_dtoa_r+0x300>)
 800d522:	bfbc      	itt	lt
 800d524:	2201      	movlt	r2, #1
 800d526:	f8c8 2000 	strlt.w	r2, [r8]
 800d52a:	ea33 0309 	bics.w	r3, r3, r9
 800d52e:	d11b      	bne.n	800d568 <_dtoa_r+0xb8>
 800d530:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d532:	f242 730f 	movw	r3, #9999	; 0x270f
 800d536:	6013      	str	r3, [r2, #0]
 800d538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d53c:	4333      	orrs	r3, r6
 800d53e:	f000 857a 	beq.w	800e036 <_dtoa_r+0xb86>
 800d542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d544:	b963      	cbnz	r3, 800d560 <_dtoa_r+0xb0>
 800d546:	4b9b      	ldr	r3, [pc, #620]	; (800d7b4 <_dtoa_r+0x304>)
 800d548:	e024      	b.n	800d594 <_dtoa_r+0xe4>
 800d54a:	4b9b      	ldr	r3, [pc, #620]	; (800d7b8 <_dtoa_r+0x308>)
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	3308      	adds	r3, #8
 800d550:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d552:	6013      	str	r3, [r2, #0]
 800d554:	9800      	ldr	r0, [sp, #0]
 800d556:	b015      	add	sp, #84	; 0x54
 800d558:	ecbd 8b02 	vpop	{d8}
 800d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d560:	4b94      	ldr	r3, [pc, #592]	; (800d7b4 <_dtoa_r+0x304>)
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	3303      	adds	r3, #3
 800d566:	e7f3      	b.n	800d550 <_dtoa_r+0xa0>
 800d568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d56c:	2200      	movs	r2, #0
 800d56e:	ec51 0b17 	vmov	r0, r1, d7
 800d572:	2300      	movs	r3, #0
 800d574:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d578:	f7f3 fab6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d57c:	4680      	mov	r8, r0
 800d57e:	b158      	cbz	r0, 800d598 <_dtoa_r+0xe8>
 800d580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d582:	2301      	movs	r3, #1
 800d584:	6013      	str	r3, [r2, #0]
 800d586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 8551 	beq.w	800e030 <_dtoa_r+0xb80>
 800d58e:	488b      	ldr	r0, [pc, #556]	; (800d7bc <_dtoa_r+0x30c>)
 800d590:	6018      	str	r0, [r3, #0]
 800d592:	1e43      	subs	r3, r0, #1
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	e7dd      	b.n	800d554 <_dtoa_r+0xa4>
 800d598:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d59c:	aa12      	add	r2, sp, #72	; 0x48
 800d59e:	a913      	add	r1, sp, #76	; 0x4c
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f001 fabf 	bl	800eb24 <__d2b>
 800d5a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d5aa:	4683      	mov	fp, r0
 800d5ac:	2d00      	cmp	r5, #0
 800d5ae:	d07c      	beq.n	800d6aa <_dtoa_r+0x1fa>
 800d5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d5b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d5be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5ca:	4b7d      	ldr	r3, [pc, #500]	; (800d7c0 <_dtoa_r+0x310>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	4639      	mov	r1, r7
 800d5d2:	f7f2 fe69 	bl	80002a8 <__aeabi_dsub>
 800d5d6:	a36e      	add	r3, pc, #440	; (adr r3, 800d790 <_dtoa_r+0x2e0>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	f7f3 f81c 	bl	8000618 <__aeabi_dmul>
 800d5e0:	a36d      	add	r3, pc, #436	; (adr r3, 800d798 <_dtoa_r+0x2e8>)
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	f7f2 fe61 	bl	80002ac <__adddf3>
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	460f      	mov	r7, r1
 800d5f0:	f7f2 ffa8 	bl	8000544 <__aeabi_i2d>
 800d5f4:	a36a      	add	r3, pc, #424	; (adr r3, 800d7a0 <_dtoa_r+0x2f0>)
 800d5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fa:	f7f3 f80d 	bl	8000618 <__aeabi_dmul>
 800d5fe:	4602      	mov	r2, r0
 800d600:	460b      	mov	r3, r1
 800d602:	4630      	mov	r0, r6
 800d604:	4639      	mov	r1, r7
 800d606:	f7f2 fe51 	bl	80002ac <__adddf3>
 800d60a:	4606      	mov	r6, r0
 800d60c:	460f      	mov	r7, r1
 800d60e:	f7f3 fab3 	bl	8000b78 <__aeabi_d2iz>
 800d612:	2200      	movs	r2, #0
 800d614:	4682      	mov	sl, r0
 800d616:	2300      	movs	r3, #0
 800d618:	4630      	mov	r0, r6
 800d61a:	4639      	mov	r1, r7
 800d61c:	f7f3 fa6e 	bl	8000afc <__aeabi_dcmplt>
 800d620:	b148      	cbz	r0, 800d636 <_dtoa_r+0x186>
 800d622:	4650      	mov	r0, sl
 800d624:	f7f2 ff8e 	bl	8000544 <__aeabi_i2d>
 800d628:	4632      	mov	r2, r6
 800d62a:	463b      	mov	r3, r7
 800d62c:	f7f3 fa5c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d630:	b908      	cbnz	r0, 800d636 <_dtoa_r+0x186>
 800d632:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d636:	f1ba 0f16 	cmp.w	sl, #22
 800d63a:	d854      	bhi.n	800d6e6 <_dtoa_r+0x236>
 800d63c:	4b61      	ldr	r3, [pc, #388]	; (800d7c4 <_dtoa_r+0x314>)
 800d63e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d64a:	f7f3 fa57 	bl	8000afc <__aeabi_dcmplt>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d04b      	beq.n	800d6ea <_dtoa_r+0x23a>
 800d652:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d656:	2300      	movs	r3, #0
 800d658:	930e      	str	r3, [sp, #56]	; 0x38
 800d65a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d65c:	1b5d      	subs	r5, r3, r5
 800d65e:	1e6b      	subs	r3, r5, #1
 800d660:	9304      	str	r3, [sp, #16]
 800d662:	bf43      	ittte	mi
 800d664:	2300      	movmi	r3, #0
 800d666:	f1c5 0801 	rsbmi	r8, r5, #1
 800d66a:	9304      	strmi	r3, [sp, #16]
 800d66c:	f04f 0800 	movpl.w	r8, #0
 800d670:	f1ba 0f00 	cmp.w	sl, #0
 800d674:	db3b      	blt.n	800d6ee <_dtoa_r+0x23e>
 800d676:	9b04      	ldr	r3, [sp, #16]
 800d678:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d67c:	4453      	add	r3, sl
 800d67e:	9304      	str	r3, [sp, #16]
 800d680:	2300      	movs	r3, #0
 800d682:	9306      	str	r3, [sp, #24]
 800d684:	9b05      	ldr	r3, [sp, #20]
 800d686:	2b09      	cmp	r3, #9
 800d688:	d869      	bhi.n	800d75e <_dtoa_r+0x2ae>
 800d68a:	2b05      	cmp	r3, #5
 800d68c:	bfc4      	itt	gt
 800d68e:	3b04      	subgt	r3, #4
 800d690:	9305      	strgt	r3, [sp, #20]
 800d692:	9b05      	ldr	r3, [sp, #20]
 800d694:	f1a3 0302 	sub.w	r3, r3, #2
 800d698:	bfcc      	ite	gt
 800d69a:	2500      	movgt	r5, #0
 800d69c:	2501      	movle	r5, #1
 800d69e:	2b03      	cmp	r3, #3
 800d6a0:	d869      	bhi.n	800d776 <_dtoa_r+0x2c6>
 800d6a2:	e8df f003 	tbb	[pc, r3]
 800d6a6:	4e2c      	.short	0x4e2c
 800d6a8:	5a4c      	.short	0x5a4c
 800d6aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d6ae:	441d      	add	r5, r3
 800d6b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6b4:	2b20      	cmp	r3, #32
 800d6b6:	bfc1      	itttt	gt
 800d6b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6c0:	fa09 f303 	lslgt.w	r3, r9, r3
 800d6c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6c8:	bfda      	itte	le
 800d6ca:	f1c3 0320 	rsble	r3, r3, #32
 800d6ce:	fa06 f003 	lslle.w	r0, r6, r3
 800d6d2:	4318      	orrgt	r0, r3
 800d6d4:	f7f2 ff26 	bl	8000524 <__aeabi_ui2d>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	4606      	mov	r6, r0
 800d6dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6e0:	3d01      	subs	r5, #1
 800d6e2:	9310      	str	r3, [sp, #64]	; 0x40
 800d6e4:	e771      	b.n	800d5ca <_dtoa_r+0x11a>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e7b6      	b.n	800d658 <_dtoa_r+0x1a8>
 800d6ea:	900e      	str	r0, [sp, #56]	; 0x38
 800d6ec:	e7b5      	b.n	800d65a <_dtoa_r+0x1aa>
 800d6ee:	f1ca 0300 	rsb	r3, sl, #0
 800d6f2:	9306      	str	r3, [sp, #24]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	eba8 080a 	sub.w	r8, r8, sl
 800d6fa:	930d      	str	r3, [sp, #52]	; 0x34
 800d6fc:	e7c2      	b.n	800d684 <_dtoa_r+0x1d4>
 800d6fe:	2300      	movs	r3, #0
 800d700:	9308      	str	r3, [sp, #32]
 800d702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d704:	2b00      	cmp	r3, #0
 800d706:	dc39      	bgt.n	800d77c <_dtoa_r+0x2cc>
 800d708:	f04f 0901 	mov.w	r9, #1
 800d70c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d710:	464b      	mov	r3, r9
 800d712:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d716:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d718:	2200      	movs	r2, #0
 800d71a:	6042      	str	r2, [r0, #4]
 800d71c:	2204      	movs	r2, #4
 800d71e:	f102 0614 	add.w	r6, r2, #20
 800d722:	429e      	cmp	r6, r3
 800d724:	6841      	ldr	r1, [r0, #4]
 800d726:	d92f      	bls.n	800d788 <_dtoa_r+0x2d8>
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 fed9 	bl	800e4e0 <_Balloc>
 800d72e:	9000      	str	r0, [sp, #0]
 800d730:	2800      	cmp	r0, #0
 800d732:	d14b      	bne.n	800d7cc <_dtoa_r+0x31c>
 800d734:	4b24      	ldr	r3, [pc, #144]	; (800d7c8 <_dtoa_r+0x318>)
 800d736:	4602      	mov	r2, r0
 800d738:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d73c:	e6d1      	b.n	800d4e2 <_dtoa_r+0x32>
 800d73e:	2301      	movs	r3, #1
 800d740:	e7de      	b.n	800d700 <_dtoa_r+0x250>
 800d742:	2300      	movs	r3, #0
 800d744:	9308      	str	r3, [sp, #32]
 800d746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d748:	eb0a 0903 	add.w	r9, sl, r3
 800d74c:	f109 0301 	add.w	r3, r9, #1
 800d750:	2b01      	cmp	r3, #1
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	bfb8      	it	lt
 800d756:	2301      	movlt	r3, #1
 800d758:	e7dd      	b.n	800d716 <_dtoa_r+0x266>
 800d75a:	2301      	movs	r3, #1
 800d75c:	e7f2      	b.n	800d744 <_dtoa_r+0x294>
 800d75e:	2501      	movs	r5, #1
 800d760:	2300      	movs	r3, #0
 800d762:	9305      	str	r3, [sp, #20]
 800d764:	9508      	str	r5, [sp, #32]
 800d766:	f04f 39ff 	mov.w	r9, #4294967295
 800d76a:	2200      	movs	r2, #0
 800d76c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d770:	2312      	movs	r3, #18
 800d772:	9209      	str	r2, [sp, #36]	; 0x24
 800d774:	e7cf      	b.n	800d716 <_dtoa_r+0x266>
 800d776:	2301      	movs	r3, #1
 800d778:	9308      	str	r3, [sp, #32]
 800d77a:	e7f4      	b.n	800d766 <_dtoa_r+0x2b6>
 800d77c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d780:	f8cd 9004 	str.w	r9, [sp, #4]
 800d784:	464b      	mov	r3, r9
 800d786:	e7c6      	b.n	800d716 <_dtoa_r+0x266>
 800d788:	3101      	adds	r1, #1
 800d78a:	6041      	str	r1, [r0, #4]
 800d78c:	0052      	lsls	r2, r2, #1
 800d78e:	e7c6      	b.n	800d71e <_dtoa_r+0x26e>
 800d790:	636f4361 	.word	0x636f4361
 800d794:	3fd287a7 	.word	0x3fd287a7
 800d798:	8b60c8b3 	.word	0x8b60c8b3
 800d79c:	3fc68a28 	.word	0x3fc68a28
 800d7a0:	509f79fb 	.word	0x509f79fb
 800d7a4:	3fd34413 	.word	0x3fd34413
 800d7a8:	08012cd2 	.word	0x08012cd2
 800d7ac:	08012ce9 	.word	0x08012ce9
 800d7b0:	7ff00000 	.word	0x7ff00000
 800d7b4:	08012cce 	.word	0x08012cce
 800d7b8:	08012cc5 	.word	0x08012cc5
 800d7bc:	08012ca2 	.word	0x08012ca2
 800d7c0:	3ff80000 	.word	0x3ff80000
 800d7c4:	08012e48 	.word	0x08012e48
 800d7c8:	08012d48 	.word	0x08012d48
 800d7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7ce:	9a00      	ldr	r2, [sp, #0]
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	9b01      	ldr	r3, [sp, #4]
 800d7d4:	2b0e      	cmp	r3, #14
 800d7d6:	f200 80ad 	bhi.w	800d934 <_dtoa_r+0x484>
 800d7da:	2d00      	cmp	r5, #0
 800d7dc:	f000 80aa 	beq.w	800d934 <_dtoa_r+0x484>
 800d7e0:	f1ba 0f00 	cmp.w	sl, #0
 800d7e4:	dd36      	ble.n	800d854 <_dtoa_r+0x3a4>
 800d7e6:	4ac3      	ldr	r2, [pc, #780]	; (800daf4 <_dtoa_r+0x644>)
 800d7e8:	f00a 030f 	and.w	r3, sl, #15
 800d7ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d7f0:	ed93 7b00 	vldr	d7, [r3]
 800d7f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d7f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d7fc:	eeb0 8a47 	vmov.f32	s16, s14
 800d800:	eef0 8a67 	vmov.f32	s17, s15
 800d804:	d016      	beq.n	800d834 <_dtoa_r+0x384>
 800d806:	4bbc      	ldr	r3, [pc, #752]	; (800daf8 <_dtoa_r+0x648>)
 800d808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d80c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d810:	f7f3 f82c 	bl	800086c <__aeabi_ddiv>
 800d814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d818:	f007 070f 	and.w	r7, r7, #15
 800d81c:	2503      	movs	r5, #3
 800d81e:	4eb6      	ldr	r6, [pc, #728]	; (800daf8 <_dtoa_r+0x648>)
 800d820:	b957      	cbnz	r7, 800d838 <_dtoa_r+0x388>
 800d822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d826:	ec53 2b18 	vmov	r2, r3, d8
 800d82a:	f7f3 f81f 	bl	800086c <__aeabi_ddiv>
 800d82e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d832:	e029      	b.n	800d888 <_dtoa_r+0x3d8>
 800d834:	2502      	movs	r5, #2
 800d836:	e7f2      	b.n	800d81e <_dtoa_r+0x36e>
 800d838:	07f9      	lsls	r1, r7, #31
 800d83a:	d508      	bpl.n	800d84e <_dtoa_r+0x39e>
 800d83c:	ec51 0b18 	vmov	r0, r1, d8
 800d840:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d844:	f7f2 fee8 	bl	8000618 <__aeabi_dmul>
 800d848:	ec41 0b18 	vmov	d8, r0, r1
 800d84c:	3501      	adds	r5, #1
 800d84e:	107f      	asrs	r7, r7, #1
 800d850:	3608      	adds	r6, #8
 800d852:	e7e5      	b.n	800d820 <_dtoa_r+0x370>
 800d854:	f000 80a6 	beq.w	800d9a4 <_dtoa_r+0x4f4>
 800d858:	f1ca 0600 	rsb	r6, sl, #0
 800d85c:	4ba5      	ldr	r3, [pc, #660]	; (800daf4 <_dtoa_r+0x644>)
 800d85e:	4fa6      	ldr	r7, [pc, #664]	; (800daf8 <_dtoa_r+0x648>)
 800d860:	f006 020f 	and.w	r2, r6, #15
 800d864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d870:	f7f2 fed2 	bl	8000618 <__aeabi_dmul>
 800d874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d878:	1136      	asrs	r6, r6, #4
 800d87a:	2300      	movs	r3, #0
 800d87c:	2502      	movs	r5, #2
 800d87e:	2e00      	cmp	r6, #0
 800d880:	f040 8085 	bne.w	800d98e <_dtoa_r+0x4de>
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1d2      	bne.n	800d82e <_dtoa_r+0x37e>
 800d888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 808c 	beq.w	800d9a8 <_dtoa_r+0x4f8>
 800d890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d894:	4b99      	ldr	r3, [pc, #612]	; (800dafc <_dtoa_r+0x64c>)
 800d896:	2200      	movs	r2, #0
 800d898:	4630      	mov	r0, r6
 800d89a:	4639      	mov	r1, r7
 800d89c:	f7f3 f92e 	bl	8000afc <__aeabi_dcmplt>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	f000 8081 	beq.w	800d9a8 <_dtoa_r+0x4f8>
 800d8a6:	9b01      	ldr	r3, [sp, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d07d      	beq.n	800d9a8 <_dtoa_r+0x4f8>
 800d8ac:	f1b9 0f00 	cmp.w	r9, #0
 800d8b0:	dd3c      	ble.n	800d92c <_dtoa_r+0x47c>
 800d8b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d8b6:	9307      	str	r3, [sp, #28]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	4b91      	ldr	r3, [pc, #580]	; (800db00 <_dtoa_r+0x650>)
 800d8bc:	4630      	mov	r0, r6
 800d8be:	4639      	mov	r1, r7
 800d8c0:	f7f2 feaa 	bl	8000618 <__aeabi_dmul>
 800d8c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d8ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f7f2 fe36 	bl	8000544 <__aeabi_i2d>
 800d8d8:	4632      	mov	r2, r6
 800d8da:	463b      	mov	r3, r7
 800d8dc:	f7f2 fe9c 	bl	8000618 <__aeabi_dmul>
 800d8e0:	4b88      	ldr	r3, [pc, #544]	; (800db04 <_dtoa_r+0x654>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f7f2 fce2 	bl	80002ac <__adddf3>
 800d8e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8f0:	9303      	str	r3, [sp, #12]
 800d8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d15c      	bne.n	800d9b2 <_dtoa_r+0x502>
 800d8f8:	4b83      	ldr	r3, [pc, #524]	; (800db08 <_dtoa_r+0x658>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4639      	mov	r1, r7
 800d900:	f7f2 fcd2 	bl	80002a8 <__aeabi_dsub>
 800d904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d908:	4606      	mov	r6, r0
 800d90a:	460f      	mov	r7, r1
 800d90c:	f7f3 f914 	bl	8000b38 <__aeabi_dcmpgt>
 800d910:	2800      	cmp	r0, #0
 800d912:	f040 8296 	bne.w	800de42 <_dtoa_r+0x992>
 800d916:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d91a:	4630      	mov	r0, r6
 800d91c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d920:	4639      	mov	r1, r7
 800d922:	f7f3 f8eb 	bl	8000afc <__aeabi_dcmplt>
 800d926:	2800      	cmp	r0, #0
 800d928:	f040 8288 	bne.w	800de3c <_dtoa_r+0x98c>
 800d92c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d936:	2b00      	cmp	r3, #0
 800d938:	f2c0 8158 	blt.w	800dbec <_dtoa_r+0x73c>
 800d93c:	f1ba 0f0e 	cmp.w	sl, #14
 800d940:	f300 8154 	bgt.w	800dbec <_dtoa_r+0x73c>
 800d944:	4b6b      	ldr	r3, [pc, #428]	; (800daf4 <_dtoa_r+0x644>)
 800d946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d94a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d950:	2b00      	cmp	r3, #0
 800d952:	f280 80e3 	bge.w	800db1c <_dtoa_r+0x66c>
 800d956:	9b01      	ldr	r3, [sp, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f300 80df 	bgt.w	800db1c <_dtoa_r+0x66c>
 800d95e:	f040 826d 	bne.w	800de3c <_dtoa_r+0x98c>
 800d962:	4b69      	ldr	r3, [pc, #420]	; (800db08 <_dtoa_r+0x658>)
 800d964:	2200      	movs	r2, #0
 800d966:	4640      	mov	r0, r8
 800d968:	4649      	mov	r1, r9
 800d96a:	f7f2 fe55 	bl	8000618 <__aeabi_dmul>
 800d96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d972:	f7f3 f8d7 	bl	8000b24 <__aeabi_dcmpge>
 800d976:	9e01      	ldr	r6, [sp, #4]
 800d978:	4637      	mov	r7, r6
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f040 8243 	bne.w	800de06 <_dtoa_r+0x956>
 800d980:	9d00      	ldr	r5, [sp, #0]
 800d982:	2331      	movs	r3, #49	; 0x31
 800d984:	f805 3b01 	strb.w	r3, [r5], #1
 800d988:	f10a 0a01 	add.w	sl, sl, #1
 800d98c:	e23f      	b.n	800de0e <_dtoa_r+0x95e>
 800d98e:	07f2      	lsls	r2, r6, #31
 800d990:	d505      	bpl.n	800d99e <_dtoa_r+0x4ee>
 800d992:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d996:	f7f2 fe3f 	bl	8000618 <__aeabi_dmul>
 800d99a:	3501      	adds	r5, #1
 800d99c:	2301      	movs	r3, #1
 800d99e:	1076      	asrs	r6, r6, #1
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	e76c      	b.n	800d87e <_dtoa_r+0x3ce>
 800d9a4:	2502      	movs	r5, #2
 800d9a6:	e76f      	b.n	800d888 <_dtoa_r+0x3d8>
 800d9a8:	9b01      	ldr	r3, [sp, #4]
 800d9aa:	f8cd a01c 	str.w	sl, [sp, #28]
 800d9ae:	930c      	str	r3, [sp, #48]	; 0x30
 800d9b0:	e78d      	b.n	800d8ce <_dtoa_r+0x41e>
 800d9b2:	9900      	ldr	r1, [sp, #0]
 800d9b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d9b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9b8:	4b4e      	ldr	r3, [pc, #312]	; (800daf4 <_dtoa_r+0x644>)
 800d9ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9be:	4401      	add	r1, r0
 800d9c0:	9102      	str	r1, [sp, #8]
 800d9c2:	9908      	ldr	r1, [sp, #32]
 800d9c4:	eeb0 8a47 	vmov.f32	s16, s14
 800d9c8:	eef0 8a67 	vmov.f32	s17, s15
 800d9cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9d4:	2900      	cmp	r1, #0
 800d9d6:	d045      	beq.n	800da64 <_dtoa_r+0x5b4>
 800d9d8:	494c      	ldr	r1, [pc, #304]	; (800db0c <_dtoa_r+0x65c>)
 800d9da:	2000      	movs	r0, #0
 800d9dc:	f7f2 ff46 	bl	800086c <__aeabi_ddiv>
 800d9e0:	ec53 2b18 	vmov	r2, r3, d8
 800d9e4:	f7f2 fc60 	bl	80002a8 <__aeabi_dsub>
 800d9e8:	9d00      	ldr	r5, [sp, #0]
 800d9ea:	ec41 0b18 	vmov	d8, r0, r1
 800d9ee:	4639      	mov	r1, r7
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	f7f3 f8c1 	bl	8000b78 <__aeabi_d2iz>
 800d9f6:	900c      	str	r0, [sp, #48]	; 0x30
 800d9f8:	f7f2 fda4 	bl	8000544 <__aeabi_i2d>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	4630      	mov	r0, r6
 800da02:	4639      	mov	r1, r7
 800da04:	f7f2 fc50 	bl	80002a8 <__aeabi_dsub>
 800da08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da0a:	3330      	adds	r3, #48	; 0x30
 800da0c:	f805 3b01 	strb.w	r3, [r5], #1
 800da10:	ec53 2b18 	vmov	r2, r3, d8
 800da14:	4606      	mov	r6, r0
 800da16:	460f      	mov	r7, r1
 800da18:	f7f3 f870 	bl	8000afc <__aeabi_dcmplt>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d165      	bne.n	800daec <_dtoa_r+0x63c>
 800da20:	4632      	mov	r2, r6
 800da22:	463b      	mov	r3, r7
 800da24:	4935      	ldr	r1, [pc, #212]	; (800dafc <_dtoa_r+0x64c>)
 800da26:	2000      	movs	r0, #0
 800da28:	f7f2 fc3e 	bl	80002a8 <__aeabi_dsub>
 800da2c:	ec53 2b18 	vmov	r2, r3, d8
 800da30:	f7f3 f864 	bl	8000afc <__aeabi_dcmplt>
 800da34:	2800      	cmp	r0, #0
 800da36:	f040 80b9 	bne.w	800dbac <_dtoa_r+0x6fc>
 800da3a:	9b02      	ldr	r3, [sp, #8]
 800da3c:	429d      	cmp	r5, r3
 800da3e:	f43f af75 	beq.w	800d92c <_dtoa_r+0x47c>
 800da42:	4b2f      	ldr	r3, [pc, #188]	; (800db00 <_dtoa_r+0x650>)
 800da44:	ec51 0b18 	vmov	r0, r1, d8
 800da48:	2200      	movs	r2, #0
 800da4a:	f7f2 fde5 	bl	8000618 <__aeabi_dmul>
 800da4e:	4b2c      	ldr	r3, [pc, #176]	; (800db00 <_dtoa_r+0x650>)
 800da50:	ec41 0b18 	vmov	d8, r0, r1
 800da54:	2200      	movs	r2, #0
 800da56:	4630      	mov	r0, r6
 800da58:	4639      	mov	r1, r7
 800da5a:	f7f2 fddd 	bl	8000618 <__aeabi_dmul>
 800da5e:	4606      	mov	r6, r0
 800da60:	460f      	mov	r7, r1
 800da62:	e7c4      	b.n	800d9ee <_dtoa_r+0x53e>
 800da64:	ec51 0b17 	vmov	r0, r1, d7
 800da68:	f7f2 fdd6 	bl	8000618 <__aeabi_dmul>
 800da6c:	9b02      	ldr	r3, [sp, #8]
 800da6e:	9d00      	ldr	r5, [sp, #0]
 800da70:	930c      	str	r3, [sp, #48]	; 0x30
 800da72:	ec41 0b18 	vmov	d8, r0, r1
 800da76:	4639      	mov	r1, r7
 800da78:	4630      	mov	r0, r6
 800da7a:	f7f3 f87d 	bl	8000b78 <__aeabi_d2iz>
 800da7e:	9011      	str	r0, [sp, #68]	; 0x44
 800da80:	f7f2 fd60 	bl	8000544 <__aeabi_i2d>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4630      	mov	r0, r6
 800da8a:	4639      	mov	r1, r7
 800da8c:	f7f2 fc0c 	bl	80002a8 <__aeabi_dsub>
 800da90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da92:	3330      	adds	r3, #48	; 0x30
 800da94:	f805 3b01 	strb.w	r3, [r5], #1
 800da98:	9b02      	ldr	r3, [sp, #8]
 800da9a:	429d      	cmp	r5, r3
 800da9c:	4606      	mov	r6, r0
 800da9e:	460f      	mov	r7, r1
 800daa0:	f04f 0200 	mov.w	r2, #0
 800daa4:	d134      	bne.n	800db10 <_dtoa_r+0x660>
 800daa6:	4b19      	ldr	r3, [pc, #100]	; (800db0c <_dtoa_r+0x65c>)
 800daa8:	ec51 0b18 	vmov	r0, r1, d8
 800daac:	f7f2 fbfe 	bl	80002ac <__adddf3>
 800dab0:	4602      	mov	r2, r0
 800dab2:	460b      	mov	r3, r1
 800dab4:	4630      	mov	r0, r6
 800dab6:	4639      	mov	r1, r7
 800dab8:	f7f3 f83e 	bl	8000b38 <__aeabi_dcmpgt>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d175      	bne.n	800dbac <_dtoa_r+0x6fc>
 800dac0:	ec53 2b18 	vmov	r2, r3, d8
 800dac4:	4911      	ldr	r1, [pc, #68]	; (800db0c <_dtoa_r+0x65c>)
 800dac6:	2000      	movs	r0, #0
 800dac8:	f7f2 fbee 	bl	80002a8 <__aeabi_dsub>
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	4630      	mov	r0, r6
 800dad2:	4639      	mov	r1, r7
 800dad4:	f7f3 f812 	bl	8000afc <__aeabi_dcmplt>
 800dad8:	2800      	cmp	r0, #0
 800dada:	f43f af27 	beq.w	800d92c <_dtoa_r+0x47c>
 800dade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dae0:	1e6b      	subs	r3, r5, #1
 800dae2:	930c      	str	r3, [sp, #48]	; 0x30
 800dae4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dae8:	2b30      	cmp	r3, #48	; 0x30
 800daea:	d0f8      	beq.n	800dade <_dtoa_r+0x62e>
 800daec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800daf0:	e04a      	b.n	800db88 <_dtoa_r+0x6d8>
 800daf2:	bf00      	nop
 800daf4:	08012e48 	.word	0x08012e48
 800daf8:	08012e20 	.word	0x08012e20
 800dafc:	3ff00000 	.word	0x3ff00000
 800db00:	40240000 	.word	0x40240000
 800db04:	401c0000 	.word	0x401c0000
 800db08:	40140000 	.word	0x40140000
 800db0c:	3fe00000 	.word	0x3fe00000
 800db10:	4baf      	ldr	r3, [pc, #700]	; (800ddd0 <_dtoa_r+0x920>)
 800db12:	f7f2 fd81 	bl	8000618 <__aeabi_dmul>
 800db16:	4606      	mov	r6, r0
 800db18:	460f      	mov	r7, r1
 800db1a:	e7ac      	b.n	800da76 <_dtoa_r+0x5c6>
 800db1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800db20:	9d00      	ldr	r5, [sp, #0]
 800db22:	4642      	mov	r2, r8
 800db24:	464b      	mov	r3, r9
 800db26:	4630      	mov	r0, r6
 800db28:	4639      	mov	r1, r7
 800db2a:	f7f2 fe9f 	bl	800086c <__aeabi_ddiv>
 800db2e:	f7f3 f823 	bl	8000b78 <__aeabi_d2iz>
 800db32:	9002      	str	r0, [sp, #8]
 800db34:	f7f2 fd06 	bl	8000544 <__aeabi_i2d>
 800db38:	4642      	mov	r2, r8
 800db3a:	464b      	mov	r3, r9
 800db3c:	f7f2 fd6c 	bl	8000618 <__aeabi_dmul>
 800db40:	4602      	mov	r2, r0
 800db42:	460b      	mov	r3, r1
 800db44:	4630      	mov	r0, r6
 800db46:	4639      	mov	r1, r7
 800db48:	f7f2 fbae 	bl	80002a8 <__aeabi_dsub>
 800db4c:	9e02      	ldr	r6, [sp, #8]
 800db4e:	9f01      	ldr	r7, [sp, #4]
 800db50:	3630      	adds	r6, #48	; 0x30
 800db52:	f805 6b01 	strb.w	r6, [r5], #1
 800db56:	9e00      	ldr	r6, [sp, #0]
 800db58:	1bae      	subs	r6, r5, r6
 800db5a:	42b7      	cmp	r7, r6
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	d137      	bne.n	800dbd2 <_dtoa_r+0x722>
 800db62:	f7f2 fba3 	bl	80002ac <__adddf3>
 800db66:	4642      	mov	r2, r8
 800db68:	464b      	mov	r3, r9
 800db6a:	4606      	mov	r6, r0
 800db6c:	460f      	mov	r7, r1
 800db6e:	f7f2 ffe3 	bl	8000b38 <__aeabi_dcmpgt>
 800db72:	b9c8      	cbnz	r0, 800dba8 <_dtoa_r+0x6f8>
 800db74:	4642      	mov	r2, r8
 800db76:	464b      	mov	r3, r9
 800db78:	4630      	mov	r0, r6
 800db7a:	4639      	mov	r1, r7
 800db7c:	f7f2 ffb4 	bl	8000ae8 <__aeabi_dcmpeq>
 800db80:	b110      	cbz	r0, 800db88 <_dtoa_r+0x6d8>
 800db82:	9b02      	ldr	r3, [sp, #8]
 800db84:	07d9      	lsls	r1, r3, #31
 800db86:	d40f      	bmi.n	800dba8 <_dtoa_r+0x6f8>
 800db88:	4620      	mov	r0, r4
 800db8a:	4659      	mov	r1, fp
 800db8c:	f000 fce8 	bl	800e560 <_Bfree>
 800db90:	2300      	movs	r3, #0
 800db92:	702b      	strb	r3, [r5, #0]
 800db94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db96:	f10a 0001 	add.w	r0, sl, #1
 800db9a:	6018      	str	r0, [r3, #0]
 800db9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f43f acd8 	beq.w	800d554 <_dtoa_r+0xa4>
 800dba4:	601d      	str	r5, [r3, #0]
 800dba6:	e4d5      	b.n	800d554 <_dtoa_r+0xa4>
 800dba8:	f8cd a01c 	str.w	sl, [sp, #28]
 800dbac:	462b      	mov	r3, r5
 800dbae:	461d      	mov	r5, r3
 800dbb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbb4:	2a39      	cmp	r2, #57	; 0x39
 800dbb6:	d108      	bne.n	800dbca <_dtoa_r+0x71a>
 800dbb8:	9a00      	ldr	r2, [sp, #0]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d1f7      	bne.n	800dbae <_dtoa_r+0x6fe>
 800dbbe:	9a07      	ldr	r2, [sp, #28]
 800dbc0:	9900      	ldr	r1, [sp, #0]
 800dbc2:	3201      	adds	r2, #1
 800dbc4:	9207      	str	r2, [sp, #28]
 800dbc6:	2230      	movs	r2, #48	; 0x30
 800dbc8:	700a      	strb	r2, [r1, #0]
 800dbca:	781a      	ldrb	r2, [r3, #0]
 800dbcc:	3201      	adds	r2, #1
 800dbce:	701a      	strb	r2, [r3, #0]
 800dbd0:	e78c      	b.n	800daec <_dtoa_r+0x63c>
 800dbd2:	4b7f      	ldr	r3, [pc, #508]	; (800ddd0 <_dtoa_r+0x920>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f7f2 fd1f 	bl	8000618 <__aeabi_dmul>
 800dbda:	2200      	movs	r2, #0
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4606      	mov	r6, r0
 800dbe0:	460f      	mov	r7, r1
 800dbe2:	f7f2 ff81 	bl	8000ae8 <__aeabi_dcmpeq>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d09b      	beq.n	800db22 <_dtoa_r+0x672>
 800dbea:	e7cd      	b.n	800db88 <_dtoa_r+0x6d8>
 800dbec:	9a08      	ldr	r2, [sp, #32]
 800dbee:	2a00      	cmp	r2, #0
 800dbf0:	f000 80c4 	beq.w	800dd7c <_dtoa_r+0x8cc>
 800dbf4:	9a05      	ldr	r2, [sp, #20]
 800dbf6:	2a01      	cmp	r2, #1
 800dbf8:	f300 80a8 	bgt.w	800dd4c <_dtoa_r+0x89c>
 800dbfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbfe:	2a00      	cmp	r2, #0
 800dc00:	f000 80a0 	beq.w	800dd44 <_dtoa_r+0x894>
 800dc04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dc08:	9e06      	ldr	r6, [sp, #24]
 800dc0a:	4645      	mov	r5, r8
 800dc0c:	9a04      	ldr	r2, [sp, #16]
 800dc0e:	2101      	movs	r1, #1
 800dc10:	441a      	add	r2, r3
 800dc12:	4620      	mov	r0, r4
 800dc14:	4498      	add	r8, r3
 800dc16:	9204      	str	r2, [sp, #16]
 800dc18:	f000 fd5e 	bl	800e6d8 <__i2b>
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	2d00      	cmp	r5, #0
 800dc20:	dd0b      	ble.n	800dc3a <_dtoa_r+0x78a>
 800dc22:	9b04      	ldr	r3, [sp, #16]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	dd08      	ble.n	800dc3a <_dtoa_r+0x78a>
 800dc28:	42ab      	cmp	r3, r5
 800dc2a:	9a04      	ldr	r2, [sp, #16]
 800dc2c:	bfa8      	it	ge
 800dc2e:	462b      	movge	r3, r5
 800dc30:	eba8 0803 	sub.w	r8, r8, r3
 800dc34:	1aed      	subs	r5, r5, r3
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	9304      	str	r3, [sp, #16]
 800dc3a:	9b06      	ldr	r3, [sp, #24]
 800dc3c:	b1fb      	cbz	r3, 800dc7e <_dtoa_r+0x7ce>
 800dc3e:	9b08      	ldr	r3, [sp, #32]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f000 809f 	beq.w	800dd84 <_dtoa_r+0x8d4>
 800dc46:	2e00      	cmp	r6, #0
 800dc48:	dd11      	ble.n	800dc6e <_dtoa_r+0x7be>
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	4632      	mov	r2, r6
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f000 fdfe 	bl	800e850 <__pow5mult>
 800dc54:	465a      	mov	r2, fp
 800dc56:	4601      	mov	r1, r0
 800dc58:	4607      	mov	r7, r0
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f000 fd52 	bl	800e704 <__multiply>
 800dc60:	4659      	mov	r1, fp
 800dc62:	9007      	str	r0, [sp, #28]
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 fc7b 	bl	800e560 <_Bfree>
 800dc6a:	9b07      	ldr	r3, [sp, #28]
 800dc6c:	469b      	mov	fp, r3
 800dc6e:	9b06      	ldr	r3, [sp, #24]
 800dc70:	1b9a      	subs	r2, r3, r6
 800dc72:	d004      	beq.n	800dc7e <_dtoa_r+0x7ce>
 800dc74:	4659      	mov	r1, fp
 800dc76:	4620      	mov	r0, r4
 800dc78:	f000 fdea 	bl	800e850 <__pow5mult>
 800dc7c:	4683      	mov	fp, r0
 800dc7e:	2101      	movs	r1, #1
 800dc80:	4620      	mov	r0, r4
 800dc82:	f000 fd29 	bl	800e6d8 <__i2b>
 800dc86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	dd7c      	ble.n	800dd88 <_dtoa_r+0x8d8>
 800dc8e:	461a      	mov	r2, r3
 800dc90:	4601      	mov	r1, r0
 800dc92:	4620      	mov	r0, r4
 800dc94:	f000 fddc 	bl	800e850 <__pow5mult>
 800dc98:	9b05      	ldr	r3, [sp, #20]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	dd76      	ble.n	800dd8e <_dtoa_r+0x8de>
 800dca0:	2300      	movs	r3, #0
 800dca2:	9306      	str	r3, [sp, #24]
 800dca4:	6933      	ldr	r3, [r6, #16]
 800dca6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dcaa:	6918      	ldr	r0, [r3, #16]
 800dcac:	f000 fcc4 	bl	800e638 <__hi0bits>
 800dcb0:	f1c0 0020 	rsb	r0, r0, #32
 800dcb4:	9b04      	ldr	r3, [sp, #16]
 800dcb6:	4418      	add	r0, r3
 800dcb8:	f010 001f 	ands.w	r0, r0, #31
 800dcbc:	f000 8086 	beq.w	800ddcc <_dtoa_r+0x91c>
 800dcc0:	f1c0 0320 	rsb	r3, r0, #32
 800dcc4:	2b04      	cmp	r3, #4
 800dcc6:	dd7f      	ble.n	800ddc8 <_dtoa_r+0x918>
 800dcc8:	f1c0 001c 	rsb	r0, r0, #28
 800dccc:	9b04      	ldr	r3, [sp, #16]
 800dcce:	4403      	add	r3, r0
 800dcd0:	4480      	add	r8, r0
 800dcd2:	4405      	add	r5, r0
 800dcd4:	9304      	str	r3, [sp, #16]
 800dcd6:	f1b8 0f00 	cmp.w	r8, #0
 800dcda:	dd05      	ble.n	800dce8 <_dtoa_r+0x838>
 800dcdc:	4659      	mov	r1, fp
 800dcde:	4642      	mov	r2, r8
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 fe0f 	bl	800e904 <__lshift>
 800dce6:	4683      	mov	fp, r0
 800dce8:	9b04      	ldr	r3, [sp, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	dd05      	ble.n	800dcfa <_dtoa_r+0x84a>
 800dcee:	4631      	mov	r1, r6
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f000 fe06 	bl	800e904 <__lshift>
 800dcf8:	4606      	mov	r6, r0
 800dcfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d069      	beq.n	800ddd4 <_dtoa_r+0x924>
 800dd00:	4631      	mov	r1, r6
 800dd02:	4658      	mov	r0, fp
 800dd04:	f000 fe6a 	bl	800e9dc <__mcmp>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	da63      	bge.n	800ddd4 <_dtoa_r+0x924>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	4659      	mov	r1, fp
 800dd10:	220a      	movs	r2, #10
 800dd12:	4620      	mov	r0, r4
 800dd14:	f000 fc46 	bl	800e5a4 <__multadd>
 800dd18:	9b08      	ldr	r3, [sp, #32]
 800dd1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd1e:	4683      	mov	fp, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f000 818f 	beq.w	800e044 <_dtoa_r+0xb94>
 800dd26:	4639      	mov	r1, r7
 800dd28:	2300      	movs	r3, #0
 800dd2a:	220a      	movs	r2, #10
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f000 fc39 	bl	800e5a4 <__multadd>
 800dd32:	f1b9 0f00 	cmp.w	r9, #0
 800dd36:	4607      	mov	r7, r0
 800dd38:	f300 808e 	bgt.w	800de58 <_dtoa_r+0x9a8>
 800dd3c:	9b05      	ldr	r3, [sp, #20]
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	dc50      	bgt.n	800dde4 <_dtoa_r+0x934>
 800dd42:	e089      	b.n	800de58 <_dtoa_r+0x9a8>
 800dd44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd4a:	e75d      	b.n	800dc08 <_dtoa_r+0x758>
 800dd4c:	9b01      	ldr	r3, [sp, #4]
 800dd4e:	1e5e      	subs	r6, r3, #1
 800dd50:	9b06      	ldr	r3, [sp, #24]
 800dd52:	42b3      	cmp	r3, r6
 800dd54:	bfbf      	itttt	lt
 800dd56:	9b06      	ldrlt	r3, [sp, #24]
 800dd58:	9606      	strlt	r6, [sp, #24]
 800dd5a:	1af2      	sublt	r2, r6, r3
 800dd5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800dd5e:	bfb6      	itet	lt
 800dd60:	189b      	addlt	r3, r3, r2
 800dd62:	1b9e      	subge	r6, r3, r6
 800dd64:	930d      	strlt	r3, [sp, #52]	; 0x34
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	bfb8      	it	lt
 800dd6a:	2600      	movlt	r6, #0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	bfb5      	itete	lt
 800dd70:	eba8 0503 	sublt.w	r5, r8, r3
 800dd74:	9b01      	ldrge	r3, [sp, #4]
 800dd76:	2300      	movlt	r3, #0
 800dd78:	4645      	movge	r5, r8
 800dd7a:	e747      	b.n	800dc0c <_dtoa_r+0x75c>
 800dd7c:	9e06      	ldr	r6, [sp, #24]
 800dd7e:	9f08      	ldr	r7, [sp, #32]
 800dd80:	4645      	mov	r5, r8
 800dd82:	e74c      	b.n	800dc1e <_dtoa_r+0x76e>
 800dd84:	9a06      	ldr	r2, [sp, #24]
 800dd86:	e775      	b.n	800dc74 <_dtoa_r+0x7c4>
 800dd88:	9b05      	ldr	r3, [sp, #20]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	dc18      	bgt.n	800ddc0 <_dtoa_r+0x910>
 800dd8e:	9b02      	ldr	r3, [sp, #8]
 800dd90:	b9b3      	cbnz	r3, 800ddc0 <_dtoa_r+0x910>
 800dd92:	9b03      	ldr	r3, [sp, #12]
 800dd94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd98:	b9a3      	cbnz	r3, 800ddc4 <_dtoa_r+0x914>
 800dd9a:	9b03      	ldr	r3, [sp, #12]
 800dd9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dda0:	0d1b      	lsrs	r3, r3, #20
 800dda2:	051b      	lsls	r3, r3, #20
 800dda4:	b12b      	cbz	r3, 800ddb2 <_dtoa_r+0x902>
 800dda6:	9b04      	ldr	r3, [sp, #16]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	9304      	str	r3, [sp, #16]
 800ddac:	f108 0801 	add.w	r8, r8, #1
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	9306      	str	r3, [sp, #24]
 800ddb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f47f af74 	bne.w	800dca4 <_dtoa_r+0x7f4>
 800ddbc:	2001      	movs	r0, #1
 800ddbe:	e779      	b.n	800dcb4 <_dtoa_r+0x804>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	e7f6      	b.n	800ddb2 <_dtoa_r+0x902>
 800ddc4:	9b02      	ldr	r3, [sp, #8]
 800ddc6:	e7f4      	b.n	800ddb2 <_dtoa_r+0x902>
 800ddc8:	d085      	beq.n	800dcd6 <_dtoa_r+0x826>
 800ddca:	4618      	mov	r0, r3
 800ddcc:	301c      	adds	r0, #28
 800ddce:	e77d      	b.n	800dccc <_dtoa_r+0x81c>
 800ddd0:	40240000 	.word	0x40240000
 800ddd4:	9b01      	ldr	r3, [sp, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	dc38      	bgt.n	800de4c <_dtoa_r+0x99c>
 800ddda:	9b05      	ldr	r3, [sp, #20]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	dd35      	ble.n	800de4c <_dtoa_r+0x99c>
 800dde0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dde4:	f1b9 0f00 	cmp.w	r9, #0
 800dde8:	d10d      	bne.n	800de06 <_dtoa_r+0x956>
 800ddea:	4631      	mov	r1, r6
 800ddec:	464b      	mov	r3, r9
 800ddee:	2205      	movs	r2, #5
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f000 fbd7 	bl	800e5a4 <__multadd>
 800ddf6:	4601      	mov	r1, r0
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	4658      	mov	r0, fp
 800ddfc:	f000 fdee 	bl	800e9dc <__mcmp>
 800de00:	2800      	cmp	r0, #0
 800de02:	f73f adbd 	bgt.w	800d980 <_dtoa_r+0x4d0>
 800de06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de08:	9d00      	ldr	r5, [sp, #0]
 800de0a:	ea6f 0a03 	mvn.w	sl, r3
 800de0e:	f04f 0800 	mov.w	r8, #0
 800de12:	4631      	mov	r1, r6
 800de14:	4620      	mov	r0, r4
 800de16:	f000 fba3 	bl	800e560 <_Bfree>
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	f43f aeb4 	beq.w	800db88 <_dtoa_r+0x6d8>
 800de20:	f1b8 0f00 	cmp.w	r8, #0
 800de24:	d005      	beq.n	800de32 <_dtoa_r+0x982>
 800de26:	45b8      	cmp	r8, r7
 800de28:	d003      	beq.n	800de32 <_dtoa_r+0x982>
 800de2a:	4641      	mov	r1, r8
 800de2c:	4620      	mov	r0, r4
 800de2e:	f000 fb97 	bl	800e560 <_Bfree>
 800de32:	4639      	mov	r1, r7
 800de34:	4620      	mov	r0, r4
 800de36:	f000 fb93 	bl	800e560 <_Bfree>
 800de3a:	e6a5      	b.n	800db88 <_dtoa_r+0x6d8>
 800de3c:	2600      	movs	r6, #0
 800de3e:	4637      	mov	r7, r6
 800de40:	e7e1      	b.n	800de06 <_dtoa_r+0x956>
 800de42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800de44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800de48:	4637      	mov	r7, r6
 800de4a:	e599      	b.n	800d980 <_dtoa_r+0x4d0>
 800de4c:	9b08      	ldr	r3, [sp, #32]
 800de4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	f000 80fd 	beq.w	800e052 <_dtoa_r+0xba2>
 800de58:	2d00      	cmp	r5, #0
 800de5a:	dd05      	ble.n	800de68 <_dtoa_r+0x9b8>
 800de5c:	4639      	mov	r1, r7
 800de5e:	462a      	mov	r2, r5
 800de60:	4620      	mov	r0, r4
 800de62:	f000 fd4f 	bl	800e904 <__lshift>
 800de66:	4607      	mov	r7, r0
 800de68:	9b06      	ldr	r3, [sp, #24]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d05c      	beq.n	800df28 <_dtoa_r+0xa78>
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	4620      	mov	r0, r4
 800de72:	f000 fb35 	bl	800e4e0 <_Balloc>
 800de76:	4605      	mov	r5, r0
 800de78:	b928      	cbnz	r0, 800de86 <_dtoa_r+0x9d6>
 800de7a:	4b80      	ldr	r3, [pc, #512]	; (800e07c <_dtoa_r+0xbcc>)
 800de7c:	4602      	mov	r2, r0
 800de7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de82:	f7ff bb2e 	b.w	800d4e2 <_dtoa_r+0x32>
 800de86:	693a      	ldr	r2, [r7, #16]
 800de88:	3202      	adds	r2, #2
 800de8a:	0092      	lsls	r2, r2, #2
 800de8c:	f107 010c 	add.w	r1, r7, #12
 800de90:	300c      	adds	r0, #12
 800de92:	f7fe fa39 	bl	800c308 <memcpy>
 800de96:	2201      	movs	r2, #1
 800de98:	4629      	mov	r1, r5
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 fd32 	bl	800e904 <__lshift>
 800dea0:	9b00      	ldr	r3, [sp, #0]
 800dea2:	3301      	adds	r3, #1
 800dea4:	9301      	str	r3, [sp, #4]
 800dea6:	9b00      	ldr	r3, [sp, #0]
 800dea8:	444b      	add	r3, r9
 800deaa:	9307      	str	r3, [sp, #28]
 800deac:	9b02      	ldr	r3, [sp, #8]
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	46b8      	mov	r8, r7
 800deb4:	9306      	str	r3, [sp, #24]
 800deb6:	4607      	mov	r7, r0
 800deb8:	9b01      	ldr	r3, [sp, #4]
 800deba:	4631      	mov	r1, r6
 800debc:	3b01      	subs	r3, #1
 800debe:	4658      	mov	r0, fp
 800dec0:	9302      	str	r3, [sp, #8]
 800dec2:	f7ff fa67 	bl	800d394 <quorem>
 800dec6:	4603      	mov	r3, r0
 800dec8:	3330      	adds	r3, #48	; 0x30
 800deca:	9004      	str	r0, [sp, #16]
 800decc:	4641      	mov	r1, r8
 800dece:	4658      	mov	r0, fp
 800ded0:	9308      	str	r3, [sp, #32]
 800ded2:	f000 fd83 	bl	800e9dc <__mcmp>
 800ded6:	463a      	mov	r2, r7
 800ded8:	4681      	mov	r9, r0
 800deda:	4631      	mov	r1, r6
 800dedc:	4620      	mov	r0, r4
 800dede:	f000 fd99 	bl	800ea14 <__mdiff>
 800dee2:	68c2      	ldr	r2, [r0, #12]
 800dee4:	9b08      	ldr	r3, [sp, #32]
 800dee6:	4605      	mov	r5, r0
 800dee8:	bb02      	cbnz	r2, 800df2c <_dtoa_r+0xa7c>
 800deea:	4601      	mov	r1, r0
 800deec:	4658      	mov	r0, fp
 800deee:	f000 fd75 	bl	800e9dc <__mcmp>
 800def2:	9b08      	ldr	r3, [sp, #32]
 800def4:	4602      	mov	r2, r0
 800def6:	4629      	mov	r1, r5
 800def8:	4620      	mov	r0, r4
 800defa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800defe:	f000 fb2f 	bl	800e560 <_Bfree>
 800df02:	9b05      	ldr	r3, [sp, #20]
 800df04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df06:	9d01      	ldr	r5, [sp, #4]
 800df08:	ea43 0102 	orr.w	r1, r3, r2
 800df0c:	9b06      	ldr	r3, [sp, #24]
 800df0e:	430b      	orrs	r3, r1
 800df10:	9b08      	ldr	r3, [sp, #32]
 800df12:	d10d      	bne.n	800df30 <_dtoa_r+0xa80>
 800df14:	2b39      	cmp	r3, #57	; 0x39
 800df16:	d029      	beq.n	800df6c <_dtoa_r+0xabc>
 800df18:	f1b9 0f00 	cmp.w	r9, #0
 800df1c:	dd01      	ble.n	800df22 <_dtoa_r+0xa72>
 800df1e:	9b04      	ldr	r3, [sp, #16]
 800df20:	3331      	adds	r3, #49	; 0x31
 800df22:	9a02      	ldr	r2, [sp, #8]
 800df24:	7013      	strb	r3, [r2, #0]
 800df26:	e774      	b.n	800de12 <_dtoa_r+0x962>
 800df28:	4638      	mov	r0, r7
 800df2a:	e7b9      	b.n	800dea0 <_dtoa_r+0x9f0>
 800df2c:	2201      	movs	r2, #1
 800df2e:	e7e2      	b.n	800def6 <_dtoa_r+0xa46>
 800df30:	f1b9 0f00 	cmp.w	r9, #0
 800df34:	db06      	blt.n	800df44 <_dtoa_r+0xa94>
 800df36:	9905      	ldr	r1, [sp, #20]
 800df38:	ea41 0909 	orr.w	r9, r1, r9
 800df3c:	9906      	ldr	r1, [sp, #24]
 800df3e:	ea59 0101 	orrs.w	r1, r9, r1
 800df42:	d120      	bne.n	800df86 <_dtoa_r+0xad6>
 800df44:	2a00      	cmp	r2, #0
 800df46:	ddec      	ble.n	800df22 <_dtoa_r+0xa72>
 800df48:	4659      	mov	r1, fp
 800df4a:	2201      	movs	r2, #1
 800df4c:	4620      	mov	r0, r4
 800df4e:	9301      	str	r3, [sp, #4]
 800df50:	f000 fcd8 	bl	800e904 <__lshift>
 800df54:	4631      	mov	r1, r6
 800df56:	4683      	mov	fp, r0
 800df58:	f000 fd40 	bl	800e9dc <__mcmp>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	dc02      	bgt.n	800df68 <_dtoa_r+0xab8>
 800df62:	d1de      	bne.n	800df22 <_dtoa_r+0xa72>
 800df64:	07da      	lsls	r2, r3, #31
 800df66:	d5dc      	bpl.n	800df22 <_dtoa_r+0xa72>
 800df68:	2b39      	cmp	r3, #57	; 0x39
 800df6a:	d1d8      	bne.n	800df1e <_dtoa_r+0xa6e>
 800df6c:	9a02      	ldr	r2, [sp, #8]
 800df6e:	2339      	movs	r3, #57	; 0x39
 800df70:	7013      	strb	r3, [r2, #0]
 800df72:	462b      	mov	r3, r5
 800df74:	461d      	mov	r5, r3
 800df76:	3b01      	subs	r3, #1
 800df78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df7c:	2a39      	cmp	r2, #57	; 0x39
 800df7e:	d050      	beq.n	800e022 <_dtoa_r+0xb72>
 800df80:	3201      	adds	r2, #1
 800df82:	701a      	strb	r2, [r3, #0]
 800df84:	e745      	b.n	800de12 <_dtoa_r+0x962>
 800df86:	2a00      	cmp	r2, #0
 800df88:	dd03      	ble.n	800df92 <_dtoa_r+0xae2>
 800df8a:	2b39      	cmp	r3, #57	; 0x39
 800df8c:	d0ee      	beq.n	800df6c <_dtoa_r+0xabc>
 800df8e:	3301      	adds	r3, #1
 800df90:	e7c7      	b.n	800df22 <_dtoa_r+0xa72>
 800df92:	9a01      	ldr	r2, [sp, #4]
 800df94:	9907      	ldr	r1, [sp, #28]
 800df96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df9a:	428a      	cmp	r2, r1
 800df9c:	d02a      	beq.n	800dff4 <_dtoa_r+0xb44>
 800df9e:	4659      	mov	r1, fp
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	220a      	movs	r2, #10
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f000 fafd 	bl	800e5a4 <__multadd>
 800dfaa:	45b8      	cmp	r8, r7
 800dfac:	4683      	mov	fp, r0
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	f04f 020a 	mov.w	r2, #10
 800dfb6:	4641      	mov	r1, r8
 800dfb8:	4620      	mov	r0, r4
 800dfba:	d107      	bne.n	800dfcc <_dtoa_r+0xb1c>
 800dfbc:	f000 faf2 	bl	800e5a4 <__multadd>
 800dfc0:	4680      	mov	r8, r0
 800dfc2:	4607      	mov	r7, r0
 800dfc4:	9b01      	ldr	r3, [sp, #4]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	e775      	b.n	800deb8 <_dtoa_r+0xa08>
 800dfcc:	f000 faea 	bl	800e5a4 <__multadd>
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	4680      	mov	r8, r0
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	220a      	movs	r2, #10
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 fae3 	bl	800e5a4 <__multadd>
 800dfde:	4607      	mov	r7, r0
 800dfe0:	e7f0      	b.n	800dfc4 <_dtoa_r+0xb14>
 800dfe2:	f1b9 0f00 	cmp.w	r9, #0
 800dfe6:	9a00      	ldr	r2, [sp, #0]
 800dfe8:	bfcc      	ite	gt
 800dfea:	464d      	movgt	r5, r9
 800dfec:	2501      	movle	r5, #1
 800dfee:	4415      	add	r5, r2
 800dff0:	f04f 0800 	mov.w	r8, #0
 800dff4:	4659      	mov	r1, fp
 800dff6:	2201      	movs	r2, #1
 800dff8:	4620      	mov	r0, r4
 800dffa:	9301      	str	r3, [sp, #4]
 800dffc:	f000 fc82 	bl	800e904 <__lshift>
 800e000:	4631      	mov	r1, r6
 800e002:	4683      	mov	fp, r0
 800e004:	f000 fcea 	bl	800e9dc <__mcmp>
 800e008:	2800      	cmp	r0, #0
 800e00a:	dcb2      	bgt.n	800df72 <_dtoa_r+0xac2>
 800e00c:	d102      	bne.n	800e014 <_dtoa_r+0xb64>
 800e00e:	9b01      	ldr	r3, [sp, #4]
 800e010:	07db      	lsls	r3, r3, #31
 800e012:	d4ae      	bmi.n	800df72 <_dtoa_r+0xac2>
 800e014:	462b      	mov	r3, r5
 800e016:	461d      	mov	r5, r3
 800e018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e01c:	2a30      	cmp	r2, #48	; 0x30
 800e01e:	d0fa      	beq.n	800e016 <_dtoa_r+0xb66>
 800e020:	e6f7      	b.n	800de12 <_dtoa_r+0x962>
 800e022:	9a00      	ldr	r2, [sp, #0]
 800e024:	429a      	cmp	r2, r3
 800e026:	d1a5      	bne.n	800df74 <_dtoa_r+0xac4>
 800e028:	f10a 0a01 	add.w	sl, sl, #1
 800e02c:	2331      	movs	r3, #49	; 0x31
 800e02e:	e779      	b.n	800df24 <_dtoa_r+0xa74>
 800e030:	4b13      	ldr	r3, [pc, #76]	; (800e080 <_dtoa_r+0xbd0>)
 800e032:	f7ff baaf 	b.w	800d594 <_dtoa_r+0xe4>
 800e036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f47f aa86 	bne.w	800d54a <_dtoa_r+0x9a>
 800e03e:	4b11      	ldr	r3, [pc, #68]	; (800e084 <_dtoa_r+0xbd4>)
 800e040:	f7ff baa8 	b.w	800d594 <_dtoa_r+0xe4>
 800e044:	f1b9 0f00 	cmp.w	r9, #0
 800e048:	dc03      	bgt.n	800e052 <_dtoa_r+0xba2>
 800e04a:	9b05      	ldr	r3, [sp, #20]
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	f73f aec9 	bgt.w	800dde4 <_dtoa_r+0x934>
 800e052:	9d00      	ldr	r5, [sp, #0]
 800e054:	4631      	mov	r1, r6
 800e056:	4658      	mov	r0, fp
 800e058:	f7ff f99c 	bl	800d394 <quorem>
 800e05c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e060:	f805 3b01 	strb.w	r3, [r5], #1
 800e064:	9a00      	ldr	r2, [sp, #0]
 800e066:	1aaa      	subs	r2, r5, r2
 800e068:	4591      	cmp	r9, r2
 800e06a:	ddba      	ble.n	800dfe2 <_dtoa_r+0xb32>
 800e06c:	4659      	mov	r1, fp
 800e06e:	2300      	movs	r3, #0
 800e070:	220a      	movs	r2, #10
 800e072:	4620      	mov	r0, r4
 800e074:	f000 fa96 	bl	800e5a4 <__multadd>
 800e078:	4683      	mov	fp, r0
 800e07a:	e7eb      	b.n	800e054 <_dtoa_r+0xba4>
 800e07c:	08012d48 	.word	0x08012d48
 800e080:	08012ca1 	.word	0x08012ca1
 800e084:	08012cc5 	.word	0x08012cc5

0800e088 <__sflush_r>:
 800e088:	898a      	ldrh	r2, [r1, #12]
 800e08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e08e:	4605      	mov	r5, r0
 800e090:	0710      	lsls	r0, r2, #28
 800e092:	460c      	mov	r4, r1
 800e094:	d458      	bmi.n	800e148 <__sflush_r+0xc0>
 800e096:	684b      	ldr	r3, [r1, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	dc05      	bgt.n	800e0a8 <__sflush_r+0x20>
 800e09c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	dc02      	bgt.n	800e0a8 <__sflush_r+0x20>
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0aa:	2e00      	cmp	r6, #0
 800e0ac:	d0f9      	beq.n	800e0a2 <__sflush_r+0x1a>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0b4:	682f      	ldr	r7, [r5, #0]
 800e0b6:	602b      	str	r3, [r5, #0]
 800e0b8:	d032      	beq.n	800e120 <__sflush_r+0x98>
 800e0ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0bc:	89a3      	ldrh	r3, [r4, #12]
 800e0be:	075a      	lsls	r2, r3, #29
 800e0c0:	d505      	bpl.n	800e0ce <__sflush_r+0x46>
 800e0c2:	6863      	ldr	r3, [r4, #4]
 800e0c4:	1ac0      	subs	r0, r0, r3
 800e0c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0c8:	b10b      	cbz	r3, 800e0ce <__sflush_r+0x46>
 800e0ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0cc:	1ac0      	subs	r0, r0, r3
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0d4:	6a21      	ldr	r1, [r4, #32]
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	47b0      	blx	r6
 800e0da:	1c43      	adds	r3, r0, #1
 800e0dc:	89a3      	ldrh	r3, [r4, #12]
 800e0de:	d106      	bne.n	800e0ee <__sflush_r+0x66>
 800e0e0:	6829      	ldr	r1, [r5, #0]
 800e0e2:	291d      	cmp	r1, #29
 800e0e4:	d82c      	bhi.n	800e140 <__sflush_r+0xb8>
 800e0e6:	4a2a      	ldr	r2, [pc, #168]	; (800e190 <__sflush_r+0x108>)
 800e0e8:	40ca      	lsrs	r2, r1
 800e0ea:	07d6      	lsls	r6, r2, #31
 800e0ec:	d528      	bpl.n	800e140 <__sflush_r+0xb8>
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	6062      	str	r2, [r4, #4]
 800e0f2:	04d9      	lsls	r1, r3, #19
 800e0f4:	6922      	ldr	r2, [r4, #16]
 800e0f6:	6022      	str	r2, [r4, #0]
 800e0f8:	d504      	bpl.n	800e104 <__sflush_r+0x7c>
 800e0fa:	1c42      	adds	r2, r0, #1
 800e0fc:	d101      	bne.n	800e102 <__sflush_r+0x7a>
 800e0fe:	682b      	ldr	r3, [r5, #0]
 800e100:	b903      	cbnz	r3, 800e104 <__sflush_r+0x7c>
 800e102:	6560      	str	r0, [r4, #84]	; 0x54
 800e104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e106:	602f      	str	r7, [r5, #0]
 800e108:	2900      	cmp	r1, #0
 800e10a:	d0ca      	beq.n	800e0a2 <__sflush_r+0x1a>
 800e10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e110:	4299      	cmp	r1, r3
 800e112:	d002      	beq.n	800e11a <__sflush_r+0x92>
 800e114:	4628      	mov	r0, r5
 800e116:	f7fe f927 	bl	800c368 <_free_r>
 800e11a:	2000      	movs	r0, #0
 800e11c:	6360      	str	r0, [r4, #52]	; 0x34
 800e11e:	e7c1      	b.n	800e0a4 <__sflush_r+0x1c>
 800e120:	6a21      	ldr	r1, [r4, #32]
 800e122:	2301      	movs	r3, #1
 800e124:	4628      	mov	r0, r5
 800e126:	47b0      	blx	r6
 800e128:	1c41      	adds	r1, r0, #1
 800e12a:	d1c7      	bne.n	800e0bc <__sflush_r+0x34>
 800e12c:	682b      	ldr	r3, [r5, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d0c4      	beq.n	800e0bc <__sflush_r+0x34>
 800e132:	2b1d      	cmp	r3, #29
 800e134:	d001      	beq.n	800e13a <__sflush_r+0xb2>
 800e136:	2b16      	cmp	r3, #22
 800e138:	d101      	bne.n	800e13e <__sflush_r+0xb6>
 800e13a:	602f      	str	r7, [r5, #0]
 800e13c:	e7b1      	b.n	800e0a2 <__sflush_r+0x1a>
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e144:	81a3      	strh	r3, [r4, #12]
 800e146:	e7ad      	b.n	800e0a4 <__sflush_r+0x1c>
 800e148:	690f      	ldr	r7, [r1, #16]
 800e14a:	2f00      	cmp	r7, #0
 800e14c:	d0a9      	beq.n	800e0a2 <__sflush_r+0x1a>
 800e14e:	0793      	lsls	r3, r2, #30
 800e150:	680e      	ldr	r6, [r1, #0]
 800e152:	bf08      	it	eq
 800e154:	694b      	ldreq	r3, [r1, #20]
 800e156:	600f      	str	r7, [r1, #0]
 800e158:	bf18      	it	ne
 800e15a:	2300      	movne	r3, #0
 800e15c:	eba6 0807 	sub.w	r8, r6, r7
 800e160:	608b      	str	r3, [r1, #8]
 800e162:	f1b8 0f00 	cmp.w	r8, #0
 800e166:	dd9c      	ble.n	800e0a2 <__sflush_r+0x1a>
 800e168:	6a21      	ldr	r1, [r4, #32]
 800e16a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e16c:	4643      	mov	r3, r8
 800e16e:	463a      	mov	r2, r7
 800e170:	4628      	mov	r0, r5
 800e172:	47b0      	blx	r6
 800e174:	2800      	cmp	r0, #0
 800e176:	dc06      	bgt.n	800e186 <__sflush_r+0xfe>
 800e178:	89a3      	ldrh	r3, [r4, #12]
 800e17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e17e:	81a3      	strh	r3, [r4, #12]
 800e180:	f04f 30ff 	mov.w	r0, #4294967295
 800e184:	e78e      	b.n	800e0a4 <__sflush_r+0x1c>
 800e186:	4407      	add	r7, r0
 800e188:	eba8 0800 	sub.w	r8, r8, r0
 800e18c:	e7e9      	b.n	800e162 <__sflush_r+0xda>
 800e18e:	bf00      	nop
 800e190:	20400001 	.word	0x20400001

0800e194 <_fflush_r>:
 800e194:	b538      	push	{r3, r4, r5, lr}
 800e196:	690b      	ldr	r3, [r1, #16]
 800e198:	4605      	mov	r5, r0
 800e19a:	460c      	mov	r4, r1
 800e19c:	b913      	cbnz	r3, 800e1a4 <_fflush_r+0x10>
 800e19e:	2500      	movs	r5, #0
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}
 800e1a4:	b118      	cbz	r0, 800e1ae <_fflush_r+0x1a>
 800e1a6:	6983      	ldr	r3, [r0, #24]
 800e1a8:	b90b      	cbnz	r3, 800e1ae <_fflush_r+0x1a>
 800e1aa:	f000 f887 	bl	800e2bc <__sinit>
 800e1ae:	4b14      	ldr	r3, [pc, #80]	; (800e200 <_fflush_r+0x6c>)
 800e1b0:	429c      	cmp	r4, r3
 800e1b2:	d11b      	bne.n	800e1ec <_fflush_r+0x58>
 800e1b4:	686c      	ldr	r4, [r5, #4]
 800e1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d0ef      	beq.n	800e19e <_fflush_r+0xa>
 800e1be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1c0:	07d0      	lsls	r0, r2, #31
 800e1c2:	d404      	bmi.n	800e1ce <_fflush_r+0x3a>
 800e1c4:	0599      	lsls	r1, r3, #22
 800e1c6:	d402      	bmi.n	800e1ce <_fflush_r+0x3a>
 800e1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1ca:	f7fe f88a 	bl	800c2e2 <__retarget_lock_acquire_recursive>
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	f7ff ff59 	bl	800e088 <__sflush_r>
 800e1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1d8:	07da      	lsls	r2, r3, #31
 800e1da:	4605      	mov	r5, r0
 800e1dc:	d4e0      	bmi.n	800e1a0 <_fflush_r+0xc>
 800e1de:	89a3      	ldrh	r3, [r4, #12]
 800e1e0:	059b      	lsls	r3, r3, #22
 800e1e2:	d4dd      	bmi.n	800e1a0 <_fflush_r+0xc>
 800e1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1e6:	f7fe f87e 	bl	800c2e6 <__retarget_lock_release_recursive>
 800e1ea:	e7d9      	b.n	800e1a0 <_fflush_r+0xc>
 800e1ec:	4b05      	ldr	r3, [pc, #20]	; (800e204 <_fflush_r+0x70>)
 800e1ee:	429c      	cmp	r4, r3
 800e1f0:	d101      	bne.n	800e1f6 <_fflush_r+0x62>
 800e1f2:	68ac      	ldr	r4, [r5, #8]
 800e1f4:	e7df      	b.n	800e1b6 <_fflush_r+0x22>
 800e1f6:	4b04      	ldr	r3, [pc, #16]	; (800e208 <_fflush_r+0x74>)
 800e1f8:	429c      	cmp	r4, r3
 800e1fa:	bf08      	it	eq
 800e1fc:	68ec      	ldreq	r4, [r5, #12]
 800e1fe:	e7da      	b.n	800e1b6 <_fflush_r+0x22>
 800e200:	08012d7c 	.word	0x08012d7c
 800e204:	08012d9c 	.word	0x08012d9c
 800e208:	08012d5c 	.word	0x08012d5c

0800e20c <std>:
 800e20c:	2300      	movs	r3, #0
 800e20e:	b510      	push	{r4, lr}
 800e210:	4604      	mov	r4, r0
 800e212:	e9c0 3300 	strd	r3, r3, [r0]
 800e216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e21a:	6083      	str	r3, [r0, #8]
 800e21c:	8181      	strh	r1, [r0, #12]
 800e21e:	6643      	str	r3, [r0, #100]	; 0x64
 800e220:	81c2      	strh	r2, [r0, #14]
 800e222:	6183      	str	r3, [r0, #24]
 800e224:	4619      	mov	r1, r3
 800e226:	2208      	movs	r2, #8
 800e228:	305c      	adds	r0, #92	; 0x5c
 800e22a:	f7fe f895 	bl	800c358 <memset>
 800e22e:	4b05      	ldr	r3, [pc, #20]	; (800e244 <std+0x38>)
 800e230:	6263      	str	r3, [r4, #36]	; 0x24
 800e232:	4b05      	ldr	r3, [pc, #20]	; (800e248 <std+0x3c>)
 800e234:	62a3      	str	r3, [r4, #40]	; 0x28
 800e236:	4b05      	ldr	r3, [pc, #20]	; (800e24c <std+0x40>)
 800e238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e23a:	4b05      	ldr	r3, [pc, #20]	; (800e250 <std+0x44>)
 800e23c:	6224      	str	r4, [r4, #32]
 800e23e:	6323      	str	r3, [r4, #48]	; 0x30
 800e240:	bd10      	pop	{r4, pc}
 800e242:	bf00      	nop
 800e244:	0800eefd 	.word	0x0800eefd
 800e248:	0800ef1f 	.word	0x0800ef1f
 800e24c:	0800ef57 	.word	0x0800ef57
 800e250:	0800ef7b 	.word	0x0800ef7b

0800e254 <_cleanup_r>:
 800e254:	4901      	ldr	r1, [pc, #4]	; (800e25c <_cleanup_r+0x8>)
 800e256:	f000 b8af 	b.w	800e3b8 <_fwalk_reent>
 800e25a:	bf00      	nop
 800e25c:	0800e195 	.word	0x0800e195

0800e260 <__sfmoreglue>:
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	1e4a      	subs	r2, r1, #1
 800e264:	2568      	movs	r5, #104	; 0x68
 800e266:	4355      	muls	r5, r2
 800e268:	460e      	mov	r6, r1
 800e26a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e26e:	f7fe f8cb 	bl	800c408 <_malloc_r>
 800e272:	4604      	mov	r4, r0
 800e274:	b140      	cbz	r0, 800e288 <__sfmoreglue+0x28>
 800e276:	2100      	movs	r1, #0
 800e278:	e9c0 1600 	strd	r1, r6, [r0]
 800e27c:	300c      	adds	r0, #12
 800e27e:	60a0      	str	r0, [r4, #8]
 800e280:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e284:	f7fe f868 	bl	800c358 <memset>
 800e288:	4620      	mov	r0, r4
 800e28a:	bd70      	pop	{r4, r5, r6, pc}

0800e28c <__sfp_lock_acquire>:
 800e28c:	4801      	ldr	r0, [pc, #4]	; (800e294 <__sfp_lock_acquire+0x8>)
 800e28e:	f7fe b828 	b.w	800c2e2 <__retarget_lock_acquire_recursive>
 800e292:	bf00      	nop
 800e294:	20001820 	.word	0x20001820

0800e298 <__sfp_lock_release>:
 800e298:	4801      	ldr	r0, [pc, #4]	; (800e2a0 <__sfp_lock_release+0x8>)
 800e29a:	f7fe b824 	b.w	800c2e6 <__retarget_lock_release_recursive>
 800e29e:	bf00      	nop
 800e2a0:	20001820 	.word	0x20001820

0800e2a4 <__sinit_lock_acquire>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	; (800e2ac <__sinit_lock_acquire+0x8>)
 800e2a6:	f7fe b81c 	b.w	800c2e2 <__retarget_lock_acquire_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	2000181f 	.word	0x2000181f

0800e2b0 <__sinit_lock_release>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__sinit_lock_release+0x8>)
 800e2b2:	f7fe b818 	b.w	800c2e6 <__retarget_lock_release_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	2000181f 	.word	0x2000181f

0800e2bc <__sinit>:
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	4604      	mov	r4, r0
 800e2c0:	f7ff fff0 	bl	800e2a4 <__sinit_lock_acquire>
 800e2c4:	69a3      	ldr	r3, [r4, #24]
 800e2c6:	b11b      	cbz	r3, 800e2d0 <__sinit+0x14>
 800e2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2cc:	f7ff bff0 	b.w	800e2b0 <__sinit_lock_release>
 800e2d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2d4:	6523      	str	r3, [r4, #80]	; 0x50
 800e2d6:	4b13      	ldr	r3, [pc, #76]	; (800e324 <__sinit+0x68>)
 800e2d8:	4a13      	ldr	r2, [pc, #76]	; (800e328 <__sinit+0x6c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2de:	42a3      	cmp	r3, r4
 800e2e0:	bf04      	itt	eq
 800e2e2:	2301      	moveq	r3, #1
 800e2e4:	61a3      	streq	r3, [r4, #24]
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	f000 f820 	bl	800e32c <__sfp>
 800e2ec:	6060      	str	r0, [r4, #4]
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f000 f81c 	bl	800e32c <__sfp>
 800e2f4:	60a0      	str	r0, [r4, #8]
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 f818 	bl	800e32c <__sfp>
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	60e0      	str	r0, [r4, #12]
 800e300:	2104      	movs	r1, #4
 800e302:	6860      	ldr	r0, [r4, #4]
 800e304:	f7ff ff82 	bl	800e20c <std>
 800e308:	68a0      	ldr	r0, [r4, #8]
 800e30a:	2201      	movs	r2, #1
 800e30c:	2109      	movs	r1, #9
 800e30e:	f7ff ff7d 	bl	800e20c <std>
 800e312:	68e0      	ldr	r0, [r4, #12]
 800e314:	2202      	movs	r2, #2
 800e316:	2112      	movs	r1, #18
 800e318:	f7ff ff78 	bl	800e20c <std>
 800e31c:	2301      	movs	r3, #1
 800e31e:	61a3      	str	r3, [r4, #24]
 800e320:	e7d2      	b.n	800e2c8 <__sinit+0xc>
 800e322:	bf00      	nop
 800e324:	08012c7c 	.word	0x08012c7c
 800e328:	0800e255 	.word	0x0800e255

0800e32c <__sfp>:
 800e32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32e:	4607      	mov	r7, r0
 800e330:	f7ff ffac 	bl	800e28c <__sfp_lock_acquire>
 800e334:	4b1e      	ldr	r3, [pc, #120]	; (800e3b0 <__sfp+0x84>)
 800e336:	681e      	ldr	r6, [r3, #0]
 800e338:	69b3      	ldr	r3, [r6, #24]
 800e33a:	b913      	cbnz	r3, 800e342 <__sfp+0x16>
 800e33c:	4630      	mov	r0, r6
 800e33e:	f7ff ffbd 	bl	800e2bc <__sinit>
 800e342:	3648      	adds	r6, #72	; 0x48
 800e344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e348:	3b01      	subs	r3, #1
 800e34a:	d503      	bpl.n	800e354 <__sfp+0x28>
 800e34c:	6833      	ldr	r3, [r6, #0]
 800e34e:	b30b      	cbz	r3, 800e394 <__sfp+0x68>
 800e350:	6836      	ldr	r6, [r6, #0]
 800e352:	e7f7      	b.n	800e344 <__sfp+0x18>
 800e354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e358:	b9d5      	cbnz	r5, 800e390 <__sfp+0x64>
 800e35a:	4b16      	ldr	r3, [pc, #88]	; (800e3b4 <__sfp+0x88>)
 800e35c:	60e3      	str	r3, [r4, #12]
 800e35e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e362:	6665      	str	r5, [r4, #100]	; 0x64
 800e364:	f7fd ffbc 	bl	800c2e0 <__retarget_lock_init_recursive>
 800e368:	f7ff ff96 	bl	800e298 <__sfp_lock_release>
 800e36c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e374:	6025      	str	r5, [r4, #0]
 800e376:	61a5      	str	r5, [r4, #24]
 800e378:	2208      	movs	r2, #8
 800e37a:	4629      	mov	r1, r5
 800e37c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e380:	f7fd ffea 	bl	800c358 <memset>
 800e384:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e388:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e38c:	4620      	mov	r0, r4
 800e38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e390:	3468      	adds	r4, #104	; 0x68
 800e392:	e7d9      	b.n	800e348 <__sfp+0x1c>
 800e394:	2104      	movs	r1, #4
 800e396:	4638      	mov	r0, r7
 800e398:	f7ff ff62 	bl	800e260 <__sfmoreglue>
 800e39c:	4604      	mov	r4, r0
 800e39e:	6030      	str	r0, [r6, #0]
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d1d5      	bne.n	800e350 <__sfp+0x24>
 800e3a4:	f7ff ff78 	bl	800e298 <__sfp_lock_release>
 800e3a8:	230c      	movs	r3, #12
 800e3aa:	603b      	str	r3, [r7, #0]
 800e3ac:	e7ee      	b.n	800e38c <__sfp+0x60>
 800e3ae:	bf00      	nop
 800e3b0:	08012c7c 	.word	0x08012c7c
 800e3b4:	ffff0001 	.word	0xffff0001

0800e3b8 <_fwalk_reent>:
 800e3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3bc:	4606      	mov	r6, r0
 800e3be:	4688      	mov	r8, r1
 800e3c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3c4:	2700      	movs	r7, #0
 800e3c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3ca:	f1b9 0901 	subs.w	r9, r9, #1
 800e3ce:	d505      	bpl.n	800e3dc <_fwalk_reent+0x24>
 800e3d0:	6824      	ldr	r4, [r4, #0]
 800e3d2:	2c00      	cmp	r4, #0
 800e3d4:	d1f7      	bne.n	800e3c6 <_fwalk_reent+0xe>
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3dc:	89ab      	ldrh	r3, [r5, #12]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d907      	bls.n	800e3f2 <_fwalk_reent+0x3a>
 800e3e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	d003      	beq.n	800e3f2 <_fwalk_reent+0x3a>
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	47c0      	blx	r8
 800e3f0:	4307      	orrs	r7, r0
 800e3f2:	3568      	adds	r5, #104	; 0x68
 800e3f4:	e7e9      	b.n	800e3ca <_fwalk_reent+0x12>
	...

0800e3f8 <_localeconv_r>:
 800e3f8:	4800      	ldr	r0, [pc, #0]	; (800e3fc <_localeconv_r+0x4>)
 800e3fa:	4770      	bx	lr
 800e3fc:	20000d1c 	.word	0x20000d1c

0800e400 <__swhatbuf_r>:
 800e400:	b570      	push	{r4, r5, r6, lr}
 800e402:	460e      	mov	r6, r1
 800e404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e408:	2900      	cmp	r1, #0
 800e40a:	b096      	sub	sp, #88	; 0x58
 800e40c:	4614      	mov	r4, r2
 800e40e:	461d      	mov	r5, r3
 800e410:	da07      	bge.n	800e422 <__swhatbuf_r+0x22>
 800e412:	2300      	movs	r3, #0
 800e414:	602b      	str	r3, [r5, #0]
 800e416:	89b3      	ldrh	r3, [r6, #12]
 800e418:	061a      	lsls	r2, r3, #24
 800e41a:	d410      	bmi.n	800e43e <__swhatbuf_r+0x3e>
 800e41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e420:	e00e      	b.n	800e440 <__swhatbuf_r+0x40>
 800e422:	466a      	mov	r2, sp
 800e424:	f000 fdd0 	bl	800efc8 <_fstat_r>
 800e428:	2800      	cmp	r0, #0
 800e42a:	dbf2      	blt.n	800e412 <__swhatbuf_r+0x12>
 800e42c:	9a01      	ldr	r2, [sp, #4]
 800e42e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e432:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e436:	425a      	negs	r2, r3
 800e438:	415a      	adcs	r2, r3
 800e43a:	602a      	str	r2, [r5, #0]
 800e43c:	e7ee      	b.n	800e41c <__swhatbuf_r+0x1c>
 800e43e:	2340      	movs	r3, #64	; 0x40
 800e440:	2000      	movs	r0, #0
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	b016      	add	sp, #88	; 0x58
 800e446:	bd70      	pop	{r4, r5, r6, pc}

0800e448 <__smakebuf_r>:
 800e448:	898b      	ldrh	r3, [r1, #12]
 800e44a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e44c:	079d      	lsls	r5, r3, #30
 800e44e:	4606      	mov	r6, r0
 800e450:	460c      	mov	r4, r1
 800e452:	d507      	bpl.n	800e464 <__smakebuf_r+0x1c>
 800e454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	6123      	str	r3, [r4, #16]
 800e45c:	2301      	movs	r3, #1
 800e45e:	6163      	str	r3, [r4, #20]
 800e460:	b002      	add	sp, #8
 800e462:	bd70      	pop	{r4, r5, r6, pc}
 800e464:	ab01      	add	r3, sp, #4
 800e466:	466a      	mov	r2, sp
 800e468:	f7ff ffca 	bl	800e400 <__swhatbuf_r>
 800e46c:	9900      	ldr	r1, [sp, #0]
 800e46e:	4605      	mov	r5, r0
 800e470:	4630      	mov	r0, r6
 800e472:	f7fd ffc9 	bl	800c408 <_malloc_r>
 800e476:	b948      	cbnz	r0, 800e48c <__smakebuf_r+0x44>
 800e478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47c:	059a      	lsls	r2, r3, #22
 800e47e:	d4ef      	bmi.n	800e460 <__smakebuf_r+0x18>
 800e480:	f023 0303 	bic.w	r3, r3, #3
 800e484:	f043 0302 	orr.w	r3, r3, #2
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	e7e3      	b.n	800e454 <__smakebuf_r+0xc>
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <__smakebuf_r+0x7c>)
 800e48e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e490:	89a3      	ldrh	r3, [r4, #12]
 800e492:	6020      	str	r0, [r4, #0]
 800e494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e498:	81a3      	strh	r3, [r4, #12]
 800e49a:	9b00      	ldr	r3, [sp, #0]
 800e49c:	6163      	str	r3, [r4, #20]
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	6120      	str	r0, [r4, #16]
 800e4a2:	b15b      	cbz	r3, 800e4bc <__smakebuf_r+0x74>
 800e4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f000 fd9f 	bl	800efec <_isatty_r>
 800e4ae:	b128      	cbz	r0, 800e4bc <__smakebuf_r+0x74>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	f023 0303 	bic.w	r3, r3, #3
 800e4b6:	f043 0301 	orr.w	r3, r3, #1
 800e4ba:	81a3      	strh	r3, [r4, #12]
 800e4bc:	89a0      	ldrh	r0, [r4, #12]
 800e4be:	4305      	orrs	r5, r0
 800e4c0:	81a5      	strh	r5, [r4, #12]
 800e4c2:	e7cd      	b.n	800e460 <__smakebuf_r+0x18>
 800e4c4:	0800e255 	.word	0x0800e255

0800e4c8 <__malloc_lock>:
 800e4c8:	4801      	ldr	r0, [pc, #4]	; (800e4d0 <__malloc_lock+0x8>)
 800e4ca:	f7fd bf0a 	b.w	800c2e2 <__retarget_lock_acquire_recursive>
 800e4ce:	bf00      	nop
 800e4d0:	2000181c 	.word	0x2000181c

0800e4d4 <__malloc_unlock>:
 800e4d4:	4801      	ldr	r0, [pc, #4]	; (800e4dc <__malloc_unlock+0x8>)
 800e4d6:	f7fd bf06 	b.w	800c2e6 <__retarget_lock_release_recursive>
 800e4da:	bf00      	nop
 800e4dc:	2000181c 	.word	0x2000181c

0800e4e0 <_Balloc>:
 800e4e0:	b570      	push	{r4, r5, r6, lr}
 800e4e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	b976      	cbnz	r6, 800e508 <_Balloc+0x28>
 800e4ea:	2010      	movs	r0, #16
 800e4ec:	f7fd fefc 	bl	800c2e8 <malloc>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	6260      	str	r0, [r4, #36]	; 0x24
 800e4f4:	b920      	cbnz	r0, 800e500 <_Balloc+0x20>
 800e4f6:	4b18      	ldr	r3, [pc, #96]	; (800e558 <_Balloc+0x78>)
 800e4f8:	4818      	ldr	r0, [pc, #96]	; (800e55c <_Balloc+0x7c>)
 800e4fa:	2166      	movs	r1, #102	; 0x66
 800e4fc:	f7fd fe90 	bl	800c220 <__assert_func>
 800e500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e504:	6006      	str	r6, [r0, #0]
 800e506:	60c6      	str	r6, [r0, #12]
 800e508:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e50a:	68f3      	ldr	r3, [r6, #12]
 800e50c:	b183      	cbz	r3, 800e530 <_Balloc+0x50>
 800e50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e516:	b9b8      	cbnz	r0, 800e548 <_Balloc+0x68>
 800e518:	2101      	movs	r1, #1
 800e51a:	fa01 f605 	lsl.w	r6, r1, r5
 800e51e:	1d72      	adds	r2, r6, #5
 800e520:	0092      	lsls	r2, r2, #2
 800e522:	4620      	mov	r0, r4
 800e524:	f000 fb5a 	bl	800ebdc <_calloc_r>
 800e528:	b160      	cbz	r0, 800e544 <_Balloc+0x64>
 800e52a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e52e:	e00e      	b.n	800e54e <_Balloc+0x6e>
 800e530:	2221      	movs	r2, #33	; 0x21
 800e532:	2104      	movs	r1, #4
 800e534:	4620      	mov	r0, r4
 800e536:	f000 fb51 	bl	800ebdc <_calloc_r>
 800e53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e53c:	60f0      	str	r0, [r6, #12]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1e4      	bne.n	800e50e <_Balloc+0x2e>
 800e544:	2000      	movs	r0, #0
 800e546:	bd70      	pop	{r4, r5, r6, pc}
 800e548:	6802      	ldr	r2, [r0, #0]
 800e54a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e54e:	2300      	movs	r3, #0
 800e550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e554:	e7f7      	b.n	800e546 <_Balloc+0x66>
 800e556:	bf00      	nop
 800e558:	08012cd2 	.word	0x08012cd2
 800e55c:	08012dbc 	.word	0x08012dbc

0800e560 <_Bfree>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e564:	4605      	mov	r5, r0
 800e566:	460c      	mov	r4, r1
 800e568:	b976      	cbnz	r6, 800e588 <_Bfree+0x28>
 800e56a:	2010      	movs	r0, #16
 800e56c:	f7fd febc 	bl	800c2e8 <malloc>
 800e570:	4602      	mov	r2, r0
 800e572:	6268      	str	r0, [r5, #36]	; 0x24
 800e574:	b920      	cbnz	r0, 800e580 <_Bfree+0x20>
 800e576:	4b09      	ldr	r3, [pc, #36]	; (800e59c <_Bfree+0x3c>)
 800e578:	4809      	ldr	r0, [pc, #36]	; (800e5a0 <_Bfree+0x40>)
 800e57a:	218a      	movs	r1, #138	; 0x8a
 800e57c:	f7fd fe50 	bl	800c220 <__assert_func>
 800e580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e584:	6006      	str	r6, [r0, #0]
 800e586:	60c6      	str	r6, [r0, #12]
 800e588:	b13c      	cbz	r4, 800e59a <_Bfree+0x3a>
 800e58a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e58c:	6862      	ldr	r2, [r4, #4]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e594:	6021      	str	r1, [r4, #0]
 800e596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e59a:	bd70      	pop	{r4, r5, r6, pc}
 800e59c:	08012cd2 	.word	0x08012cd2
 800e5a0:	08012dbc 	.word	0x08012dbc

0800e5a4 <__multadd>:
 800e5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a8:	690e      	ldr	r6, [r1, #16]
 800e5aa:	4607      	mov	r7, r0
 800e5ac:	4698      	mov	r8, r3
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	f101 0014 	add.w	r0, r1, #20
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	6805      	ldr	r5, [r0, #0]
 800e5b8:	b2a9      	uxth	r1, r5
 800e5ba:	fb02 8101 	mla	r1, r2, r1, r8
 800e5be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e5c2:	0c2d      	lsrs	r5, r5, #16
 800e5c4:	fb02 c505 	mla	r5, r2, r5, ip
 800e5c8:	b289      	uxth	r1, r1
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e5d0:	429e      	cmp	r6, r3
 800e5d2:	f840 1b04 	str.w	r1, [r0], #4
 800e5d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e5da:	dcec      	bgt.n	800e5b6 <__multadd+0x12>
 800e5dc:	f1b8 0f00 	cmp.w	r8, #0
 800e5e0:	d022      	beq.n	800e628 <__multadd+0x84>
 800e5e2:	68a3      	ldr	r3, [r4, #8]
 800e5e4:	42b3      	cmp	r3, r6
 800e5e6:	dc19      	bgt.n	800e61c <__multadd+0x78>
 800e5e8:	6861      	ldr	r1, [r4, #4]
 800e5ea:	4638      	mov	r0, r7
 800e5ec:	3101      	adds	r1, #1
 800e5ee:	f7ff ff77 	bl	800e4e0 <_Balloc>
 800e5f2:	4605      	mov	r5, r0
 800e5f4:	b928      	cbnz	r0, 800e602 <__multadd+0x5e>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <__multadd+0x8c>)
 800e5fa:	480e      	ldr	r0, [pc, #56]	; (800e634 <__multadd+0x90>)
 800e5fc:	21b5      	movs	r1, #181	; 0xb5
 800e5fe:	f7fd fe0f 	bl	800c220 <__assert_func>
 800e602:	6922      	ldr	r2, [r4, #16]
 800e604:	3202      	adds	r2, #2
 800e606:	f104 010c 	add.w	r1, r4, #12
 800e60a:	0092      	lsls	r2, r2, #2
 800e60c:	300c      	adds	r0, #12
 800e60e:	f7fd fe7b 	bl	800c308 <memcpy>
 800e612:	4621      	mov	r1, r4
 800e614:	4638      	mov	r0, r7
 800e616:	f7ff ffa3 	bl	800e560 <_Bfree>
 800e61a:	462c      	mov	r4, r5
 800e61c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e620:	3601      	adds	r6, #1
 800e622:	f8c3 8014 	str.w	r8, [r3, #20]
 800e626:	6126      	str	r6, [r4, #16]
 800e628:	4620      	mov	r0, r4
 800e62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62e:	bf00      	nop
 800e630:	08012d48 	.word	0x08012d48
 800e634:	08012dbc 	.word	0x08012dbc

0800e638 <__hi0bits>:
 800e638:	0c03      	lsrs	r3, r0, #16
 800e63a:	041b      	lsls	r3, r3, #16
 800e63c:	b9d3      	cbnz	r3, 800e674 <__hi0bits+0x3c>
 800e63e:	0400      	lsls	r0, r0, #16
 800e640:	2310      	movs	r3, #16
 800e642:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e646:	bf04      	itt	eq
 800e648:	0200      	lsleq	r0, r0, #8
 800e64a:	3308      	addeq	r3, #8
 800e64c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e650:	bf04      	itt	eq
 800e652:	0100      	lsleq	r0, r0, #4
 800e654:	3304      	addeq	r3, #4
 800e656:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e65a:	bf04      	itt	eq
 800e65c:	0080      	lsleq	r0, r0, #2
 800e65e:	3302      	addeq	r3, #2
 800e660:	2800      	cmp	r0, #0
 800e662:	db05      	blt.n	800e670 <__hi0bits+0x38>
 800e664:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e668:	f103 0301 	add.w	r3, r3, #1
 800e66c:	bf08      	it	eq
 800e66e:	2320      	moveq	r3, #32
 800e670:	4618      	mov	r0, r3
 800e672:	4770      	bx	lr
 800e674:	2300      	movs	r3, #0
 800e676:	e7e4      	b.n	800e642 <__hi0bits+0xa>

0800e678 <__lo0bits>:
 800e678:	6803      	ldr	r3, [r0, #0]
 800e67a:	f013 0207 	ands.w	r2, r3, #7
 800e67e:	4601      	mov	r1, r0
 800e680:	d00b      	beq.n	800e69a <__lo0bits+0x22>
 800e682:	07da      	lsls	r2, r3, #31
 800e684:	d424      	bmi.n	800e6d0 <__lo0bits+0x58>
 800e686:	0798      	lsls	r0, r3, #30
 800e688:	bf49      	itett	mi
 800e68a:	085b      	lsrmi	r3, r3, #1
 800e68c:	089b      	lsrpl	r3, r3, #2
 800e68e:	2001      	movmi	r0, #1
 800e690:	600b      	strmi	r3, [r1, #0]
 800e692:	bf5c      	itt	pl
 800e694:	600b      	strpl	r3, [r1, #0]
 800e696:	2002      	movpl	r0, #2
 800e698:	4770      	bx	lr
 800e69a:	b298      	uxth	r0, r3
 800e69c:	b9b0      	cbnz	r0, 800e6cc <__lo0bits+0x54>
 800e69e:	0c1b      	lsrs	r3, r3, #16
 800e6a0:	2010      	movs	r0, #16
 800e6a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e6a6:	bf04      	itt	eq
 800e6a8:	0a1b      	lsreq	r3, r3, #8
 800e6aa:	3008      	addeq	r0, #8
 800e6ac:	071a      	lsls	r2, r3, #28
 800e6ae:	bf04      	itt	eq
 800e6b0:	091b      	lsreq	r3, r3, #4
 800e6b2:	3004      	addeq	r0, #4
 800e6b4:	079a      	lsls	r2, r3, #30
 800e6b6:	bf04      	itt	eq
 800e6b8:	089b      	lsreq	r3, r3, #2
 800e6ba:	3002      	addeq	r0, #2
 800e6bc:	07da      	lsls	r2, r3, #31
 800e6be:	d403      	bmi.n	800e6c8 <__lo0bits+0x50>
 800e6c0:	085b      	lsrs	r3, r3, #1
 800e6c2:	f100 0001 	add.w	r0, r0, #1
 800e6c6:	d005      	beq.n	800e6d4 <__lo0bits+0x5c>
 800e6c8:	600b      	str	r3, [r1, #0]
 800e6ca:	4770      	bx	lr
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	e7e8      	b.n	800e6a2 <__lo0bits+0x2a>
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	4770      	bx	lr
 800e6d4:	2020      	movs	r0, #32
 800e6d6:	4770      	bx	lr

0800e6d8 <__i2b>:
 800e6d8:	b510      	push	{r4, lr}
 800e6da:	460c      	mov	r4, r1
 800e6dc:	2101      	movs	r1, #1
 800e6de:	f7ff feff 	bl	800e4e0 <_Balloc>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	b928      	cbnz	r0, 800e6f2 <__i2b+0x1a>
 800e6e6:	4b05      	ldr	r3, [pc, #20]	; (800e6fc <__i2b+0x24>)
 800e6e8:	4805      	ldr	r0, [pc, #20]	; (800e700 <__i2b+0x28>)
 800e6ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e6ee:	f7fd fd97 	bl	800c220 <__assert_func>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	6144      	str	r4, [r0, #20]
 800e6f6:	6103      	str	r3, [r0, #16]
 800e6f8:	bd10      	pop	{r4, pc}
 800e6fa:	bf00      	nop
 800e6fc:	08012d48 	.word	0x08012d48
 800e700:	08012dbc 	.word	0x08012dbc

0800e704 <__multiply>:
 800e704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e708:	4614      	mov	r4, r2
 800e70a:	690a      	ldr	r2, [r1, #16]
 800e70c:	6923      	ldr	r3, [r4, #16]
 800e70e:	429a      	cmp	r2, r3
 800e710:	bfb8      	it	lt
 800e712:	460b      	movlt	r3, r1
 800e714:	460d      	mov	r5, r1
 800e716:	bfbc      	itt	lt
 800e718:	4625      	movlt	r5, r4
 800e71a:	461c      	movlt	r4, r3
 800e71c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e720:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e724:	68ab      	ldr	r3, [r5, #8]
 800e726:	6869      	ldr	r1, [r5, #4]
 800e728:	eb0a 0709 	add.w	r7, sl, r9
 800e72c:	42bb      	cmp	r3, r7
 800e72e:	b085      	sub	sp, #20
 800e730:	bfb8      	it	lt
 800e732:	3101      	addlt	r1, #1
 800e734:	f7ff fed4 	bl	800e4e0 <_Balloc>
 800e738:	b930      	cbnz	r0, 800e748 <__multiply+0x44>
 800e73a:	4602      	mov	r2, r0
 800e73c:	4b42      	ldr	r3, [pc, #264]	; (800e848 <__multiply+0x144>)
 800e73e:	4843      	ldr	r0, [pc, #268]	; (800e84c <__multiply+0x148>)
 800e740:	f240 115d 	movw	r1, #349	; 0x15d
 800e744:	f7fd fd6c 	bl	800c220 <__assert_func>
 800e748:	f100 0614 	add.w	r6, r0, #20
 800e74c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e750:	4633      	mov	r3, r6
 800e752:	2200      	movs	r2, #0
 800e754:	4543      	cmp	r3, r8
 800e756:	d31e      	bcc.n	800e796 <__multiply+0x92>
 800e758:	f105 0c14 	add.w	ip, r5, #20
 800e75c:	f104 0314 	add.w	r3, r4, #20
 800e760:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e764:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e768:	9202      	str	r2, [sp, #8]
 800e76a:	ebac 0205 	sub.w	r2, ip, r5
 800e76e:	3a15      	subs	r2, #21
 800e770:	f022 0203 	bic.w	r2, r2, #3
 800e774:	3204      	adds	r2, #4
 800e776:	f105 0115 	add.w	r1, r5, #21
 800e77a:	458c      	cmp	ip, r1
 800e77c:	bf38      	it	cc
 800e77e:	2204      	movcc	r2, #4
 800e780:	9201      	str	r2, [sp, #4]
 800e782:	9a02      	ldr	r2, [sp, #8]
 800e784:	9303      	str	r3, [sp, #12]
 800e786:	429a      	cmp	r2, r3
 800e788:	d808      	bhi.n	800e79c <__multiply+0x98>
 800e78a:	2f00      	cmp	r7, #0
 800e78c:	dc55      	bgt.n	800e83a <__multiply+0x136>
 800e78e:	6107      	str	r7, [r0, #16]
 800e790:	b005      	add	sp, #20
 800e792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e796:	f843 2b04 	str.w	r2, [r3], #4
 800e79a:	e7db      	b.n	800e754 <__multiply+0x50>
 800e79c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e7a0:	f1ba 0f00 	cmp.w	sl, #0
 800e7a4:	d020      	beq.n	800e7e8 <__multiply+0xe4>
 800e7a6:	f105 0e14 	add.w	lr, r5, #20
 800e7aa:	46b1      	mov	r9, r6
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e7b2:	f8d9 b000 	ldr.w	fp, [r9]
 800e7b6:	b2a1      	uxth	r1, r4
 800e7b8:	fa1f fb8b 	uxth.w	fp, fp
 800e7bc:	fb0a b101 	mla	r1, sl, r1, fp
 800e7c0:	4411      	add	r1, r2
 800e7c2:	f8d9 2000 	ldr.w	r2, [r9]
 800e7c6:	0c24      	lsrs	r4, r4, #16
 800e7c8:	0c12      	lsrs	r2, r2, #16
 800e7ca:	fb0a 2404 	mla	r4, sl, r4, r2
 800e7ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e7d2:	b289      	uxth	r1, r1
 800e7d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e7d8:	45f4      	cmp	ip, lr
 800e7da:	f849 1b04 	str.w	r1, [r9], #4
 800e7de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e7e2:	d8e4      	bhi.n	800e7ae <__multiply+0xaa>
 800e7e4:	9901      	ldr	r1, [sp, #4]
 800e7e6:	5072      	str	r2, [r6, r1]
 800e7e8:	9a03      	ldr	r2, [sp, #12]
 800e7ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	f1b9 0f00 	cmp.w	r9, #0
 800e7f4:	d01f      	beq.n	800e836 <__multiply+0x132>
 800e7f6:	6834      	ldr	r4, [r6, #0]
 800e7f8:	f105 0114 	add.w	r1, r5, #20
 800e7fc:	46b6      	mov	lr, r6
 800e7fe:	f04f 0a00 	mov.w	sl, #0
 800e802:	880a      	ldrh	r2, [r1, #0]
 800e804:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e808:	fb09 b202 	mla	r2, r9, r2, fp
 800e80c:	4492      	add	sl, r2
 800e80e:	b2a4      	uxth	r4, r4
 800e810:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e814:	f84e 4b04 	str.w	r4, [lr], #4
 800e818:	f851 4b04 	ldr.w	r4, [r1], #4
 800e81c:	f8be 2000 	ldrh.w	r2, [lr]
 800e820:	0c24      	lsrs	r4, r4, #16
 800e822:	fb09 2404 	mla	r4, r9, r4, r2
 800e826:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e82a:	458c      	cmp	ip, r1
 800e82c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e830:	d8e7      	bhi.n	800e802 <__multiply+0xfe>
 800e832:	9a01      	ldr	r2, [sp, #4]
 800e834:	50b4      	str	r4, [r6, r2]
 800e836:	3604      	adds	r6, #4
 800e838:	e7a3      	b.n	800e782 <__multiply+0x7e>
 800e83a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1a5      	bne.n	800e78e <__multiply+0x8a>
 800e842:	3f01      	subs	r7, #1
 800e844:	e7a1      	b.n	800e78a <__multiply+0x86>
 800e846:	bf00      	nop
 800e848:	08012d48 	.word	0x08012d48
 800e84c:	08012dbc 	.word	0x08012dbc

0800e850 <__pow5mult>:
 800e850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e854:	4615      	mov	r5, r2
 800e856:	f012 0203 	ands.w	r2, r2, #3
 800e85a:	4606      	mov	r6, r0
 800e85c:	460f      	mov	r7, r1
 800e85e:	d007      	beq.n	800e870 <__pow5mult+0x20>
 800e860:	4c25      	ldr	r4, [pc, #148]	; (800e8f8 <__pow5mult+0xa8>)
 800e862:	3a01      	subs	r2, #1
 800e864:	2300      	movs	r3, #0
 800e866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e86a:	f7ff fe9b 	bl	800e5a4 <__multadd>
 800e86e:	4607      	mov	r7, r0
 800e870:	10ad      	asrs	r5, r5, #2
 800e872:	d03d      	beq.n	800e8f0 <__pow5mult+0xa0>
 800e874:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e876:	b97c      	cbnz	r4, 800e898 <__pow5mult+0x48>
 800e878:	2010      	movs	r0, #16
 800e87a:	f7fd fd35 	bl	800c2e8 <malloc>
 800e87e:	4602      	mov	r2, r0
 800e880:	6270      	str	r0, [r6, #36]	; 0x24
 800e882:	b928      	cbnz	r0, 800e890 <__pow5mult+0x40>
 800e884:	4b1d      	ldr	r3, [pc, #116]	; (800e8fc <__pow5mult+0xac>)
 800e886:	481e      	ldr	r0, [pc, #120]	; (800e900 <__pow5mult+0xb0>)
 800e888:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e88c:	f7fd fcc8 	bl	800c220 <__assert_func>
 800e890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e894:	6004      	str	r4, [r0, #0]
 800e896:	60c4      	str	r4, [r0, #12]
 800e898:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e89c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8a0:	b94c      	cbnz	r4, 800e8b6 <__pow5mult+0x66>
 800e8a2:	f240 2171 	movw	r1, #625	; 0x271
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	f7ff ff16 	bl	800e6d8 <__i2b>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	6003      	str	r3, [r0, #0]
 800e8b6:	f04f 0900 	mov.w	r9, #0
 800e8ba:	07eb      	lsls	r3, r5, #31
 800e8bc:	d50a      	bpl.n	800e8d4 <__pow5mult+0x84>
 800e8be:	4639      	mov	r1, r7
 800e8c0:	4622      	mov	r2, r4
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f7ff ff1e 	bl	800e704 <__multiply>
 800e8c8:	4639      	mov	r1, r7
 800e8ca:	4680      	mov	r8, r0
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	f7ff fe47 	bl	800e560 <_Bfree>
 800e8d2:	4647      	mov	r7, r8
 800e8d4:	106d      	asrs	r5, r5, #1
 800e8d6:	d00b      	beq.n	800e8f0 <__pow5mult+0xa0>
 800e8d8:	6820      	ldr	r0, [r4, #0]
 800e8da:	b938      	cbnz	r0, 800e8ec <__pow5mult+0x9c>
 800e8dc:	4622      	mov	r2, r4
 800e8de:	4621      	mov	r1, r4
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	f7ff ff0f 	bl	800e704 <__multiply>
 800e8e6:	6020      	str	r0, [r4, #0]
 800e8e8:	f8c0 9000 	str.w	r9, [r0]
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	e7e4      	b.n	800e8ba <__pow5mult+0x6a>
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8f6:	bf00      	nop
 800e8f8:	08012f10 	.word	0x08012f10
 800e8fc:	08012cd2 	.word	0x08012cd2
 800e900:	08012dbc 	.word	0x08012dbc

0800e904 <__lshift>:
 800e904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e908:	460c      	mov	r4, r1
 800e90a:	6849      	ldr	r1, [r1, #4]
 800e90c:	6923      	ldr	r3, [r4, #16]
 800e90e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e912:	68a3      	ldr	r3, [r4, #8]
 800e914:	4607      	mov	r7, r0
 800e916:	4691      	mov	r9, r2
 800e918:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e91c:	f108 0601 	add.w	r6, r8, #1
 800e920:	42b3      	cmp	r3, r6
 800e922:	db0b      	blt.n	800e93c <__lshift+0x38>
 800e924:	4638      	mov	r0, r7
 800e926:	f7ff fddb 	bl	800e4e0 <_Balloc>
 800e92a:	4605      	mov	r5, r0
 800e92c:	b948      	cbnz	r0, 800e942 <__lshift+0x3e>
 800e92e:	4602      	mov	r2, r0
 800e930:	4b28      	ldr	r3, [pc, #160]	; (800e9d4 <__lshift+0xd0>)
 800e932:	4829      	ldr	r0, [pc, #164]	; (800e9d8 <__lshift+0xd4>)
 800e934:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e938:	f7fd fc72 	bl	800c220 <__assert_func>
 800e93c:	3101      	adds	r1, #1
 800e93e:	005b      	lsls	r3, r3, #1
 800e940:	e7ee      	b.n	800e920 <__lshift+0x1c>
 800e942:	2300      	movs	r3, #0
 800e944:	f100 0114 	add.w	r1, r0, #20
 800e948:	f100 0210 	add.w	r2, r0, #16
 800e94c:	4618      	mov	r0, r3
 800e94e:	4553      	cmp	r3, sl
 800e950:	db33      	blt.n	800e9ba <__lshift+0xb6>
 800e952:	6920      	ldr	r0, [r4, #16]
 800e954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e958:	f104 0314 	add.w	r3, r4, #20
 800e95c:	f019 091f 	ands.w	r9, r9, #31
 800e960:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e964:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e968:	d02b      	beq.n	800e9c2 <__lshift+0xbe>
 800e96a:	f1c9 0e20 	rsb	lr, r9, #32
 800e96e:	468a      	mov	sl, r1
 800e970:	2200      	movs	r2, #0
 800e972:	6818      	ldr	r0, [r3, #0]
 800e974:	fa00 f009 	lsl.w	r0, r0, r9
 800e978:	4302      	orrs	r2, r0
 800e97a:	f84a 2b04 	str.w	r2, [sl], #4
 800e97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e982:	459c      	cmp	ip, r3
 800e984:	fa22 f20e 	lsr.w	r2, r2, lr
 800e988:	d8f3      	bhi.n	800e972 <__lshift+0x6e>
 800e98a:	ebac 0304 	sub.w	r3, ip, r4
 800e98e:	3b15      	subs	r3, #21
 800e990:	f023 0303 	bic.w	r3, r3, #3
 800e994:	3304      	adds	r3, #4
 800e996:	f104 0015 	add.w	r0, r4, #21
 800e99a:	4584      	cmp	ip, r0
 800e99c:	bf38      	it	cc
 800e99e:	2304      	movcc	r3, #4
 800e9a0:	50ca      	str	r2, [r1, r3]
 800e9a2:	b10a      	cbz	r2, 800e9a8 <__lshift+0xa4>
 800e9a4:	f108 0602 	add.w	r6, r8, #2
 800e9a8:	3e01      	subs	r6, #1
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	612e      	str	r6, [r5, #16]
 800e9ae:	4621      	mov	r1, r4
 800e9b0:	f7ff fdd6 	bl	800e560 <_Bfree>
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9be:	3301      	adds	r3, #1
 800e9c0:	e7c5      	b.n	800e94e <__lshift+0x4a>
 800e9c2:	3904      	subs	r1, #4
 800e9c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9cc:	459c      	cmp	ip, r3
 800e9ce:	d8f9      	bhi.n	800e9c4 <__lshift+0xc0>
 800e9d0:	e7ea      	b.n	800e9a8 <__lshift+0xa4>
 800e9d2:	bf00      	nop
 800e9d4:	08012d48 	.word	0x08012d48
 800e9d8:	08012dbc 	.word	0x08012dbc

0800e9dc <__mcmp>:
 800e9dc:	b530      	push	{r4, r5, lr}
 800e9de:	6902      	ldr	r2, [r0, #16]
 800e9e0:	690c      	ldr	r4, [r1, #16]
 800e9e2:	1b12      	subs	r2, r2, r4
 800e9e4:	d10e      	bne.n	800ea04 <__mcmp+0x28>
 800e9e6:	f100 0314 	add.w	r3, r0, #20
 800e9ea:	3114      	adds	r1, #20
 800e9ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e9f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e9f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e9fc:	42a5      	cmp	r5, r4
 800e9fe:	d003      	beq.n	800ea08 <__mcmp+0x2c>
 800ea00:	d305      	bcc.n	800ea0e <__mcmp+0x32>
 800ea02:	2201      	movs	r2, #1
 800ea04:	4610      	mov	r0, r2
 800ea06:	bd30      	pop	{r4, r5, pc}
 800ea08:	4283      	cmp	r3, r0
 800ea0a:	d3f3      	bcc.n	800e9f4 <__mcmp+0x18>
 800ea0c:	e7fa      	b.n	800ea04 <__mcmp+0x28>
 800ea0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea12:	e7f7      	b.n	800ea04 <__mcmp+0x28>

0800ea14 <__mdiff>:
 800ea14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea18:	460c      	mov	r4, r1
 800ea1a:	4606      	mov	r6, r0
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	4620      	mov	r0, r4
 800ea20:	4617      	mov	r7, r2
 800ea22:	f7ff ffdb 	bl	800e9dc <__mcmp>
 800ea26:	1e05      	subs	r5, r0, #0
 800ea28:	d110      	bne.n	800ea4c <__mdiff+0x38>
 800ea2a:	4629      	mov	r1, r5
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	f7ff fd57 	bl	800e4e0 <_Balloc>
 800ea32:	b930      	cbnz	r0, 800ea42 <__mdiff+0x2e>
 800ea34:	4b39      	ldr	r3, [pc, #228]	; (800eb1c <__mdiff+0x108>)
 800ea36:	4602      	mov	r2, r0
 800ea38:	f240 2132 	movw	r1, #562	; 0x232
 800ea3c:	4838      	ldr	r0, [pc, #224]	; (800eb20 <__mdiff+0x10c>)
 800ea3e:	f7fd fbef 	bl	800c220 <__assert_func>
 800ea42:	2301      	movs	r3, #1
 800ea44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea4c:	bfa4      	itt	ge
 800ea4e:	463b      	movge	r3, r7
 800ea50:	4627      	movge	r7, r4
 800ea52:	4630      	mov	r0, r6
 800ea54:	6879      	ldr	r1, [r7, #4]
 800ea56:	bfa6      	itte	ge
 800ea58:	461c      	movge	r4, r3
 800ea5a:	2500      	movge	r5, #0
 800ea5c:	2501      	movlt	r5, #1
 800ea5e:	f7ff fd3f 	bl	800e4e0 <_Balloc>
 800ea62:	b920      	cbnz	r0, 800ea6e <__mdiff+0x5a>
 800ea64:	4b2d      	ldr	r3, [pc, #180]	; (800eb1c <__mdiff+0x108>)
 800ea66:	4602      	mov	r2, r0
 800ea68:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea6c:	e7e6      	b.n	800ea3c <__mdiff+0x28>
 800ea6e:	693e      	ldr	r6, [r7, #16]
 800ea70:	60c5      	str	r5, [r0, #12]
 800ea72:	6925      	ldr	r5, [r4, #16]
 800ea74:	f107 0114 	add.w	r1, r7, #20
 800ea78:	f104 0914 	add.w	r9, r4, #20
 800ea7c:	f100 0e14 	add.w	lr, r0, #20
 800ea80:	f107 0210 	add.w	r2, r7, #16
 800ea84:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ea88:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ea8c:	46f2      	mov	sl, lr
 800ea8e:	2700      	movs	r7, #0
 800ea90:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea98:	fa1f f883 	uxth.w	r8, r3
 800ea9c:	fa17 f78b 	uxtah	r7, r7, fp
 800eaa0:	0c1b      	lsrs	r3, r3, #16
 800eaa2:	eba7 0808 	sub.w	r8, r7, r8
 800eaa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eaaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eaae:	fa1f f888 	uxth.w	r8, r8
 800eab2:	141f      	asrs	r7, r3, #16
 800eab4:	454d      	cmp	r5, r9
 800eab6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eaba:	f84a 3b04 	str.w	r3, [sl], #4
 800eabe:	d8e7      	bhi.n	800ea90 <__mdiff+0x7c>
 800eac0:	1b2b      	subs	r3, r5, r4
 800eac2:	3b15      	subs	r3, #21
 800eac4:	f023 0303 	bic.w	r3, r3, #3
 800eac8:	3304      	adds	r3, #4
 800eaca:	3415      	adds	r4, #21
 800eacc:	42a5      	cmp	r5, r4
 800eace:	bf38      	it	cc
 800ead0:	2304      	movcc	r3, #4
 800ead2:	4419      	add	r1, r3
 800ead4:	4473      	add	r3, lr
 800ead6:	469e      	mov	lr, r3
 800ead8:	460d      	mov	r5, r1
 800eada:	4565      	cmp	r5, ip
 800eadc:	d30e      	bcc.n	800eafc <__mdiff+0xe8>
 800eade:	f10c 0203 	add.w	r2, ip, #3
 800eae2:	1a52      	subs	r2, r2, r1
 800eae4:	f022 0203 	bic.w	r2, r2, #3
 800eae8:	3903      	subs	r1, #3
 800eaea:	458c      	cmp	ip, r1
 800eaec:	bf38      	it	cc
 800eaee:	2200      	movcc	r2, #0
 800eaf0:	441a      	add	r2, r3
 800eaf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eaf6:	b17b      	cbz	r3, 800eb18 <__mdiff+0x104>
 800eaf8:	6106      	str	r6, [r0, #16]
 800eafa:	e7a5      	b.n	800ea48 <__mdiff+0x34>
 800eafc:	f855 8b04 	ldr.w	r8, [r5], #4
 800eb00:	fa17 f488 	uxtah	r4, r7, r8
 800eb04:	1422      	asrs	r2, r4, #16
 800eb06:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800eb0a:	b2a4      	uxth	r4, r4
 800eb0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800eb10:	f84e 4b04 	str.w	r4, [lr], #4
 800eb14:	1417      	asrs	r7, r2, #16
 800eb16:	e7e0      	b.n	800eada <__mdiff+0xc6>
 800eb18:	3e01      	subs	r6, #1
 800eb1a:	e7ea      	b.n	800eaf2 <__mdiff+0xde>
 800eb1c:	08012d48 	.word	0x08012d48
 800eb20:	08012dbc 	.word	0x08012dbc

0800eb24 <__d2b>:
 800eb24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb28:	4689      	mov	r9, r1
 800eb2a:	2101      	movs	r1, #1
 800eb2c:	ec57 6b10 	vmov	r6, r7, d0
 800eb30:	4690      	mov	r8, r2
 800eb32:	f7ff fcd5 	bl	800e4e0 <_Balloc>
 800eb36:	4604      	mov	r4, r0
 800eb38:	b930      	cbnz	r0, 800eb48 <__d2b+0x24>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	4b25      	ldr	r3, [pc, #148]	; (800ebd4 <__d2b+0xb0>)
 800eb3e:	4826      	ldr	r0, [pc, #152]	; (800ebd8 <__d2b+0xb4>)
 800eb40:	f240 310a 	movw	r1, #778	; 0x30a
 800eb44:	f7fd fb6c 	bl	800c220 <__assert_func>
 800eb48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eb4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb50:	bb35      	cbnz	r5, 800eba0 <__d2b+0x7c>
 800eb52:	2e00      	cmp	r6, #0
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	d028      	beq.n	800ebaa <__d2b+0x86>
 800eb58:	4668      	mov	r0, sp
 800eb5a:	9600      	str	r6, [sp, #0]
 800eb5c:	f7ff fd8c 	bl	800e678 <__lo0bits>
 800eb60:	9900      	ldr	r1, [sp, #0]
 800eb62:	b300      	cbz	r0, 800eba6 <__d2b+0x82>
 800eb64:	9a01      	ldr	r2, [sp, #4]
 800eb66:	f1c0 0320 	rsb	r3, r0, #32
 800eb6a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb6e:	430b      	orrs	r3, r1
 800eb70:	40c2      	lsrs	r2, r0
 800eb72:	6163      	str	r3, [r4, #20]
 800eb74:	9201      	str	r2, [sp, #4]
 800eb76:	9b01      	ldr	r3, [sp, #4]
 800eb78:	61a3      	str	r3, [r4, #24]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bf14      	ite	ne
 800eb7e:	2202      	movne	r2, #2
 800eb80:	2201      	moveq	r2, #1
 800eb82:	6122      	str	r2, [r4, #16]
 800eb84:	b1d5      	cbz	r5, 800ebbc <__d2b+0x98>
 800eb86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb8a:	4405      	add	r5, r0
 800eb8c:	f8c9 5000 	str.w	r5, [r9]
 800eb90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb94:	f8c8 0000 	str.w	r0, [r8]
 800eb98:	4620      	mov	r0, r4
 800eb9a:	b003      	add	sp, #12
 800eb9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eba4:	e7d5      	b.n	800eb52 <__d2b+0x2e>
 800eba6:	6161      	str	r1, [r4, #20]
 800eba8:	e7e5      	b.n	800eb76 <__d2b+0x52>
 800ebaa:	a801      	add	r0, sp, #4
 800ebac:	f7ff fd64 	bl	800e678 <__lo0bits>
 800ebb0:	9b01      	ldr	r3, [sp, #4]
 800ebb2:	6163      	str	r3, [r4, #20]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	6122      	str	r2, [r4, #16]
 800ebb8:	3020      	adds	r0, #32
 800ebba:	e7e3      	b.n	800eb84 <__d2b+0x60>
 800ebbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ebc4:	f8c9 0000 	str.w	r0, [r9]
 800ebc8:	6918      	ldr	r0, [r3, #16]
 800ebca:	f7ff fd35 	bl	800e638 <__hi0bits>
 800ebce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ebd2:	e7df      	b.n	800eb94 <__d2b+0x70>
 800ebd4:	08012d48 	.word	0x08012d48
 800ebd8:	08012dbc 	.word	0x08012dbc

0800ebdc <_calloc_r>:
 800ebdc:	b513      	push	{r0, r1, r4, lr}
 800ebde:	434a      	muls	r2, r1
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	9201      	str	r2, [sp, #4]
 800ebe4:	f7fd fc10 	bl	800c408 <_malloc_r>
 800ebe8:	4604      	mov	r4, r0
 800ebea:	b118      	cbz	r0, 800ebf4 <_calloc_r+0x18>
 800ebec:	9a01      	ldr	r2, [sp, #4]
 800ebee:	2100      	movs	r1, #0
 800ebf0:	f7fd fbb2 	bl	800c358 <memset>
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	b002      	add	sp, #8
 800ebf8:	bd10      	pop	{r4, pc}

0800ebfa <_realloc_r>:
 800ebfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebfc:	4607      	mov	r7, r0
 800ebfe:	4614      	mov	r4, r2
 800ec00:	460e      	mov	r6, r1
 800ec02:	b921      	cbnz	r1, 800ec0e <_realloc_r+0x14>
 800ec04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec08:	4611      	mov	r1, r2
 800ec0a:	f7fd bbfd 	b.w	800c408 <_malloc_r>
 800ec0e:	b922      	cbnz	r2, 800ec1a <_realloc_r+0x20>
 800ec10:	f7fd fbaa 	bl	800c368 <_free_r>
 800ec14:	4625      	mov	r5, r4
 800ec16:	4628      	mov	r0, r5
 800ec18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec1a:	f000 fa1b 	bl	800f054 <_malloc_usable_size_r>
 800ec1e:	42a0      	cmp	r0, r4
 800ec20:	d20f      	bcs.n	800ec42 <_realloc_r+0x48>
 800ec22:	4621      	mov	r1, r4
 800ec24:	4638      	mov	r0, r7
 800ec26:	f7fd fbef 	bl	800c408 <_malloc_r>
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d0f2      	beq.n	800ec16 <_realloc_r+0x1c>
 800ec30:	4631      	mov	r1, r6
 800ec32:	4622      	mov	r2, r4
 800ec34:	f7fd fb68 	bl	800c308 <memcpy>
 800ec38:	4631      	mov	r1, r6
 800ec3a:	4638      	mov	r0, r7
 800ec3c:	f7fd fb94 	bl	800c368 <_free_r>
 800ec40:	e7e9      	b.n	800ec16 <_realloc_r+0x1c>
 800ec42:	4635      	mov	r5, r6
 800ec44:	e7e7      	b.n	800ec16 <_realloc_r+0x1c>

0800ec46 <__ssputs_r>:
 800ec46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec4a:	688e      	ldr	r6, [r1, #8]
 800ec4c:	429e      	cmp	r6, r3
 800ec4e:	4682      	mov	sl, r0
 800ec50:	460c      	mov	r4, r1
 800ec52:	4690      	mov	r8, r2
 800ec54:	461f      	mov	r7, r3
 800ec56:	d838      	bhi.n	800ecca <__ssputs_r+0x84>
 800ec58:	898a      	ldrh	r2, [r1, #12]
 800ec5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec5e:	d032      	beq.n	800ecc6 <__ssputs_r+0x80>
 800ec60:	6825      	ldr	r5, [r4, #0]
 800ec62:	6909      	ldr	r1, [r1, #16]
 800ec64:	eba5 0901 	sub.w	r9, r5, r1
 800ec68:	6965      	ldr	r5, [r4, #20]
 800ec6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec72:	3301      	adds	r3, #1
 800ec74:	444b      	add	r3, r9
 800ec76:	106d      	asrs	r5, r5, #1
 800ec78:	429d      	cmp	r5, r3
 800ec7a:	bf38      	it	cc
 800ec7c:	461d      	movcc	r5, r3
 800ec7e:	0553      	lsls	r3, r2, #21
 800ec80:	d531      	bpl.n	800ece6 <__ssputs_r+0xa0>
 800ec82:	4629      	mov	r1, r5
 800ec84:	f7fd fbc0 	bl	800c408 <_malloc_r>
 800ec88:	4606      	mov	r6, r0
 800ec8a:	b950      	cbnz	r0, 800eca2 <__ssputs_r+0x5c>
 800ec8c:	230c      	movs	r3, #12
 800ec8e:	f8ca 3000 	str.w	r3, [sl]
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec98:	81a3      	strh	r3, [r4, #12]
 800ec9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca2:	6921      	ldr	r1, [r4, #16]
 800eca4:	464a      	mov	r2, r9
 800eca6:	f7fd fb2f 	bl	800c308 <memcpy>
 800ecaa:	89a3      	ldrh	r3, [r4, #12]
 800ecac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecb4:	81a3      	strh	r3, [r4, #12]
 800ecb6:	6126      	str	r6, [r4, #16]
 800ecb8:	6165      	str	r5, [r4, #20]
 800ecba:	444e      	add	r6, r9
 800ecbc:	eba5 0509 	sub.w	r5, r5, r9
 800ecc0:	6026      	str	r6, [r4, #0]
 800ecc2:	60a5      	str	r5, [r4, #8]
 800ecc4:	463e      	mov	r6, r7
 800ecc6:	42be      	cmp	r6, r7
 800ecc8:	d900      	bls.n	800eccc <__ssputs_r+0x86>
 800ecca:	463e      	mov	r6, r7
 800eccc:	4632      	mov	r2, r6
 800ecce:	6820      	ldr	r0, [r4, #0]
 800ecd0:	4641      	mov	r1, r8
 800ecd2:	f7fd fb27 	bl	800c324 <memmove>
 800ecd6:	68a3      	ldr	r3, [r4, #8]
 800ecd8:	6822      	ldr	r2, [r4, #0]
 800ecda:	1b9b      	subs	r3, r3, r6
 800ecdc:	4432      	add	r2, r6
 800ecde:	60a3      	str	r3, [r4, #8]
 800ece0:	6022      	str	r2, [r4, #0]
 800ece2:	2000      	movs	r0, #0
 800ece4:	e7db      	b.n	800ec9e <__ssputs_r+0x58>
 800ece6:	462a      	mov	r2, r5
 800ece8:	f7ff ff87 	bl	800ebfa <_realloc_r>
 800ecec:	4606      	mov	r6, r0
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d1e1      	bne.n	800ecb6 <__ssputs_r+0x70>
 800ecf2:	6921      	ldr	r1, [r4, #16]
 800ecf4:	4650      	mov	r0, sl
 800ecf6:	f7fd fb37 	bl	800c368 <_free_r>
 800ecfa:	e7c7      	b.n	800ec8c <__ssputs_r+0x46>

0800ecfc <_svfiprintf_r>:
 800ecfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	4698      	mov	r8, r3
 800ed02:	898b      	ldrh	r3, [r1, #12]
 800ed04:	061b      	lsls	r3, r3, #24
 800ed06:	b09d      	sub	sp, #116	; 0x74
 800ed08:	4607      	mov	r7, r0
 800ed0a:	460d      	mov	r5, r1
 800ed0c:	4614      	mov	r4, r2
 800ed0e:	d50e      	bpl.n	800ed2e <_svfiprintf_r+0x32>
 800ed10:	690b      	ldr	r3, [r1, #16]
 800ed12:	b963      	cbnz	r3, 800ed2e <_svfiprintf_r+0x32>
 800ed14:	2140      	movs	r1, #64	; 0x40
 800ed16:	f7fd fb77 	bl	800c408 <_malloc_r>
 800ed1a:	6028      	str	r0, [r5, #0]
 800ed1c:	6128      	str	r0, [r5, #16]
 800ed1e:	b920      	cbnz	r0, 800ed2a <_svfiprintf_r+0x2e>
 800ed20:	230c      	movs	r3, #12
 800ed22:	603b      	str	r3, [r7, #0]
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295
 800ed28:	e0d1      	b.n	800eece <_svfiprintf_r+0x1d2>
 800ed2a:	2340      	movs	r3, #64	; 0x40
 800ed2c:	616b      	str	r3, [r5, #20]
 800ed2e:	2300      	movs	r3, #0
 800ed30:	9309      	str	r3, [sp, #36]	; 0x24
 800ed32:	2320      	movs	r3, #32
 800ed34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed3c:	2330      	movs	r3, #48	; 0x30
 800ed3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eee8 <_svfiprintf_r+0x1ec>
 800ed42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed46:	f04f 0901 	mov.w	r9, #1
 800ed4a:	4623      	mov	r3, r4
 800ed4c:	469a      	mov	sl, r3
 800ed4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed52:	b10a      	cbz	r2, 800ed58 <_svfiprintf_r+0x5c>
 800ed54:	2a25      	cmp	r2, #37	; 0x25
 800ed56:	d1f9      	bne.n	800ed4c <_svfiprintf_r+0x50>
 800ed58:	ebba 0b04 	subs.w	fp, sl, r4
 800ed5c:	d00b      	beq.n	800ed76 <_svfiprintf_r+0x7a>
 800ed5e:	465b      	mov	r3, fp
 800ed60:	4622      	mov	r2, r4
 800ed62:	4629      	mov	r1, r5
 800ed64:	4638      	mov	r0, r7
 800ed66:	f7ff ff6e 	bl	800ec46 <__ssputs_r>
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	f000 80aa 	beq.w	800eec4 <_svfiprintf_r+0x1c8>
 800ed70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed72:	445a      	add	r2, fp
 800ed74:	9209      	str	r2, [sp, #36]	; 0x24
 800ed76:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 80a2 	beq.w	800eec4 <_svfiprintf_r+0x1c8>
 800ed80:	2300      	movs	r3, #0
 800ed82:	f04f 32ff 	mov.w	r2, #4294967295
 800ed86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed8a:	f10a 0a01 	add.w	sl, sl, #1
 800ed8e:	9304      	str	r3, [sp, #16]
 800ed90:	9307      	str	r3, [sp, #28]
 800ed92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed96:	931a      	str	r3, [sp, #104]	; 0x68
 800ed98:	4654      	mov	r4, sl
 800ed9a:	2205      	movs	r2, #5
 800ed9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda0:	4851      	ldr	r0, [pc, #324]	; (800eee8 <_svfiprintf_r+0x1ec>)
 800eda2:	f7f1 fa2d 	bl	8000200 <memchr>
 800eda6:	9a04      	ldr	r2, [sp, #16]
 800eda8:	b9d8      	cbnz	r0, 800ede2 <_svfiprintf_r+0xe6>
 800edaa:	06d0      	lsls	r0, r2, #27
 800edac:	bf44      	itt	mi
 800edae:	2320      	movmi	r3, #32
 800edb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb4:	0711      	lsls	r1, r2, #28
 800edb6:	bf44      	itt	mi
 800edb8:	232b      	movmi	r3, #43	; 0x2b
 800edba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edbe:	f89a 3000 	ldrb.w	r3, [sl]
 800edc2:	2b2a      	cmp	r3, #42	; 0x2a
 800edc4:	d015      	beq.n	800edf2 <_svfiprintf_r+0xf6>
 800edc6:	9a07      	ldr	r2, [sp, #28]
 800edc8:	4654      	mov	r4, sl
 800edca:	2000      	movs	r0, #0
 800edcc:	f04f 0c0a 	mov.w	ip, #10
 800edd0:	4621      	mov	r1, r4
 800edd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edd6:	3b30      	subs	r3, #48	; 0x30
 800edd8:	2b09      	cmp	r3, #9
 800edda:	d94e      	bls.n	800ee7a <_svfiprintf_r+0x17e>
 800eddc:	b1b0      	cbz	r0, 800ee0c <_svfiprintf_r+0x110>
 800edde:	9207      	str	r2, [sp, #28]
 800ede0:	e014      	b.n	800ee0c <_svfiprintf_r+0x110>
 800ede2:	eba0 0308 	sub.w	r3, r0, r8
 800ede6:	fa09 f303 	lsl.w	r3, r9, r3
 800edea:	4313      	orrs	r3, r2
 800edec:	9304      	str	r3, [sp, #16]
 800edee:	46a2      	mov	sl, r4
 800edf0:	e7d2      	b.n	800ed98 <_svfiprintf_r+0x9c>
 800edf2:	9b03      	ldr	r3, [sp, #12]
 800edf4:	1d19      	adds	r1, r3, #4
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	9103      	str	r1, [sp, #12]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	bfbb      	ittet	lt
 800edfe:	425b      	neglt	r3, r3
 800ee00:	f042 0202 	orrlt.w	r2, r2, #2
 800ee04:	9307      	strge	r3, [sp, #28]
 800ee06:	9307      	strlt	r3, [sp, #28]
 800ee08:	bfb8      	it	lt
 800ee0a:	9204      	strlt	r2, [sp, #16]
 800ee0c:	7823      	ldrb	r3, [r4, #0]
 800ee0e:	2b2e      	cmp	r3, #46	; 0x2e
 800ee10:	d10c      	bne.n	800ee2c <_svfiprintf_r+0x130>
 800ee12:	7863      	ldrb	r3, [r4, #1]
 800ee14:	2b2a      	cmp	r3, #42	; 0x2a
 800ee16:	d135      	bne.n	800ee84 <_svfiprintf_r+0x188>
 800ee18:	9b03      	ldr	r3, [sp, #12]
 800ee1a:	1d1a      	adds	r2, r3, #4
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	9203      	str	r2, [sp, #12]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	bfb8      	it	lt
 800ee24:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee28:	3402      	adds	r4, #2
 800ee2a:	9305      	str	r3, [sp, #20]
 800ee2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eef8 <_svfiprintf_r+0x1fc>
 800ee30:	7821      	ldrb	r1, [r4, #0]
 800ee32:	2203      	movs	r2, #3
 800ee34:	4650      	mov	r0, sl
 800ee36:	f7f1 f9e3 	bl	8000200 <memchr>
 800ee3a:	b140      	cbz	r0, 800ee4e <_svfiprintf_r+0x152>
 800ee3c:	2340      	movs	r3, #64	; 0x40
 800ee3e:	eba0 000a 	sub.w	r0, r0, sl
 800ee42:	fa03 f000 	lsl.w	r0, r3, r0
 800ee46:	9b04      	ldr	r3, [sp, #16]
 800ee48:	4303      	orrs	r3, r0
 800ee4a:	3401      	adds	r4, #1
 800ee4c:	9304      	str	r3, [sp, #16]
 800ee4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee52:	4826      	ldr	r0, [pc, #152]	; (800eeec <_svfiprintf_r+0x1f0>)
 800ee54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee58:	2206      	movs	r2, #6
 800ee5a:	f7f1 f9d1 	bl	8000200 <memchr>
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d038      	beq.n	800eed4 <_svfiprintf_r+0x1d8>
 800ee62:	4b23      	ldr	r3, [pc, #140]	; (800eef0 <_svfiprintf_r+0x1f4>)
 800ee64:	bb1b      	cbnz	r3, 800eeae <_svfiprintf_r+0x1b2>
 800ee66:	9b03      	ldr	r3, [sp, #12]
 800ee68:	3307      	adds	r3, #7
 800ee6a:	f023 0307 	bic.w	r3, r3, #7
 800ee6e:	3308      	adds	r3, #8
 800ee70:	9303      	str	r3, [sp, #12]
 800ee72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee74:	4433      	add	r3, r6
 800ee76:	9309      	str	r3, [sp, #36]	; 0x24
 800ee78:	e767      	b.n	800ed4a <_svfiprintf_r+0x4e>
 800ee7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee7e:	460c      	mov	r4, r1
 800ee80:	2001      	movs	r0, #1
 800ee82:	e7a5      	b.n	800edd0 <_svfiprintf_r+0xd4>
 800ee84:	2300      	movs	r3, #0
 800ee86:	3401      	adds	r4, #1
 800ee88:	9305      	str	r3, [sp, #20]
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	f04f 0c0a 	mov.w	ip, #10
 800ee90:	4620      	mov	r0, r4
 800ee92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee96:	3a30      	subs	r2, #48	; 0x30
 800ee98:	2a09      	cmp	r2, #9
 800ee9a:	d903      	bls.n	800eea4 <_svfiprintf_r+0x1a8>
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d0c5      	beq.n	800ee2c <_svfiprintf_r+0x130>
 800eea0:	9105      	str	r1, [sp, #20]
 800eea2:	e7c3      	b.n	800ee2c <_svfiprintf_r+0x130>
 800eea4:	fb0c 2101 	mla	r1, ip, r1, r2
 800eea8:	4604      	mov	r4, r0
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e7f0      	b.n	800ee90 <_svfiprintf_r+0x194>
 800eeae:	ab03      	add	r3, sp, #12
 800eeb0:	9300      	str	r3, [sp, #0]
 800eeb2:	462a      	mov	r2, r5
 800eeb4:	4b0f      	ldr	r3, [pc, #60]	; (800eef4 <_svfiprintf_r+0x1f8>)
 800eeb6:	a904      	add	r1, sp, #16
 800eeb8:	4638      	mov	r0, r7
 800eeba:	f7fd fcf9 	bl	800c8b0 <_printf_float>
 800eebe:	1c42      	adds	r2, r0, #1
 800eec0:	4606      	mov	r6, r0
 800eec2:	d1d6      	bne.n	800ee72 <_svfiprintf_r+0x176>
 800eec4:	89ab      	ldrh	r3, [r5, #12]
 800eec6:	065b      	lsls	r3, r3, #25
 800eec8:	f53f af2c 	bmi.w	800ed24 <_svfiprintf_r+0x28>
 800eecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eece:	b01d      	add	sp, #116	; 0x74
 800eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed4:	ab03      	add	r3, sp, #12
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	462a      	mov	r2, r5
 800eeda:	4b06      	ldr	r3, [pc, #24]	; (800eef4 <_svfiprintf_r+0x1f8>)
 800eedc:	a904      	add	r1, sp, #16
 800eede:	4638      	mov	r0, r7
 800eee0:	f7fd ff8a 	bl	800cdf8 <_printf_i>
 800eee4:	e7eb      	b.n	800eebe <_svfiprintf_r+0x1c2>
 800eee6:	bf00      	nop
 800eee8:	08012c80 	.word	0x08012c80
 800eeec:	08012c8a 	.word	0x08012c8a
 800eef0:	0800c8b1 	.word	0x0800c8b1
 800eef4:	0800ec47 	.word	0x0800ec47
 800eef8:	08012c86 	.word	0x08012c86

0800eefc <__sread>:
 800eefc:	b510      	push	{r4, lr}
 800eefe:	460c      	mov	r4, r1
 800ef00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef04:	f000 f8ae 	bl	800f064 <_read_r>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	bfab      	itete	ge
 800ef0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ef10:	181b      	addge	r3, r3, r0
 800ef12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef16:	bfac      	ite	ge
 800ef18:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef1a:	81a3      	strhlt	r3, [r4, #12]
 800ef1c:	bd10      	pop	{r4, pc}

0800ef1e <__swrite>:
 800ef1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef22:	461f      	mov	r7, r3
 800ef24:	898b      	ldrh	r3, [r1, #12]
 800ef26:	05db      	lsls	r3, r3, #23
 800ef28:	4605      	mov	r5, r0
 800ef2a:	460c      	mov	r4, r1
 800ef2c:	4616      	mov	r6, r2
 800ef2e:	d505      	bpl.n	800ef3c <__swrite+0x1e>
 800ef30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef34:	2302      	movs	r3, #2
 800ef36:	2200      	movs	r2, #0
 800ef38:	f000 f868 	bl	800f00c <_lseek_r>
 800ef3c:	89a3      	ldrh	r3, [r4, #12]
 800ef3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef46:	81a3      	strh	r3, [r4, #12]
 800ef48:	4632      	mov	r2, r6
 800ef4a:	463b      	mov	r3, r7
 800ef4c:	4628      	mov	r0, r5
 800ef4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef52:	f000 b817 	b.w	800ef84 <_write_r>

0800ef56 <__sseek>:
 800ef56:	b510      	push	{r4, lr}
 800ef58:	460c      	mov	r4, r1
 800ef5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef5e:	f000 f855 	bl	800f00c <_lseek_r>
 800ef62:	1c43      	adds	r3, r0, #1
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	bf15      	itete	ne
 800ef68:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef72:	81a3      	strheq	r3, [r4, #12]
 800ef74:	bf18      	it	ne
 800ef76:	81a3      	strhne	r3, [r4, #12]
 800ef78:	bd10      	pop	{r4, pc}

0800ef7a <__sclose>:
 800ef7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef7e:	f000 b813 	b.w	800efa8 <_close_r>
	...

0800ef84 <_write_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4d07      	ldr	r5, [pc, #28]	; (800efa4 <_write_r+0x20>)
 800ef88:	4604      	mov	r4, r0
 800ef8a:	4608      	mov	r0, r1
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	2200      	movs	r2, #0
 800ef90:	602a      	str	r2, [r5, #0]
 800ef92:	461a      	mov	r2, r3
 800ef94:	f7f2 ff0b 	bl	8001dae <_write>
 800ef98:	1c43      	adds	r3, r0, #1
 800ef9a:	d102      	bne.n	800efa2 <_write_r+0x1e>
 800ef9c:	682b      	ldr	r3, [r5, #0]
 800ef9e:	b103      	cbz	r3, 800efa2 <_write_r+0x1e>
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	bd38      	pop	{r3, r4, r5, pc}
 800efa4:	20001828 	.word	0x20001828

0800efa8 <_close_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4d06      	ldr	r5, [pc, #24]	; (800efc4 <_close_r+0x1c>)
 800efac:	2300      	movs	r3, #0
 800efae:	4604      	mov	r4, r0
 800efb0:	4608      	mov	r0, r1
 800efb2:	602b      	str	r3, [r5, #0]
 800efb4:	f7f2 ff17 	bl	8001de6 <_close>
 800efb8:	1c43      	adds	r3, r0, #1
 800efba:	d102      	bne.n	800efc2 <_close_r+0x1a>
 800efbc:	682b      	ldr	r3, [r5, #0]
 800efbe:	b103      	cbz	r3, 800efc2 <_close_r+0x1a>
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	20001828 	.word	0x20001828

0800efc8 <_fstat_r>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4d07      	ldr	r5, [pc, #28]	; (800efe8 <_fstat_r+0x20>)
 800efcc:	2300      	movs	r3, #0
 800efce:	4604      	mov	r4, r0
 800efd0:	4608      	mov	r0, r1
 800efd2:	4611      	mov	r1, r2
 800efd4:	602b      	str	r3, [r5, #0]
 800efd6:	f7f2 ff12 	bl	8001dfe <_fstat>
 800efda:	1c43      	adds	r3, r0, #1
 800efdc:	d102      	bne.n	800efe4 <_fstat_r+0x1c>
 800efde:	682b      	ldr	r3, [r5, #0]
 800efe0:	b103      	cbz	r3, 800efe4 <_fstat_r+0x1c>
 800efe2:	6023      	str	r3, [r4, #0]
 800efe4:	bd38      	pop	{r3, r4, r5, pc}
 800efe6:	bf00      	nop
 800efe8:	20001828 	.word	0x20001828

0800efec <_isatty_r>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	4d06      	ldr	r5, [pc, #24]	; (800f008 <_isatty_r+0x1c>)
 800eff0:	2300      	movs	r3, #0
 800eff2:	4604      	mov	r4, r0
 800eff4:	4608      	mov	r0, r1
 800eff6:	602b      	str	r3, [r5, #0]
 800eff8:	f7f2 ff11 	bl	8001e1e <_isatty>
 800effc:	1c43      	adds	r3, r0, #1
 800effe:	d102      	bne.n	800f006 <_isatty_r+0x1a>
 800f000:	682b      	ldr	r3, [r5, #0]
 800f002:	b103      	cbz	r3, 800f006 <_isatty_r+0x1a>
 800f004:	6023      	str	r3, [r4, #0]
 800f006:	bd38      	pop	{r3, r4, r5, pc}
 800f008:	20001828 	.word	0x20001828

0800f00c <_lseek_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4d07      	ldr	r5, [pc, #28]	; (800f02c <_lseek_r+0x20>)
 800f010:	4604      	mov	r4, r0
 800f012:	4608      	mov	r0, r1
 800f014:	4611      	mov	r1, r2
 800f016:	2200      	movs	r2, #0
 800f018:	602a      	str	r2, [r5, #0]
 800f01a:	461a      	mov	r2, r3
 800f01c:	f7f2 ff0a 	bl	8001e34 <_lseek>
 800f020:	1c43      	adds	r3, r0, #1
 800f022:	d102      	bne.n	800f02a <_lseek_r+0x1e>
 800f024:	682b      	ldr	r3, [r5, #0]
 800f026:	b103      	cbz	r3, 800f02a <_lseek_r+0x1e>
 800f028:	6023      	str	r3, [r4, #0]
 800f02a:	bd38      	pop	{r3, r4, r5, pc}
 800f02c:	20001828 	.word	0x20001828

0800f030 <__ascii_mbtowc>:
 800f030:	b082      	sub	sp, #8
 800f032:	b901      	cbnz	r1, 800f036 <__ascii_mbtowc+0x6>
 800f034:	a901      	add	r1, sp, #4
 800f036:	b142      	cbz	r2, 800f04a <__ascii_mbtowc+0x1a>
 800f038:	b14b      	cbz	r3, 800f04e <__ascii_mbtowc+0x1e>
 800f03a:	7813      	ldrb	r3, [r2, #0]
 800f03c:	600b      	str	r3, [r1, #0]
 800f03e:	7812      	ldrb	r2, [r2, #0]
 800f040:	1e10      	subs	r0, r2, #0
 800f042:	bf18      	it	ne
 800f044:	2001      	movne	r0, #1
 800f046:	b002      	add	sp, #8
 800f048:	4770      	bx	lr
 800f04a:	4610      	mov	r0, r2
 800f04c:	e7fb      	b.n	800f046 <__ascii_mbtowc+0x16>
 800f04e:	f06f 0001 	mvn.w	r0, #1
 800f052:	e7f8      	b.n	800f046 <__ascii_mbtowc+0x16>

0800f054 <_malloc_usable_size_r>:
 800f054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f058:	1f18      	subs	r0, r3, #4
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	bfbc      	itt	lt
 800f05e:	580b      	ldrlt	r3, [r1, r0]
 800f060:	18c0      	addlt	r0, r0, r3
 800f062:	4770      	bx	lr

0800f064 <_read_r>:
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	4d07      	ldr	r5, [pc, #28]	; (800f084 <_read_r+0x20>)
 800f068:	4604      	mov	r4, r0
 800f06a:	4608      	mov	r0, r1
 800f06c:	4611      	mov	r1, r2
 800f06e:	2200      	movs	r2, #0
 800f070:	602a      	str	r2, [r5, #0]
 800f072:	461a      	mov	r2, r3
 800f074:	f7f2 fe7e 	bl	8001d74 <_read>
 800f078:	1c43      	adds	r3, r0, #1
 800f07a:	d102      	bne.n	800f082 <_read_r+0x1e>
 800f07c:	682b      	ldr	r3, [r5, #0]
 800f07e:	b103      	cbz	r3, 800f082 <_read_r+0x1e>
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	bd38      	pop	{r3, r4, r5, pc}
 800f084:	20001828 	.word	0x20001828

0800f088 <__ascii_wctomb>:
 800f088:	b149      	cbz	r1, 800f09e <__ascii_wctomb+0x16>
 800f08a:	2aff      	cmp	r2, #255	; 0xff
 800f08c:	bf85      	ittet	hi
 800f08e:	238a      	movhi	r3, #138	; 0x8a
 800f090:	6003      	strhi	r3, [r0, #0]
 800f092:	700a      	strbls	r2, [r1, #0]
 800f094:	f04f 30ff 	movhi.w	r0, #4294967295
 800f098:	bf98      	it	ls
 800f09a:	2001      	movls	r0, #1
 800f09c:	4770      	bx	lr
 800f09e:	4608      	mov	r0, r1
 800f0a0:	4770      	bx	lr
	...

0800f0a4 <_init>:
 800f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a6:	bf00      	nop
 800f0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0aa:	bc08      	pop	{r3}
 800f0ac:	469e      	mov	lr, r3
 800f0ae:	4770      	bx	lr

0800f0b0 <_fini>:
 800f0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b2:	bf00      	nop
 800f0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0b6:	bc08      	pop	{r3}
 800f0b8:	469e      	mov	lr, r3
 800f0ba:	4770      	bx	lr
