std_abs.h:75:3:constexpr float std::abs(float)	0	static
elementwise.cc:104:37:static float tflite::ops::micro::elementwise::{anonymous}::SquareEval(TfLiteContext*, TfLiteNode*)::<lambda(float)>::_FUN(float)	0	static
cmath:425:3:constexpr float std::sin(float)	0	static
cmath:184:3:constexpr float std::cos(float)	0	static
cmath:338:3:constexpr float std::log(float)	0	static
cmath:463:3:constexpr float std::sqrt(float)	0	static
elementwise.cc:100:37:static float tflite::ops::micro::elementwise::{anonymous}::RsqrtEval(TfLiteContext*, TfLiteNode*)::<lambda(float)>::_FUN(float)	8	static
elementwise.cc:40:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::GenericPrepare(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::ops::micro::elementwise::{anonymous}::IsNumericSupportedType]	40	static
elementwise.cc:40:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::GenericPrepare(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::ops::micro::elementwise::{anonymous}::IsNumericSupportedType]	24	static
elementwise.cc:40:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::GenericPrepare(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::ops::micro::elementwise::{anonymous}::IsLogicalSupportedType]	24	static
elementwise.cc:55:21:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::EvalImpl(TfLiteContext*, TfLiteNode*, T (*)(T), TfLiteType) [with T = float]	40	static
elementwise.cc:103:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::SquareEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:107:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::LogicalNotEval(TfLiteContext*, TfLiteNode*)	32	static
elementwise.cc:79:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::AbsEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:83:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::SinEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:87:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::CosEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:99:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::RsqrtEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:91:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::LogEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:95:14:TfLiteStatus tflite::ops::micro::elementwise::{anonymous}::SqrtEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:114:20:TfLiteRegistration tflite::ops::micro::Register_ABS()	16	static
elementwise.cc:126:20:TfLiteRegistration tflite::ops::micro::Register_SIN()	16	static
elementwise.cc:138:20:TfLiteRegistration tflite::ops::micro::Register_COS()	16	static
elementwise.cc:150:20:TfLiteRegistration tflite::ops::micro::Register_LOG()	16	static
elementwise.cc:162:20:TfLiteRegistration tflite::ops::micro::Register_SQRT()	16	static
elementwise.cc:174:20:TfLiteRegistration tflite::ops::micro::Register_RSQRT()	16	static
elementwise.cc:186:20:TfLiteRegistration tflite::ops::micro::Register_SQUARE()	16	static
elementwise.cc:198:20:TfLiteRegistration tflite::ops::micro::Register_LOGICAL_NOT()	16	static
